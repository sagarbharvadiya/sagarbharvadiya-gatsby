{"version":3,"file":"a198fdd9-5738d3d05977942da76f.js","mappings":"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","sources":["webpack://sagarbharvadiya/./node_modules/@firebase/database/dist/index.esm2017.js"],"sourcesContent":["import { _getProvider, getApp, SDK_VERSION as SDK_VERSION$1, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { stringify, jsonEval, contains, assert, isNodeSdk, stringToByteArray, Sha1, base64, deepCopy, base64Encode, isMobileCordova, stringLength, Deferred, safeGet, isAdmin, isValidFormat, isEmpty, isReactNative, assertionError, map, querystring, errorPrefix, getModularInstance, getDefaultEmulatorHostnameAndPort, createMockUserToken } from '@firebase/util';\nimport { Logger, LogLevel } from '@firebase/logger';\n\nconst name = \"@firebase/database\";\nconst version = \"0.14.4\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** The semver (www.semver.org) version of the SDK. */\r\nlet SDK_VERSION = '';\r\n/**\r\n * SDK_VERSION should be set before any database instance is created\r\n * @internal\r\n */\r\nfunction setSDKVersion(version) {\r\n    SDK_VERSION = version;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Wraps a DOM Storage object and:\r\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\r\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\r\n *\r\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\r\n * and one for localStorage.\r\n *\r\n */\r\nclass DOMStorageWrapper {\r\n    /**\r\n     * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\r\n     */\r\n    constructor(domStorage_) {\r\n        this.domStorage_ = domStorage_;\r\n        // Use a prefix to avoid collisions with other stuff saved by the app.\r\n        this.prefix_ = 'firebase:';\r\n    }\r\n    /**\r\n     * @param key - The key to save the value under\r\n     * @param value - The value being stored, or null to remove the key.\r\n     */\r\n    set(key, value) {\r\n        if (value == null) {\r\n            this.domStorage_.removeItem(this.prefixedName_(key));\r\n        }\r\n        else {\r\n            this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\r\n        }\r\n    }\r\n    /**\r\n     * @returns The value that was stored under this key, or null\r\n     */\r\n    get(key) {\r\n        const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\r\n        if (storedVal == null) {\r\n            return null;\r\n        }\r\n        else {\r\n            return jsonEval(storedVal);\r\n        }\r\n    }\r\n    remove(key) {\r\n        this.domStorage_.removeItem(this.prefixedName_(key));\r\n    }\r\n    prefixedName_(name) {\r\n        return this.prefix_ + name;\r\n    }\r\n    toString() {\r\n        return this.domStorage_.toString();\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\r\n * (TODO: create interface for both to implement).\r\n */\r\nclass MemoryStorage {\r\n    constructor() {\r\n        this.cache_ = {};\r\n        this.isInMemoryStorage = true;\r\n    }\r\n    set(key, value) {\r\n        if (value == null) {\r\n            delete this.cache_[key];\r\n        }\r\n        else {\r\n            this.cache_[key] = value;\r\n        }\r\n    }\r\n    get(key) {\r\n        if (contains(this.cache_, key)) {\r\n            return this.cache_[key];\r\n        }\r\n        return null;\r\n    }\r\n    remove(key) {\r\n        delete this.cache_[key];\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\r\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\r\n * to reflect this type\r\n *\r\n * @param domStorageName - Name of the underlying storage object\r\n *   (e.g. 'localStorage' or 'sessionStorage').\r\n * @returns Turning off type information until a common interface is defined.\r\n */\r\nconst createStoragefor = function (domStorageName) {\r\n    try {\r\n        // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\r\n        // so it must be inside the try/catch.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window[domStorageName] !== 'undefined') {\r\n            // Need to test cache. Just because it's here doesn't mean it works\r\n            const domStorage = window[domStorageName];\r\n            domStorage.setItem('firebase:sentinel', 'cache');\r\n            domStorage.removeItem('firebase:sentinel');\r\n            return new DOMStorageWrapper(domStorage);\r\n        }\r\n    }\r\n    catch (e) { }\r\n    // Failed to create wrapper.  Just return in-memory storage.\r\n    // TODO: log?\r\n    return new MemoryStorage();\r\n};\r\n/** A storage object that lasts across sessions */\r\nconst PersistentStorage = createStoragefor('localStorage');\r\n/** A storage object that only lasts one session */\r\nconst SessionStorage = createStoragefor('sessionStorage');\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logClient = new Logger('@firebase/database');\r\n/**\r\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\r\n */\r\nconst LUIDGenerator = (function () {\r\n    let id = 1;\r\n    return function () {\r\n        return id++;\r\n    };\r\n})();\r\n/**\r\n * Sha1 hash of the input string\r\n * @param str - The string to hash\r\n * @returns {!string} The resulting hash\r\n */\r\nconst sha1 = function (str) {\r\n    const utf8Bytes = stringToByteArray(str);\r\n    const sha1 = new Sha1();\r\n    sha1.update(utf8Bytes);\r\n    const sha1Bytes = sha1.digest();\r\n    return base64.encodeByteArray(sha1Bytes);\r\n};\r\nconst buildLogMessage_ = function (...varArgs) {\r\n    let message = '';\r\n    for (let i = 0; i < varArgs.length; i++) {\r\n        const arg = varArgs[i];\r\n        if (Array.isArray(arg) ||\r\n            (arg &&\r\n                typeof arg === 'object' &&\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                typeof arg.length === 'number')) {\r\n            message += buildLogMessage_.apply(null, arg);\r\n        }\r\n        else if (typeof arg === 'object') {\r\n            message += stringify(arg);\r\n        }\r\n        else {\r\n            message += arg;\r\n        }\r\n        message += ' ';\r\n    }\r\n    return message;\r\n};\r\n/**\r\n * Use this for all debug messages in Firebase.\r\n */\r\nlet logger = null;\r\n/**\r\n * Flag to check for log availability on first log message\r\n */\r\nlet firstLog_ = true;\r\n/**\r\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\r\n * @param logger_ - A flag to turn on logging, or a custom logger\r\n * @param persistent - Whether or not to persist logging settings across refreshes\r\n */\r\nconst enableLogging$1 = function (logger_, persistent) {\r\n    assert(!persistent || logger_ === true || logger_ === false, \"Can't turn on custom loggers persistently.\");\r\n    if (logger_ === true) {\r\n        logClient.logLevel = LogLevel.VERBOSE;\r\n        logger = logClient.log.bind(logClient);\r\n        if (persistent) {\r\n            SessionStorage.set('logging_enabled', true);\r\n        }\r\n    }\r\n    else if (typeof logger_ === 'function') {\r\n        logger = logger_;\r\n    }\r\n    else {\r\n        logger = null;\r\n        SessionStorage.remove('logging_enabled');\r\n    }\r\n};\r\nconst log = function (...varArgs) {\r\n    if (firstLog_ === true) {\r\n        firstLog_ = false;\r\n        if (logger === null && SessionStorage.get('logging_enabled') === true) {\r\n            enableLogging$1(true);\r\n        }\r\n    }\r\n    if (logger) {\r\n        const message = buildLogMessage_.apply(null, varArgs);\r\n        logger(message);\r\n    }\r\n};\r\nconst logWrapper = function (prefix) {\r\n    return function (...varArgs) {\r\n        log(prefix, ...varArgs);\r\n    };\r\n};\r\nconst error = function (...varArgs) {\r\n    const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\r\n    logClient.error(message);\r\n};\r\nconst fatal = function (...varArgs) {\r\n    const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\r\n    logClient.error(message);\r\n    throw new Error(message);\r\n};\r\nconst warn = function (...varArgs) {\r\n    const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\r\n    logClient.warn(message);\r\n};\r\n/**\r\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\r\n * does not use https.\r\n */\r\nconst warnIfPageIsSecure = function () {\r\n    // Be very careful accessing browser globals. Who knows what may or may not exist.\r\n    if (typeof window !== 'undefined' &&\r\n        window.location &&\r\n        window.location.protocol &&\r\n        window.location.protocol.indexOf('https:') !== -1) {\r\n        warn('Insecure Firebase access from a secure page. ' +\r\n            'Please use https in calls to new Firebase().');\r\n    }\r\n};\r\n/**\r\n * Returns true if data is NaN, or +/- Infinity.\r\n */\r\nconst isInvalidJSONNumber = function (data) {\r\n    return (typeof data === 'number' &&\r\n        (data !== data || // NaN\r\n            data === Number.POSITIVE_INFINITY ||\r\n            data === Number.NEGATIVE_INFINITY));\r\n};\r\nconst executeWhenDOMReady = function (fn) {\r\n    if (isNodeSdk() || document.readyState === 'complete') {\r\n        fn();\r\n    }\r\n    else {\r\n        // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\r\n        // fire before onload), but fall back to onload.\r\n        let called = false;\r\n        const wrappedFn = function () {\r\n            if (!document.body) {\r\n                setTimeout(wrappedFn, Math.floor(10));\r\n                return;\r\n            }\r\n            if (!called) {\r\n                called = true;\r\n                fn();\r\n            }\r\n        };\r\n        if (document.addEventListener) {\r\n            document.addEventListener('DOMContentLoaded', wrappedFn, false);\r\n            // fallback to onload.\r\n            window.addEventListener('load', wrappedFn, false);\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }\r\n        else if (document.attachEvent) {\r\n            // IE.\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            document.attachEvent('onreadystatechange', () => {\r\n                if (document.readyState === 'complete') {\r\n                    wrappedFn();\r\n                }\r\n            });\r\n            // fallback to onload.\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            window.attachEvent('onload', wrappedFn);\r\n            // jQuery has an extra hack for IE that we could employ (based on\r\n            // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\r\n            // I'm hoping we don't need it.\r\n        }\r\n    }\r\n};\r\n/**\r\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\r\n */\r\nconst MIN_NAME = '[MIN_NAME]';\r\n/**\r\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\r\n */\r\nconst MAX_NAME = '[MAX_NAME]';\r\n/**\r\n * Compares valid Firebase key names, plus min and max name\r\n */\r\nconst nameCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a === MIN_NAME || b === MAX_NAME) {\r\n        return -1;\r\n    }\r\n    else if (b === MIN_NAME || a === MAX_NAME) {\r\n        return 1;\r\n    }\r\n    else {\r\n        const aAsInt = tryParseInt(a), bAsInt = tryParseInt(b);\r\n        if (aAsInt !== null) {\r\n            if (bAsInt !== null) {\r\n                return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (bAsInt !== null) {\r\n            return 1;\r\n        }\r\n        else {\r\n            return a < b ? -1 : 1;\r\n        }\r\n    }\r\n};\r\n/**\r\n * @returns {!number} comparison result.\r\n */\r\nconst stringCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a < b) {\r\n        return -1;\r\n    }\r\n    else {\r\n        return 1;\r\n    }\r\n};\r\nconst requireKey = function (key, obj) {\r\n    if (obj && key in obj) {\r\n        return obj[key];\r\n    }\r\n    else {\r\n        throw new Error('Missing required key (' + key + ') in object: ' + stringify(obj));\r\n    }\r\n};\r\nconst ObjectToUniqueKey = function (obj) {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return stringify(obj);\r\n    }\r\n    const keys = [];\r\n    // eslint-disable-next-line guard-for-in\r\n    for (const k in obj) {\r\n        keys.push(k);\r\n    }\r\n    // Export as json, but with the keys sorted.\r\n    keys.sort();\r\n    let key = '{';\r\n    for (let i = 0; i < keys.length; i++) {\r\n        if (i !== 0) {\r\n            key += ',';\r\n        }\r\n        key += stringify(keys[i]);\r\n        key += ':';\r\n        key += ObjectToUniqueKey(obj[keys[i]]);\r\n    }\r\n    key += '}';\r\n    return key;\r\n};\r\n/**\r\n * Splits a string into a number of smaller segments of maximum size\r\n * @param str - The string\r\n * @param segsize - The maximum number of chars in the string.\r\n * @returns The string, split into appropriately-sized chunks\r\n */\r\nconst splitStringBySize = function (str, segsize) {\r\n    const len = str.length;\r\n    if (len <= segsize) {\r\n        return [str];\r\n    }\r\n    const dataSegs = [];\r\n    for (let c = 0; c < len; c += segsize) {\r\n        if (c + segsize > len) {\r\n            dataSegs.push(str.substring(c, len));\r\n        }\r\n        else {\r\n            dataSegs.push(str.substring(c, c + segsize));\r\n        }\r\n    }\r\n    return dataSegs;\r\n};\r\n/**\r\n * Apply a function to each (key, value) pair in an object or\r\n * apply a function to each (index, value) pair in an array\r\n * @param obj - The object or array to iterate over\r\n * @param fn - The function to apply\r\n */\r\nfunction each(obj, fn) {\r\n    for (const key in obj) {\r\n        if (obj.hasOwnProperty(key)) {\r\n            fn(key, obj[key]);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\r\n * I made one modification at the end and removed the NaN / Infinity\r\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\r\n * @param v - A double\r\n *\r\n */\r\nconst doubleToIEEE754String = function (v) {\r\n    assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\r\n    const ebits = 11, fbits = 52;\r\n    const bias = (1 << (ebits - 1)) - 1;\r\n    let s, e, f, ln, i;\r\n    // Compute sign, exponent, fraction\r\n    // Skip NaN / Infinity handling --MJL.\r\n    if (v === 0) {\r\n        e = 0;\r\n        f = 0;\r\n        s = 1 / v === -Infinity ? 1 : 0;\r\n    }\r\n    else {\r\n        s = v < 0;\r\n        v = Math.abs(v);\r\n        if (v >= Math.pow(2, 1 - bias)) {\r\n            // Normalized\r\n            ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\r\n            e = ln + bias;\r\n            f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\r\n        }\r\n        else {\r\n            // Denormalized\r\n            e = 0;\r\n            f = Math.round(v / Math.pow(2, 1 - bias - fbits));\r\n        }\r\n    }\r\n    // Pack sign, exponent, fraction\r\n    const bits = [];\r\n    for (i = fbits; i; i -= 1) {\r\n        bits.push(f % 2 ? 1 : 0);\r\n        f = Math.floor(f / 2);\r\n    }\r\n    for (i = ebits; i; i -= 1) {\r\n        bits.push(e % 2 ? 1 : 0);\r\n        e = Math.floor(e / 2);\r\n    }\r\n    bits.push(s ? 1 : 0);\r\n    bits.reverse();\r\n    const str = bits.join('');\r\n    // Return the data as a hex string. --MJL\r\n    let hexByteString = '';\r\n    for (i = 0; i < 64; i += 8) {\r\n        let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\r\n        if (hexByte.length === 1) {\r\n            hexByte = '0' + hexByte;\r\n        }\r\n        hexByteString = hexByteString + hexByte;\r\n    }\r\n    return hexByteString.toLowerCase();\r\n};\r\n/**\r\n * Used to detect if we're in a Chrome content script (which executes in an\r\n * isolated environment where long-polling doesn't work).\r\n */\r\nconst isChromeExtensionContentScript = function () {\r\n    return !!(typeof window === 'object' &&\r\n        window['chrome'] &&\r\n        window['chrome']['extension'] &&\r\n        !/^chrome/.test(window.location.href));\r\n};\r\n/**\r\n * Used to detect if we're in a Windows 8 Store app.\r\n */\r\nconst isWindowsStoreApp = function () {\r\n    // Check for the presence of a couple WinRT globals\r\n    return typeof Windows === 'object' && typeof Windows.UI === 'object';\r\n};\r\n/**\r\n * Converts a server error code to a Javascript Error\r\n */\r\nfunction errorForServerCode(code, query) {\r\n    let reason = 'Unknown Error';\r\n    if (code === 'too_big') {\r\n        reason =\r\n            'The data requested exceeds the maximum size ' +\r\n                'that can be accessed with a single request.';\r\n    }\r\n    else if (code === 'permission_denied') {\r\n        reason = \"Client doesn't have permission to access the desired data.\";\r\n    }\r\n    else if (code === 'unavailable') {\r\n        reason = 'The service is unavailable';\r\n    }\r\n    const error = new Error(code + ' at ' + query._path.toString() + ': ' + reason);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    error.code = code.toUpperCase();\r\n    return error;\r\n}\r\n/**\r\n * Used to test for integer-looking strings\r\n */\r\nconst INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\r\n/**\r\n * For use in keys, the minimum possible 32-bit integer.\r\n */\r\nconst INTEGER_32_MIN = -2147483648;\r\n/**\r\n * For use in kyes, the maximum possible 32-bit integer.\r\n */\r\nconst INTEGER_32_MAX = 2147483647;\r\n/**\r\n * If the string contains a 32-bit integer, return it.  Else return null.\r\n */\r\nconst tryParseInt = function (str) {\r\n    if (INTEGER_REGEXP_.test(str)) {\r\n        const intVal = Number(str);\r\n        if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\r\n            return intVal;\r\n        }\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Helper to run some code but catch any exceptions and re-throw them later.\r\n * Useful for preventing user callbacks from breaking internal code.\r\n *\r\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\r\n * convenient (we don't have to try to figure out when is a safe point to\r\n * re-throw it), and the behavior seems reasonable:\r\n *\r\n * * If you aren't pausing on exceptions, you get an error in the console with\r\n *   the correct stack trace.\r\n * * If you're pausing on all exceptions, the debugger will pause on your\r\n *   exception and then again when we rethrow it.\r\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\r\n *   on us re-throwing it.\r\n *\r\n * @param fn - The code to guard.\r\n */\r\nconst exceptionGuard = function (fn) {\r\n    try {\r\n        fn();\r\n    }\r\n    catch (e) {\r\n        // Re-throw exception when it's safe.\r\n        setTimeout(() => {\r\n            // It used to be that \"throw e\" would result in a good console error with\r\n            // relevant context, but as of Chrome 39, you just get the firebase.js\r\n            // file/line number where we re-throw it, which is useless. So we log\r\n            // e.stack explicitly.\r\n            const stack = e.stack || '';\r\n            warn('Exception was thrown by user callback.', stack);\r\n            throw e;\r\n        }, Math.floor(0));\r\n    }\r\n};\r\n/**\r\n * @returns {boolean} true if we think we're currently being crawled.\r\n */\r\nconst beingCrawled = function () {\r\n    const userAgent = (typeof window === 'object' &&\r\n        window['navigator'] &&\r\n        window['navigator']['userAgent']) ||\r\n        '';\r\n    // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\r\n    // believe to support JavaScript/AJAX rendering.\r\n    // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\r\n    // would have seen the page\" is flaky if we don't treat it as a crawler.\r\n    return (userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0);\r\n};\r\n/**\r\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\r\n *\r\n * It is removed with clearTimeout() as normal.\r\n *\r\n * @param fn - Function to run.\r\n * @param time - Milliseconds to wait before running.\r\n * @returns The setTimeout() return value.\r\n */\r\nconst setTimeoutNonBlocking = function (fn, time) {\r\n    const timeout = setTimeout(fn, time);\r\n    // Note: at the time of this comment, unrefTimer is under the unstable set of APIs. Run with --unstable to enable the API.\r\n    if (typeof timeout === 'number' &&\r\n        // @ts-ignore Is only defined in Deno environments.\r\n        typeof Deno !== 'undefined' &&\r\n        // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\r\n        Deno['unrefTimer']) {\r\n        // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\r\n        Deno.unrefTimer(timeout);\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    }\r\n    else if (typeof timeout === 'object' && timeout['unref']) {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        timeout['unref']();\r\n    }\r\n    return timeout;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Abstraction around AppCheck's token fetching capabilities.\r\n */\r\nclass AppCheckTokenProvider {\r\n    constructor(appName_, appCheckProvider) {\r\n        this.appName_ = appName_;\r\n        this.appCheckProvider = appCheckProvider;\r\n        this.appCheck = appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.getImmediate({ optional: true });\r\n        if (!this.appCheck) {\r\n            appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.get().then(appCheck => (this.appCheck = appCheck));\r\n        }\r\n    }\r\n    getToken(forceRefresh) {\r\n        if (!this.appCheck) {\r\n            return new Promise((resolve, reject) => {\r\n                // Support delayed initialization of FirebaseAppCheck. This allows our\r\n                // customers to initialize the RTDB SDK before initializing Firebase\r\n                // AppCheck and ensures that all requests are authenticated if a token\r\n                // becomes available before the timoeout below expires.\r\n                setTimeout(() => {\r\n                    if (this.appCheck) {\r\n                        this.getToken(forceRefresh).then(resolve, reject);\r\n                    }\r\n                    else {\r\n                        resolve(null);\r\n                    }\r\n                }, 0);\r\n            });\r\n        }\r\n        return this.appCheck.getToken(forceRefresh);\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        var _a;\r\n        (_a = this.appCheckProvider) === null || _a === void 0 ? void 0 : _a.get().then(appCheck => appCheck.addTokenListener(listener));\r\n    }\r\n    notifyForInvalidToken() {\r\n        warn(`Provided AppCheck credentials for the app named \"${this.appName_}\" ` +\r\n            'are invalid. This usually indicates your app was not initialized correctly.');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Abstraction around FirebaseApp's token fetching capabilities.\r\n */\r\nclass FirebaseAuthTokenProvider {\r\n    constructor(appName_, firebaseOptions_, authProvider_) {\r\n        this.appName_ = appName_;\r\n        this.firebaseOptions_ = firebaseOptions_;\r\n        this.authProvider_ = authProvider_;\r\n        this.auth_ = null;\r\n        this.auth_ = authProvider_.getImmediate({ optional: true });\r\n        if (!this.auth_) {\r\n            authProvider_.onInit(auth => (this.auth_ = auth));\r\n        }\r\n    }\r\n    getToken(forceRefresh) {\r\n        if (!this.auth_) {\r\n            return new Promise((resolve, reject) => {\r\n                // Support delayed initialization of FirebaseAuth. This allows our\r\n                // customers to initialize the RTDB SDK before initializing Firebase\r\n                // Auth and ensures that all requests are authenticated if a token\r\n                // becomes available before the timoeout below expires.\r\n                setTimeout(() => {\r\n                    if (this.auth_) {\r\n                        this.getToken(forceRefresh).then(resolve, reject);\r\n                    }\r\n                    else {\r\n                        resolve(null);\r\n                    }\r\n                }, 0);\r\n            });\r\n        }\r\n        return this.auth_.getToken(forceRefresh).catch(error => {\r\n            // TODO: Need to figure out all the cases this is raised and whether\r\n            // this makes sense.\r\n            if (error && error.code === 'auth/token-not-initialized') {\r\n                log('Got auth/token-not-initialized error.  Treating as null token.');\r\n                return null;\r\n            }\r\n            else {\r\n                return Promise.reject(error);\r\n            }\r\n        });\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        // TODO: We might want to wrap the listener and call it with no args to\r\n        // avoid a leaky abstraction, but that makes removing the listener harder.\r\n        if (this.auth_) {\r\n            this.auth_.addAuthTokenListener(listener);\r\n        }\r\n        else {\r\n            this.authProvider_\r\n                .get()\r\n                .then(auth => auth.addAuthTokenListener(listener));\r\n        }\r\n    }\r\n    removeTokenChangeListener(listener) {\r\n        this.authProvider_\r\n            .get()\r\n            .then(auth => auth.removeAuthTokenListener(listener));\r\n    }\r\n    notifyForInvalidToken() {\r\n        let errorMessage = 'Provided authentication credentials for the app named \"' +\r\n            this.appName_ +\r\n            '\" are invalid. This usually indicates your app was not ' +\r\n            'initialized correctly. ';\r\n        if ('credential' in this.firebaseOptions_) {\r\n            errorMessage +=\r\n                'Make sure the \"credential\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else if ('serviceAccount' in this.firebaseOptions_) {\r\n            errorMessage +=\r\n                'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else {\r\n            errorMessage +=\r\n                'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\r\n                    'initializeApp() match the values provided for your app at ' +\r\n                    'https://console.firebase.google.com/.';\r\n        }\r\n        warn(errorMessage);\r\n    }\r\n}\r\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\r\nclass EmulatorTokenProvider {\r\n    constructor(accessToken) {\r\n        this.accessToken = accessToken;\r\n    }\r\n    getToken(forceRefresh) {\r\n        return Promise.resolve({\r\n            accessToken: this.accessToken\r\n        });\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        // Invoke the listener immediately to match the behavior in Firebase Auth\r\n        // (see packages/auth/src/auth.js#L1807)\r\n        listener(this.accessToken);\r\n    }\r\n    removeTokenChangeListener(listener) { }\r\n    notifyForInvalidToken() { }\r\n}\r\n/** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\r\nEmulatorTokenProvider.OWNER = 'owner';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst PROTOCOL_VERSION = '5';\r\nconst VERSION_PARAM = 'v';\r\nconst TRANSPORT_SESSION_PARAM = 's';\r\nconst REFERER_PARAM = 'r';\r\nconst FORGE_REF = 'f';\r\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\r\n// firebase.corp.google.com\r\nconst FORGE_DOMAIN_RE = /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\r\nconst LAST_SESSION_PARAM = 'ls';\r\nconst APPLICATION_ID_PARAM = 'p';\r\nconst APP_CHECK_TOKEN_PARAM = 'ac';\r\nconst WEBSOCKET = 'websocket';\r\nconst LONG_POLLING = 'long_polling';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A class that holds metadata about a Repo object\r\n */\r\nclass RepoInfo {\r\n    /**\r\n     * @param host - Hostname portion of the url for the repo\r\n     * @param secure - Whether or not this repo is accessed over ssl\r\n     * @param namespace - The namespace represented by the repo\r\n     * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\r\n     * @param nodeAdmin - Whether this instance uses Admin SDK credentials\r\n     * @param persistenceKey - Override the default session persistence storage key\r\n     */\r\n    constructor(host, secure, namespace, webSocketOnly, nodeAdmin = false, persistenceKey = '', includeNamespaceInQueryParams = false, isUsingEmulator = false) {\r\n        this.secure = secure;\r\n        this.namespace = namespace;\r\n        this.webSocketOnly = webSocketOnly;\r\n        this.nodeAdmin = nodeAdmin;\r\n        this.persistenceKey = persistenceKey;\r\n        this.includeNamespaceInQueryParams = includeNamespaceInQueryParams;\r\n        this.isUsingEmulator = isUsingEmulator;\r\n        this._host = host.toLowerCase();\r\n        this._domain = this._host.substr(this._host.indexOf('.') + 1);\r\n        this.internalHost =\r\n            PersistentStorage.get('host:' + host) || this._host;\r\n    }\r\n    isCacheableHost() {\r\n        return this.internalHost.substr(0, 2) === 's-';\r\n    }\r\n    isCustomHost() {\r\n        return (this._domain !== 'firebaseio.com' &&\r\n            this._domain !== 'firebaseio-demo.com');\r\n    }\r\n    get host() {\r\n        return this._host;\r\n    }\r\n    set host(newHost) {\r\n        if (newHost !== this.internalHost) {\r\n            this.internalHost = newHost;\r\n            if (this.isCacheableHost()) {\r\n                PersistentStorage.set('host:' + this._host, this.internalHost);\r\n            }\r\n        }\r\n    }\r\n    toString() {\r\n        let str = this.toURLString();\r\n        if (this.persistenceKey) {\r\n            str += '<' + this.persistenceKey + '>';\r\n        }\r\n        return str;\r\n    }\r\n    toURLString() {\r\n        const protocol = this.secure ? 'https://' : 'http://';\r\n        const query = this.includeNamespaceInQueryParams\r\n            ? `?ns=${this.namespace}`\r\n            : '';\r\n        return `${protocol}${this.host}/${query}`;\r\n    }\r\n}\r\nfunction repoInfoNeedsQueryParam(repoInfo) {\r\n    return (repoInfo.host !== repoInfo.internalHost ||\r\n        repoInfo.isCustomHost() ||\r\n        repoInfo.includeNamespaceInQueryParams);\r\n}\r\n/**\r\n * Returns the websocket URL for this repo\r\n * @param repoInfo - RepoInfo object\r\n * @param type - of connection\r\n * @param params - list\r\n * @returns The URL for this repo\r\n */\r\nfunction repoInfoConnectionURL(repoInfo, type, params) {\r\n    assert(typeof type === 'string', 'typeof type must == string');\r\n    assert(typeof params === 'object', 'typeof params must == object');\r\n    let connURL;\r\n    if (type === WEBSOCKET) {\r\n        connURL =\r\n            (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\r\n    }\r\n    else if (type === LONG_POLLING) {\r\n        connURL =\r\n            (repoInfo.secure ? 'https://' : 'http://') +\r\n                repoInfo.internalHost +\r\n                '/.lp?';\r\n    }\r\n    else {\r\n        throw new Error('Unknown connection type: ' + type);\r\n    }\r\n    if (repoInfoNeedsQueryParam(repoInfo)) {\r\n        params['ns'] = repoInfo.namespace;\r\n    }\r\n    const pairs = [];\r\n    each(params, (key, value) => {\r\n        pairs.push(key + '=' + value);\r\n    });\r\n    return connURL + pairs.join('&');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Tracks a collection of stats.\r\n */\r\nclass StatsCollection {\r\n    constructor() {\r\n        this.counters_ = {};\r\n    }\r\n    incrementCounter(name, amount = 1) {\r\n        if (!contains(this.counters_, name)) {\r\n            this.counters_[name] = 0;\r\n        }\r\n        this.counters_[name] += amount;\r\n    }\r\n    get() {\r\n        return deepCopy(this.counters_);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst collections = {};\r\nconst reporters = {};\r\nfunction statsManagerGetCollection(repoInfo) {\r\n    const hashString = repoInfo.toString();\r\n    if (!collections[hashString]) {\r\n        collections[hashString] = new StatsCollection();\r\n    }\r\n    return collections[hashString];\r\n}\r\nfunction statsManagerGetOrCreateReporter(repoInfo, creatorFunction) {\r\n    const hashString = repoInfo.toString();\r\n    if (!reporters[hashString]) {\r\n        reporters[hashString] = creatorFunction();\r\n    }\r\n    return reporters[hashString];\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class ensures the packets from the server arrive in order\r\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\r\n */\r\nclass PacketReceiver {\r\n    /**\r\n     * @param onMessage_\r\n     */\r\n    constructor(onMessage_) {\r\n        this.onMessage_ = onMessage_;\r\n        this.pendingResponses = [];\r\n        this.currentResponseNum = 0;\r\n        this.closeAfterResponse = -1;\r\n        this.onClose = null;\r\n    }\r\n    closeAfter(responseNum, callback) {\r\n        this.closeAfterResponse = responseNum;\r\n        this.onClose = callback;\r\n        if (this.closeAfterResponse < this.currentResponseNum) {\r\n            this.onClose();\r\n            this.onClose = null;\r\n        }\r\n    }\r\n    /**\r\n     * Each message from the server comes with a response number, and an array of data. The responseNumber\r\n     * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\r\n     * browsers will respond in the same order as the requests we sent\r\n     */\r\n    handleResponse(requestNum, data) {\r\n        this.pendingResponses[requestNum] = data;\r\n        while (this.pendingResponses[this.currentResponseNum]) {\r\n            const toProcess = this.pendingResponses[this.currentResponseNum];\r\n            delete this.pendingResponses[this.currentResponseNum];\r\n            for (let i = 0; i < toProcess.length; ++i) {\r\n                if (toProcess[i]) {\r\n                    exceptionGuard(() => {\r\n                        this.onMessage_(toProcess[i]);\r\n                    });\r\n                }\r\n            }\r\n            if (this.currentResponseNum === this.closeAfterResponse) {\r\n                if (this.onClose) {\r\n                    this.onClose();\r\n                    this.onClose = null;\r\n                }\r\n                break;\r\n            }\r\n            this.currentResponseNum++;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// URL query parameters associated with longpolling\r\nconst FIREBASE_LONGPOLL_START_PARAM = 'start';\r\nconst FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\r\nconst FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\r\nconst FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\r\nconst FIREBASE_LONGPOLL_ID_PARAM = 'id';\r\nconst FIREBASE_LONGPOLL_PW_PARAM = 'pw';\r\nconst FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\r\nconst FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\r\nconst FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\r\nconst FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\r\nconst FIREBASE_LONGPOLL_DATA_PARAM = 'd';\r\nconst FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\r\n//Data size constants.\r\n//TODO: Perf: the maximum length actually differs from browser to browser.\r\n// We should check what browser we're on and set accordingly.\r\nconst MAX_URL_DATA_SIZE = 1870;\r\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\r\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\r\n/**\r\n * Keepalive period\r\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\r\n * length of 30 seconds that we can't exceed.\r\n */\r\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\r\n/**\r\n * How long to wait before aborting a long-polling connection attempt.\r\n */\r\nconst LP_CONNECT_TIMEOUT = 30000;\r\n/**\r\n * This class manages a single long-polling connection.\r\n */\r\nclass BrowserPollConnection {\r\n    /**\r\n     * @param connId An identifier for this connection, used for logging\r\n     * @param repoInfo The info for the endpoint to send data to.\r\n     * @param applicationId The Firebase App ID for this project.\r\n     * @param appCheckToken The AppCheck token for this client.\r\n     * @param authToken The AuthToken to use for this connection.\r\n     * @param transportSessionId Optional transportSessionid if we are\r\n     * reconnecting for an existing transport session\r\n     * @param lastSessionId Optional lastSessionId if the PersistentConnection has\r\n     * already created a connection previously\r\n     */\r\n    constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.repoInfo = repoInfo;\r\n        this.applicationId = applicationId;\r\n        this.appCheckToken = appCheckToken;\r\n        this.authToken = authToken;\r\n        this.transportSessionId = transportSessionId;\r\n        this.lastSessionId = lastSessionId;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.everConnected_ = false;\r\n        this.log_ = logWrapper(connId);\r\n        this.stats_ = statsManagerGetCollection(repoInfo);\r\n        this.urlFn = (params) => {\r\n            // Always add the token if we have one.\r\n            if (this.appCheckToken) {\r\n                params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\r\n            }\r\n            return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\r\n        };\r\n    }\r\n    /**\r\n     * @param onMessage - Callback when messages arrive\r\n     * @param onDisconnect - Callback with connection lost.\r\n     */\r\n    open(onMessage, onDisconnect) {\r\n        this.curSegmentNum = 0;\r\n        this.onDisconnect_ = onDisconnect;\r\n        this.myPacketOrderer = new PacketReceiver(onMessage);\r\n        this.isClosed_ = false;\r\n        this.connectTimeoutTimer_ = setTimeout(() => {\r\n            this.log_('Timed out trying to connect.');\r\n            // Make sure we clear the host cache\r\n            this.onClosed_();\r\n            this.connectTimeoutTimer_ = null;\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(LP_CONNECT_TIMEOUT));\r\n        // Ensure we delay the creation of the iframe until the DOM is loaded.\r\n        executeWhenDOMReady(() => {\r\n            if (this.isClosed_) {\r\n                return;\r\n            }\r\n            //Set up a callback that gets triggered once a connection is set up.\r\n            this.scriptTagHolder = new FirebaseIFrameScriptHolder((...args) => {\r\n                const [command, arg1, arg2, arg3, arg4] = args;\r\n                this.incrementIncomingBytes_(args);\r\n                if (!this.scriptTagHolder) {\r\n                    return; // we closed the connection.\r\n                }\r\n                if (this.connectTimeoutTimer_) {\r\n                    clearTimeout(this.connectTimeoutTimer_);\r\n                    this.connectTimeoutTimer_ = null;\r\n                }\r\n                this.everConnected_ = true;\r\n                if (command === FIREBASE_LONGPOLL_START_PARAM) {\r\n                    this.id = arg1;\r\n                    this.password = arg2;\r\n                }\r\n                else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\r\n                    // Don't clear the host cache. We got a response from the server, so we know it's reachable\r\n                    if (arg1) {\r\n                        // We aren't expecting any more data (other than what the server's already in the process of sending us\r\n                        // through our already open polls), so don't send any more.\r\n                        this.scriptTagHolder.sendNewPolls = false;\r\n                        // arg1 in this case is the last response number sent by the server. We should try to receive\r\n                        // all of the responses up to this one before closing\r\n                        this.myPacketOrderer.closeAfter(arg1, () => {\r\n                            this.onClosed_();\r\n                        });\r\n                    }\r\n                    else {\r\n                        this.onClosed_();\r\n                    }\r\n                }\r\n                else {\r\n                    throw new Error('Unrecognized command received: ' + command);\r\n                }\r\n            }, (...args) => {\r\n                const [pN, data] = args;\r\n                this.incrementIncomingBytes_(args);\r\n                this.myPacketOrderer.handleResponse(pN, data);\r\n            }, () => {\r\n                this.onClosed_();\r\n            }, this.urlFn);\r\n            //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\r\n            //from cache.\r\n            const urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);\r\n            if (this.scriptTagHolder.uniqueCallbackIdentifier) {\r\n                urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] =\r\n                    this.scriptTagHolder.uniqueCallbackIdentifier;\r\n            }\r\n            urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n            if (this.transportSessionId) {\r\n                urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\r\n            }\r\n            if (this.lastSessionId) {\r\n                urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\r\n            }\r\n            if (this.applicationId) {\r\n                urlParams[APPLICATION_ID_PARAM] = this.applicationId;\r\n            }\r\n            if (this.appCheckToken) {\r\n                urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\r\n            }\r\n            if (typeof location !== 'undefined' &&\r\n                location.hostname &&\r\n                FORGE_DOMAIN_RE.test(location.hostname)) {\r\n                urlParams[REFERER_PARAM] = FORGE_REF;\r\n            }\r\n            const connectURL = this.urlFn(urlParams);\r\n            this.log_('Connecting via long-poll to ' + connectURL);\r\n            this.scriptTagHolder.addTag(connectURL, () => {\r\n                /* do nothing */\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Call this when a handshake has completed successfully and we want to consider the connection established\r\n     */\r\n    start() {\r\n        this.scriptTagHolder.startLongPoll(this.id, this.password);\r\n        this.addDisconnectPingFrame(this.id, this.password);\r\n    }\r\n    /**\r\n     * Forces long polling to be considered as a potential transport\r\n     */\r\n    static forceAllow() {\r\n        BrowserPollConnection.forceAllow_ = true;\r\n    }\r\n    /**\r\n     * Forces longpolling to not be considered as a potential transport\r\n     */\r\n    static forceDisallow() {\r\n        BrowserPollConnection.forceDisallow_ = true;\r\n    }\r\n    // Static method, use string literal so it can be accessed in a generic way\r\n    static isAvailable() {\r\n        if (isNodeSdk()) {\r\n            return false;\r\n        }\r\n        else if (BrowserPollConnection.forceAllow_) {\r\n            return true;\r\n        }\r\n        else {\r\n            // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\r\n            // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\r\n            return (!BrowserPollConnection.forceDisallow_ &&\r\n                typeof document !== 'undefined' &&\r\n                document.createElement != null &&\r\n                !isChromeExtensionContentScript() &&\r\n                !isWindowsStoreApp());\r\n        }\r\n    }\r\n    /**\r\n     * No-op for polling\r\n     */\r\n    markConnectionHealthy() { }\r\n    /**\r\n     * Stops polling and cleans up the iframe\r\n     */\r\n    shutdown_() {\r\n        this.isClosed_ = true;\r\n        if (this.scriptTagHolder) {\r\n            this.scriptTagHolder.close();\r\n            this.scriptTagHolder = null;\r\n        }\r\n        //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\r\n        if (this.myDisconnFrame) {\r\n            document.body.removeChild(this.myDisconnFrame);\r\n            this.myDisconnFrame = null;\r\n        }\r\n        if (this.connectTimeoutTimer_) {\r\n            clearTimeout(this.connectTimeoutTimer_);\r\n            this.connectTimeoutTimer_ = null;\r\n        }\r\n    }\r\n    /**\r\n     * Triggered when this transport is closed\r\n     */\r\n    onClosed_() {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is closing itself');\r\n            this.shutdown_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_(this.everConnected_);\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\r\n     * that we've left.\r\n     */\r\n    close() {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is being closed.');\r\n            this.shutdown_();\r\n        }\r\n    }\r\n    /**\r\n     * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\r\n     * broken into chunks (since URLs have a small maximum length).\r\n     * @param data - The JSON data to transmit.\r\n     */\r\n    send(data) {\r\n        const dataStr = stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //first, lets get the base64-encoded data\r\n        const base64data = base64Encode(dataStr);\r\n        //We can only fit a certain amount in each URL, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\r\n        //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\r\n        //of segments so that we can reassemble the packet on the server.\r\n        for (let i = 0; i < dataSegs.length; i++) {\r\n            this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);\r\n            this.curSegmentNum++;\r\n        }\r\n    }\r\n    /**\r\n     * This is how we notify the server that we're leaving.\r\n     * We aren't able to send requests with DHTML on a window close event, but we can\r\n     * trigger XHR requests in some browsers (everything but Opera basically).\r\n     */\r\n    addDisconnectPingFrame(id, pw) {\r\n        if (isNodeSdk()) {\r\n            return;\r\n        }\r\n        this.myDisconnFrame = document.createElement('iframe');\r\n        const urlParams = {};\r\n        urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\r\n        urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\r\n        urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\r\n        this.myDisconnFrame.src = this.urlFn(urlParams);\r\n        this.myDisconnFrame.style.display = 'none';\r\n        document.body.appendChild(this.myDisconnFrame);\r\n    }\r\n    /**\r\n     * Used to track the bytes received by this client\r\n     */\r\n    incrementIncomingBytes_(args) {\r\n        // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\r\n        const bytesReceived = stringify(args).length;\r\n        this.bytesReceived += bytesReceived;\r\n        this.stats_.incrementCounter('bytes_received', bytesReceived);\r\n    }\r\n}\r\n/*********************************************************************************************\r\n * A wrapper around an iframe that is used as a long-polling script holder.\r\n *********************************************************************************************/\r\nclass FirebaseIFrameScriptHolder {\r\n    /**\r\n     * @param commandCB - The callback to be called when control commands are recevied from the server.\r\n     * @param onMessageCB - The callback to be triggered when responses arrive from the server.\r\n     * @param onDisconnect - The callback to be triggered when this tag holder is closed\r\n     * @param urlFn - A function that provides the URL of the endpoint to send data to.\r\n     */\r\n    constructor(commandCB, onMessageCB, onDisconnect, urlFn) {\r\n        this.onDisconnect = onDisconnect;\r\n        this.urlFn = urlFn;\r\n        //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\r\n        //problems in some browsers.\r\n        this.outstandingRequests = new Set();\r\n        //A queue of the pending segments waiting for transmission to the server.\r\n        this.pendingSegs = [];\r\n        //A serial number. We use this for two things:\r\n        // 1) A way to ensure the browser doesn't cache responses to polls\r\n        // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\r\n        //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\r\n        //    JSONP code in the order it was added to the iframe.\r\n        this.currentSerial = Math.floor(Math.random() * 100000000);\r\n        // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\r\n        // incoming data from the server that we're waiting for).\r\n        this.sendNewPolls = true;\r\n        if (!isNodeSdk()) {\r\n            //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\r\n            //iframes where we put the long-polling script tags. We have two callbacks:\r\n            //   1) Command Callback - Triggered for control issues, like starting a connection.\r\n            //   2) Message Callback - Triggered when new data arrives.\r\n            this.uniqueCallbackIdentifier = LUIDGenerator();\r\n            window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;\r\n            window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] =\r\n                onMessageCB;\r\n            //Create an iframe for us to add script tags to.\r\n            this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\r\n            // Set the iframe's contents.\r\n            let script = '';\r\n            // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\r\n            // for ie9, but ie8 needs to do it again in the document itself.\r\n            if (this.myIFrame.src &&\r\n                this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {\r\n                const currentDomain = document.domain;\r\n                script = '<script>document.domain=\"' + currentDomain + '\";</script>';\r\n            }\r\n            const iframeContents = '<html><body>' + script + '</body></html>';\r\n            try {\r\n                this.myIFrame.doc.open();\r\n                this.myIFrame.doc.write(iframeContents);\r\n                this.myIFrame.doc.close();\r\n            }\r\n            catch (e) {\r\n                log('frame writing exception');\r\n                if (e.stack) {\r\n                    log(e.stack);\r\n                }\r\n                log(e);\r\n            }\r\n        }\r\n        else {\r\n            this.commandCB = commandCB;\r\n            this.onMessageCB = onMessageCB;\r\n        }\r\n    }\r\n    /**\r\n     * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\r\n     * actually use.\r\n     */\r\n    static createIFrame_() {\r\n        const iframe = document.createElement('iframe');\r\n        iframe.style.display = 'none';\r\n        // This is necessary in order to initialize the document inside the iframe\r\n        if (document.body) {\r\n            document.body.appendChild(iframe);\r\n            try {\r\n                // If document.domain has been modified in IE, this will throw an error, and we need to set the\r\n                // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\r\n                // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\r\n                const a = iframe.contentWindow.document;\r\n                if (!a) {\r\n                    // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\r\n                    log('No IE domain setting required');\r\n                }\r\n            }\r\n            catch (e) {\r\n                const domain = document.domain;\r\n                iframe.src =\r\n                    \"javascript:void((function(){document.open();document.domain='\" +\r\n                        domain +\r\n                        \"';document.close();})())\";\r\n            }\r\n        }\r\n        else {\r\n            // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\r\n            // never gets hit.\r\n            throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\r\n        }\r\n        // Get the document of the iframe in a browser-specific way.\r\n        if (iframe.contentDocument) {\r\n            iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\r\n        }\r\n        else if (iframe.contentWindow) {\r\n            iframe.doc = iframe.contentWindow.document; // Internet Explorer\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }\r\n        else if (iframe.document) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            iframe.doc = iframe.document; //others?\r\n        }\r\n        return iframe;\r\n    }\r\n    /**\r\n     * Cancel all outstanding queries and remove the frame.\r\n     */\r\n    close() {\r\n        //Mark this iframe as dead, so no new requests are sent.\r\n        this.alive = false;\r\n        if (this.myIFrame) {\r\n            //We have to actually remove all of the html inside this iframe before removing it from the\r\n            //window, or IE will continue loading and executing the script tags we've already added, which\r\n            //can lead to some errors being thrown. Setting textContent seems to be the safest way to do this.\r\n            this.myIFrame.doc.body.textContent = '';\r\n            setTimeout(() => {\r\n                if (this.myIFrame !== null) {\r\n                    document.body.removeChild(this.myIFrame);\r\n                    this.myIFrame = null;\r\n                }\r\n            }, Math.floor(0));\r\n        }\r\n        // Protect from being called recursively.\r\n        const onDisconnect = this.onDisconnect;\r\n        if (onDisconnect) {\r\n            this.onDisconnect = null;\r\n            onDisconnect();\r\n        }\r\n    }\r\n    /**\r\n     * Actually start the long-polling session by adding the first script tag(s) to the iframe.\r\n     * @param id - The ID of this connection\r\n     * @param pw - The password for this connection\r\n     */\r\n    startLongPoll(id, pw) {\r\n        this.myID = id;\r\n        this.myPW = pw;\r\n        this.alive = true;\r\n        //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\r\n        while (this.newRequest_()) { }\r\n    }\r\n    /**\r\n     * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\r\n     * too many outstanding requests and we are still alive.\r\n     *\r\n     * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\r\n     * needed.\r\n     */\r\n    newRequest_() {\r\n        // We keep one outstanding request open all the time to receive data, but if we need to send data\r\n        // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\r\n        // close the old request.\r\n        if (this.alive &&\r\n            this.sendNewPolls &&\r\n            this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)) {\r\n            //construct our url\r\n            this.currentSerial++;\r\n            const urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\r\n            urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\r\n            let theURL = this.urlFn(urlParams);\r\n            //Now add as much data as we can.\r\n            let curDataString = '';\r\n            let i = 0;\r\n            while (this.pendingSegs.length > 0) {\r\n                //first, lets see if the next segment will fit.\r\n                const nextSeg = this.pendingSegs[0];\r\n                if (nextSeg.d.length +\r\n                    SEG_HEADER_SIZE +\r\n                    curDataString.length <=\r\n                    MAX_URL_DATA_SIZE) {\r\n                    //great, the segment will fit. Lets append it.\r\n                    const theSeg = this.pendingSegs.shift();\r\n                    curDataString =\r\n                        curDataString +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.seg +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.ts +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_DATA_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.d;\r\n                    i++;\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            theURL = theURL + curDataString;\r\n            this.addLongPollTag_(theURL, this.currentSerial);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    /**\r\n     * Queue a packet for transmission to the server.\r\n     * @param segnum - A sequential id for this packet segment used for reassembly\r\n     * @param totalsegs - The total number of segments in this packet\r\n     * @param data - The data for this segment.\r\n     */\r\n    enqueueSegment(segnum, totalsegs, data) {\r\n        //add this to the queue of segments to send.\r\n        this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\r\n        //send the data immediately if there isn't already data being transmitted, unless\r\n        //startLongPoll hasn't been called yet.\r\n        if (this.alive) {\r\n            this.newRequest_();\r\n        }\r\n    }\r\n    /**\r\n     * Add a script tag for a regular long-poll request.\r\n     * @param url - The URL of the script tag.\r\n     * @param serial - The serial number of the request.\r\n     */\r\n    addLongPollTag_(url, serial) {\r\n        //remember that we sent this request.\r\n        this.outstandingRequests.add(serial);\r\n        const doNewRequest = () => {\r\n            this.outstandingRequests.delete(serial);\r\n            this.newRequest_();\r\n        };\r\n        // If this request doesn't return on its own accord (by the server sending us some data), we'll\r\n        // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\r\n        const keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));\r\n        const readyStateCB = () => {\r\n            // Request completed.  Cancel the keepalive.\r\n            clearTimeout(keepaliveTimeout);\r\n            // Trigger a new request so we can continue receiving data.\r\n            doNewRequest();\r\n        };\r\n        this.addTag(url, readyStateCB);\r\n    }\r\n    /**\r\n     * Add an arbitrary script tag to the iframe.\r\n     * @param url - The URL for the script tag source.\r\n     * @param loadCB - A callback to be triggered once the script has loaded.\r\n     */\r\n    addTag(url, loadCB) {\r\n        if (isNodeSdk()) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            this.doNodeLongPoll(url, loadCB);\r\n        }\r\n        else {\r\n            setTimeout(() => {\r\n                try {\r\n                    // if we're already closed, don't add this poll\r\n                    if (!this.sendNewPolls) {\r\n                        return;\r\n                    }\r\n                    const newScript = this.myIFrame.doc.createElement('script');\r\n                    newScript.type = 'text/javascript';\r\n                    newScript.async = true;\r\n                    newScript.src = url;\r\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                    newScript.onload = newScript.onreadystatechange =\r\n                        function () {\r\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                            const rstate = newScript.readyState;\r\n                            if (!rstate || rstate === 'loaded' || rstate === 'complete') {\r\n                                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                                newScript.onload = newScript.onreadystatechange = null;\r\n                                if (newScript.parentNode) {\r\n                                    newScript.parentNode.removeChild(newScript);\r\n                                }\r\n                                loadCB();\r\n                            }\r\n                        };\r\n                    newScript.onerror = () => {\r\n                        log('Long-poll script failed to load: ' + url);\r\n                        this.sendNewPolls = false;\r\n                        this.close();\r\n                    };\r\n                    this.myIFrame.doc.body.appendChild(newScript);\r\n                }\r\n                catch (e) {\r\n                    // TODO: we should make this error visible somehow\r\n                }\r\n            }, Math.floor(1));\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\r\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\r\nlet WebSocketImpl = null;\r\nif (typeof MozWebSocket !== 'undefined') {\r\n    WebSocketImpl = MozWebSocket;\r\n}\r\nelse if (typeof WebSocket !== 'undefined') {\r\n    WebSocketImpl = WebSocket;\r\n}\r\n/**\r\n * Create a new websocket connection with the given callbacks.\r\n */\r\nclass WebSocketConnection {\r\n    /**\r\n     * @param connId identifier for this transport\r\n     * @param repoInfo The info for the websocket endpoint.\r\n     * @param applicationId The Firebase App ID for this project.\r\n     * @param appCheckToken The App Check Token for this client.\r\n     * @param authToken The Auth Token for this client.\r\n     * @param transportSessionId Optional transportSessionId if this is connecting\r\n     * to an existing transport session\r\n     * @param lastSessionId Optional lastSessionId if there was a previous\r\n     * connection\r\n     */\r\n    constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.applicationId = applicationId;\r\n        this.appCheckToken = appCheckToken;\r\n        this.authToken = authToken;\r\n        this.keepaliveTimer = null;\r\n        this.frames = null;\r\n        this.totalFrames = 0;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.log_ = logWrapper(this.connId);\r\n        this.stats_ = statsManagerGetCollection(repoInfo);\r\n        this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken, applicationId);\r\n        this.nodeAdmin = repoInfo.nodeAdmin;\r\n    }\r\n    /**\r\n     * @param repoInfo - The info for the websocket endpoint.\r\n     * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\r\n     *                                         session\r\n     * @param lastSessionId - Optional lastSessionId if there was a previous connection\r\n     * @returns connection url\r\n     */\r\n    static connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken, applicationId) {\r\n        const urlParams = {};\r\n        urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n        if (!isNodeSdk() &&\r\n            typeof location !== 'undefined' &&\r\n            location.hostname &&\r\n            FORGE_DOMAIN_RE.test(location.hostname)) {\r\n            urlParams[REFERER_PARAM] = FORGE_REF;\r\n        }\r\n        if (transportSessionId) {\r\n            urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\r\n        }\r\n        if (lastSessionId) {\r\n            urlParams[LAST_SESSION_PARAM] = lastSessionId;\r\n        }\r\n        if (appCheckToken) {\r\n            urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\r\n        }\r\n        if (applicationId) {\r\n            urlParams[APPLICATION_ID_PARAM] = applicationId;\r\n        }\r\n        return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\r\n    }\r\n    /**\r\n     * @param onMessage - Callback when messages arrive\r\n     * @param onDisconnect - Callback with connection lost.\r\n     */\r\n    open(onMessage, onDisconnect) {\r\n        this.onDisconnect = onDisconnect;\r\n        this.onMessage = onMessage;\r\n        this.log_('Websocket connecting to ' + this.connURL);\r\n        this.everConnected_ = false;\r\n        // Assume failure until proven otherwise.\r\n        PersistentStorage.set('previous_websocket_failure', true);\r\n        try {\r\n            let options;\r\n            if (isNodeSdk()) {\r\n                const device = this.nodeAdmin ? 'AdminNode' : 'Node';\r\n                // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\r\n                options = {\r\n                    headers: {\r\n                        'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\r\n                        'X-Firebase-GMPID': this.applicationId || ''\r\n                    }\r\n                };\r\n                // If using Node with admin creds, AppCheck-related checks are unnecessary.\r\n                // Note that we send the credentials here even if they aren't admin credentials, which is\r\n                // not a problem.\r\n                // Note that this header is just used to bypass appcheck, and the token should still be sent\r\n                // through the websocket connection once it is established.\r\n                if (this.authToken) {\r\n                    options.headers['Authorization'] = `Bearer ${this.authToken}`;\r\n                }\r\n                if (this.appCheckToken) {\r\n                    options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\r\n                }\r\n                // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\r\n                const env = process['env'];\r\n                const proxy = this.connURL.indexOf('wss://') === 0\r\n                    ? env['HTTPS_PROXY'] || env['https_proxy']\r\n                    : env['HTTP_PROXY'] || env['http_proxy'];\r\n                if (proxy) {\r\n                    options['proxy'] = { origin: proxy };\r\n                }\r\n            }\r\n            this.mySock = new WebSocketImpl(this.connURL, [], options);\r\n        }\r\n        catch (e) {\r\n            this.log_('Error instantiating WebSocket.');\r\n            const error = e.message || e.data;\r\n            if (error) {\r\n                this.log_(error);\r\n            }\r\n            this.onClosed_();\r\n            return;\r\n        }\r\n        this.mySock.onopen = () => {\r\n            this.log_('Websocket connected.');\r\n            this.everConnected_ = true;\r\n        };\r\n        this.mySock.onclose = () => {\r\n            this.log_('Websocket connection was disconnected.');\r\n            this.mySock = null;\r\n            this.onClosed_();\r\n        };\r\n        this.mySock.onmessage = m => {\r\n            this.handleIncomingFrame(m);\r\n        };\r\n        this.mySock.onerror = e => {\r\n            this.log_('WebSocket error.  Closing connection.');\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const error = e.message || e.data;\r\n            if (error) {\r\n                this.log_(error);\r\n            }\r\n            this.onClosed_();\r\n        };\r\n    }\r\n    /**\r\n     * No-op for websockets, we don't need to do anything once the connection is confirmed as open\r\n     */\r\n    start() { }\r\n    static forceDisallow() {\r\n        WebSocketConnection.forceDisallow_ = true;\r\n    }\r\n    static isAvailable() {\r\n        let isOldAndroid = false;\r\n        if (typeof navigator !== 'undefined' && navigator.userAgent) {\r\n            const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\r\n            const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\r\n            if (oldAndroidMatch && oldAndroidMatch.length > 1) {\r\n                if (parseFloat(oldAndroidMatch[1]) < 4.4) {\r\n                    isOldAndroid = true;\r\n                }\r\n            }\r\n        }\r\n        return (!isOldAndroid &&\r\n            WebSocketImpl !== null &&\r\n            !WebSocketConnection.forceDisallow_);\r\n    }\r\n    /**\r\n     * Returns true if we previously failed to connect with this transport.\r\n     */\r\n    static previouslyFailed() {\r\n        // If our persistent storage is actually only in-memory storage,\r\n        // we default to assuming that it previously failed to be safe.\r\n        return (PersistentStorage.isInMemoryStorage ||\r\n            PersistentStorage.get('previous_websocket_failure') === true);\r\n    }\r\n    markConnectionHealthy() {\r\n        PersistentStorage.remove('previous_websocket_failure');\r\n    }\r\n    appendFrame_(data) {\r\n        this.frames.push(data);\r\n        if (this.frames.length === this.totalFrames) {\r\n            const fullMess = this.frames.join('');\r\n            this.frames = null;\r\n            const jsonMess = jsonEval(fullMess);\r\n            //handle the message\r\n            this.onMessage(jsonMess);\r\n        }\r\n    }\r\n    /**\r\n     * @param frameCount - The number of frames we are expecting from the server\r\n     */\r\n    handleNewFrameCount_(frameCount) {\r\n        this.totalFrames = frameCount;\r\n        this.frames = [];\r\n    }\r\n    /**\r\n     * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\r\n     * @returns Any remaining data to be process, or null if there is none\r\n     */\r\n    extractFrameCount_(data) {\r\n        assert(this.frames === null, 'We already have a frame buffer');\r\n        // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\r\n        // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\r\n        if (data.length <= 6) {\r\n            const frameCount = Number(data);\r\n            if (!isNaN(frameCount)) {\r\n                this.handleNewFrameCount_(frameCount);\r\n                return null;\r\n            }\r\n        }\r\n        this.handleNewFrameCount_(1);\r\n        return data;\r\n    }\r\n    /**\r\n     * Process a websocket frame that has arrived from the server.\r\n     * @param mess - The frame data\r\n     */\r\n    handleIncomingFrame(mess) {\r\n        if (this.mySock === null) {\r\n            return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\r\n        }\r\n        const data = mess['data'];\r\n        this.bytesReceived += data.length;\r\n        this.stats_.incrementCounter('bytes_received', data.length);\r\n        this.resetKeepAlive();\r\n        if (this.frames !== null) {\r\n            // we're buffering\r\n            this.appendFrame_(data);\r\n        }\r\n        else {\r\n            // try to parse out a frame count, otherwise, assume 1 and process it\r\n            const remainingData = this.extractFrameCount_(data);\r\n            if (remainingData !== null) {\r\n                this.appendFrame_(remainingData);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Send a message to the server\r\n     * @param data - The JSON object to transmit\r\n     */\r\n    send(data) {\r\n        this.resetKeepAlive();\r\n        const dataStr = stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //We can only fit a certain amount in each websocket frame, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\r\n        //Send the length header\r\n        if (dataSegs.length > 1) {\r\n            this.sendString_(String(dataSegs.length));\r\n        }\r\n        //Send the actual data in segments.\r\n        for (let i = 0; i < dataSegs.length; i++) {\r\n            this.sendString_(dataSegs[i]);\r\n        }\r\n    }\r\n    shutdown_() {\r\n        this.isClosed_ = true;\r\n        if (this.keepaliveTimer) {\r\n            clearInterval(this.keepaliveTimer);\r\n            this.keepaliveTimer = null;\r\n        }\r\n        if (this.mySock) {\r\n            this.mySock.close();\r\n            this.mySock = null;\r\n        }\r\n    }\r\n    onClosed_() {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is closing itself');\r\n            this.shutdown_();\r\n            // since this is an internal close, trigger the close listener\r\n            if (this.onDisconnect) {\r\n                this.onDisconnect(this.everConnected_);\r\n                this.onDisconnect = null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * External-facing close handler.\r\n     * Close the websocket and kill the connection.\r\n     */\r\n    close() {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is being closed');\r\n            this.shutdown_();\r\n        }\r\n    }\r\n    /**\r\n     * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\r\n     * the last activity.\r\n     */\r\n    resetKeepAlive() {\r\n        clearInterval(this.keepaliveTimer);\r\n        this.keepaliveTimer = setInterval(() => {\r\n            //If there has been no websocket activity for a while, send a no-op\r\n            if (this.mySock) {\r\n                this.sendString_('0');\r\n            }\r\n            this.resetKeepAlive();\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));\r\n    }\r\n    /**\r\n     * Send a string over the websocket.\r\n     *\r\n     * @param str - String to send.\r\n     */\r\n    sendString_(str) {\r\n        // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\r\n        // calls for some unknown reason.  We treat these as an error and disconnect.\r\n        // See https://app.asana.com/0/58926111402292/68021340250410\r\n        try {\r\n            this.mySock.send(str);\r\n        }\r\n        catch (e) {\r\n            this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');\r\n            setTimeout(this.onClosed_.bind(this), 0);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Number of response before we consider the connection \"healthy.\"\r\n */\r\nWebSocketConnection.responsesRequiredToBeHealthy = 2;\r\n/**\r\n * Time to wait for the connection te become healthy before giving up.\r\n */\r\nWebSocketConnection.healthyTimeout = 30000;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\r\n * lifecycle.\r\n *\r\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\r\n * they are available.\r\n */\r\nclass TransportManager {\r\n    /**\r\n     * @param repoInfo - Metadata around the namespace we're connecting to\r\n     */\r\n    constructor(repoInfo) {\r\n        this.initTransports_(repoInfo);\r\n    }\r\n    static get ALL_TRANSPORTS() {\r\n        return [BrowserPollConnection, WebSocketConnection];\r\n    }\r\n    /**\r\n     * Returns whether transport has been selected to ensure WebSocketConnection or BrowserPollConnection are not called after\r\n     * TransportManager has already set up transports_\r\n     */\r\n    static get IS_TRANSPORT_INITIALIZED() {\r\n        return this.globalTransportInitialized_;\r\n    }\r\n    initTransports_(repoInfo) {\r\n        const isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();\r\n        let isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\r\n        if (repoInfo.webSocketOnly) {\r\n            if (!isWebSocketsAvailable) {\r\n                warn(\"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\");\r\n            }\r\n            isSkipPollConnection = true;\r\n        }\r\n        if (isSkipPollConnection) {\r\n            this.transports_ = [WebSocketConnection];\r\n        }\r\n        else {\r\n            const transports = (this.transports_ = []);\r\n            for (const transport of TransportManager.ALL_TRANSPORTS) {\r\n                if (transport && transport['isAvailable']()) {\r\n                    transports.push(transport);\r\n                }\r\n            }\r\n            TransportManager.globalTransportInitialized_ = true;\r\n        }\r\n    }\r\n    /**\r\n     * @returns The constructor for the initial transport to use\r\n     */\r\n    initialTransport() {\r\n        if (this.transports_.length > 0) {\r\n            return this.transports_[0];\r\n        }\r\n        else {\r\n            throw new Error('No transports available');\r\n        }\r\n    }\r\n    /**\r\n     * @returns The constructor for the next transport, or null\r\n     */\r\n    upgradeTransport() {\r\n        if (this.transports_.length > 1) {\r\n            return this.transports_[1];\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n// Keeps track of whether the TransportManager has already chosen a transport to use\r\nTransportManager.globalTransportInitialized_ = false;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Abort upgrade attempt if it takes longer than 60s.\r\nconst UPGRADE_TIMEOUT = 60000;\r\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\r\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\r\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\r\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\r\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\r\n// but we've sent/received enough bytes, we don't cancel the connection.\r\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\r\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\r\nconst MESSAGE_TYPE = 't';\r\nconst MESSAGE_DATA = 'd';\r\nconst CONTROL_SHUTDOWN = 's';\r\nconst CONTROL_RESET = 'r';\r\nconst CONTROL_ERROR = 'e';\r\nconst CONTROL_PONG = 'o';\r\nconst SWITCH_ACK = 'a';\r\nconst END_TRANSMISSION = 'n';\r\nconst PING = 'p';\r\nconst SERVER_HELLO = 'h';\r\n/**\r\n * Creates a new real-time connection to the server using whichever method works\r\n * best in the current browser.\r\n */\r\nclass Connection {\r\n    /**\r\n     * @param id - an id for this connection\r\n     * @param repoInfo_ - the info for the endpoint to connect to\r\n     * @param applicationId_ - the Firebase App ID for this project\r\n     * @param appCheckToken_ - The App Check Token for this device.\r\n     * @param authToken_ - The auth token for this session.\r\n     * @param onMessage_ - the callback to be triggered when a server-push message arrives\r\n     * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\r\n     * @param onDisconnect_ - the callback to be triggered when a connection was lost\r\n     * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\r\n     * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\r\n     */\r\n    constructor(id, repoInfo_, applicationId_, appCheckToken_, authToken_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {\r\n        this.id = id;\r\n        this.repoInfo_ = repoInfo_;\r\n        this.applicationId_ = applicationId_;\r\n        this.appCheckToken_ = appCheckToken_;\r\n        this.authToken_ = authToken_;\r\n        this.onMessage_ = onMessage_;\r\n        this.onReady_ = onReady_;\r\n        this.onDisconnect_ = onDisconnect_;\r\n        this.onKill_ = onKill_;\r\n        this.lastSessionId = lastSessionId;\r\n        this.connectionCount = 0;\r\n        this.pendingDataMessages = [];\r\n        this.state_ = 0 /* RealtimeState.CONNECTING */;\r\n        this.log_ = logWrapper('c:' + this.id + ':');\r\n        this.transportManager_ = new TransportManager(repoInfo_);\r\n        this.log_('Connection created');\r\n        this.start_();\r\n    }\r\n    /**\r\n     * Starts a connection attempt\r\n     */\r\n    start_() {\r\n        const conn = this.transportManager_.initialTransport();\r\n        this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, null, this.lastSessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\r\n        const onMessageReceived = this.connReceiver_(this.conn_);\r\n        const onConnectionLost = this.disconnReceiver_(this.conn_);\r\n        this.tx_ = this.conn_;\r\n        this.rx_ = this.conn_;\r\n        this.secondaryConn_ = null;\r\n        this.isHealthy_ = false;\r\n        /*\r\n         * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\r\n         * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\r\n         * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\r\n         * still have the context of your originating frame.\r\n         */\r\n        setTimeout(() => {\r\n            // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\r\n            this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\r\n        }, Math.floor(0));\r\n        const healthyTimeoutMS = conn['healthyTimeout'] || 0;\r\n        if (healthyTimeoutMS > 0) {\r\n            this.healthyTimeout_ = setTimeoutNonBlocking(() => {\r\n                this.healthyTimeout_ = null;\r\n                if (!this.isHealthy_) {\r\n                    if (this.conn_ &&\r\n                        this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {\r\n                        this.log_('Connection exceeded healthy timeout but has received ' +\r\n                            this.conn_.bytesReceived +\r\n                            ' bytes.  Marking connection healthy.');\r\n                        this.isHealthy_ = true;\r\n                        this.conn_.markConnectionHealthy();\r\n                    }\r\n                    else if (this.conn_ &&\r\n                        this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {\r\n                        this.log_('Connection exceeded healthy timeout but has sent ' +\r\n                            this.conn_.bytesSent +\r\n                            ' bytes.  Leaving connection alive.');\r\n                        // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\r\n                        // the server.\r\n                    }\r\n                    else {\r\n                        this.log_('Closing unhealthy connection after timeout.');\r\n                        this.close();\r\n                    }\r\n                }\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            }, Math.floor(healthyTimeoutMS));\r\n        }\r\n    }\r\n    nextTransportId_() {\r\n        return 'c:' + this.id + ':' + this.connectionCount++;\r\n    }\r\n    disconnReceiver_(conn) {\r\n        return everConnected => {\r\n            if (conn === this.conn_) {\r\n                this.onConnectionLost_(everConnected);\r\n            }\r\n            else if (conn === this.secondaryConn_) {\r\n                this.log_('Secondary connection lost.');\r\n                this.onSecondaryConnectionLost_();\r\n            }\r\n            else {\r\n                this.log_('closing an old connection');\r\n            }\r\n        };\r\n    }\r\n    connReceiver_(conn) {\r\n        return (message) => {\r\n            if (this.state_ !== 2 /* RealtimeState.DISCONNECTED */) {\r\n                if (conn === this.rx_) {\r\n                    this.onPrimaryMessageReceived_(message);\r\n                }\r\n                else if (conn === this.secondaryConn_) {\r\n                    this.onSecondaryMessageReceived_(message);\r\n                }\r\n                else {\r\n                    this.log_('message on old connection');\r\n                }\r\n            }\r\n        };\r\n    }\r\n    /**\r\n     * @param dataMsg - An arbitrary data message to be sent to the server\r\n     */\r\n    sendRequest(dataMsg) {\r\n        // wrap in a data message envelope and send it on\r\n        const msg = { t: 'd', d: dataMsg };\r\n        this.sendData_(msg);\r\n    }\r\n    tryCleanupConnection() {\r\n        if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\r\n            this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);\r\n            this.conn_ = this.secondaryConn_;\r\n            this.secondaryConn_ = null;\r\n            // the server will shutdown the old connection\r\n        }\r\n    }\r\n    onSecondaryControl_(controlData) {\r\n        if (MESSAGE_TYPE in controlData) {\r\n            const cmd = controlData[MESSAGE_TYPE];\r\n            if (cmd === SWITCH_ACK) {\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // Most likely the session wasn't valid. Abandon the switch attempt\r\n                this.log_('Got a reset on secondary, closing it');\r\n                this.secondaryConn_.close();\r\n                // If we were already using this connection for something, than we need to fully close\r\n                if (this.tx_ === this.secondaryConn_ ||\r\n                    this.rx_ === this.secondaryConn_) {\r\n                    this.close();\r\n                }\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on secondary.');\r\n                this.secondaryResponsesRequired_--;\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n        }\r\n    }\r\n    onSecondaryMessageReceived_(parsedData) {\r\n        const layer = requireKey('t', parsedData);\r\n        const data = requireKey('d', parsedData);\r\n        if (layer === 'c') {\r\n            this.onSecondaryControl_(data);\r\n        }\r\n        else if (layer === 'd') {\r\n            // got a data message, but we're still second connection. Need to buffer it up\r\n            this.pendingDataMessages.push(data);\r\n        }\r\n        else {\r\n            throw new Error('Unknown protocol layer: ' + layer);\r\n        }\r\n    }\r\n    upgradeIfSecondaryHealthy_() {\r\n        if (this.secondaryResponsesRequired_ <= 0) {\r\n            this.log_('Secondary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n            this.secondaryConn_.markConnectionHealthy();\r\n            this.proceedWithUpgrade_();\r\n        }\r\n        else {\r\n            // Send a ping to make sure the connection is healthy.\r\n            this.log_('sending ping on secondary.');\r\n            this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    }\r\n    proceedWithUpgrade_() {\r\n        // tell this connection to consider itself open\r\n        this.secondaryConn_.start();\r\n        // send ack\r\n        this.log_('sending client ack on secondary');\r\n        this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\r\n        // send end packet on primary transport, switch to sending on this one\r\n        // can receive on this one, buffer responses until end received on primary transport\r\n        this.log_('Ending transmission on primary');\r\n        this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\r\n        this.tx_ = this.secondaryConn_;\r\n        this.tryCleanupConnection();\r\n    }\r\n    onPrimaryMessageReceived_(parsedData) {\r\n        // Must refer to parsedData properties in quotes, so closure doesn't touch them.\r\n        const layer = requireKey('t', parsedData);\r\n        const data = requireKey('d', parsedData);\r\n        if (layer === 'c') {\r\n            this.onControl_(data);\r\n        }\r\n        else if (layer === 'd') {\r\n            this.onDataMessage_(data);\r\n        }\r\n    }\r\n    onDataMessage_(message) {\r\n        this.onPrimaryResponse_();\r\n        // We don't do anything with data messages, just kick them up a level\r\n        this.onMessage_(message);\r\n    }\r\n    onPrimaryResponse_() {\r\n        if (!this.isHealthy_) {\r\n            this.primaryResponsesRequired_--;\r\n            if (this.primaryResponsesRequired_ <= 0) {\r\n                this.log_('Primary connection is healthy.');\r\n                this.isHealthy_ = true;\r\n                this.conn_.markConnectionHealthy();\r\n            }\r\n        }\r\n    }\r\n    onControl_(controlData) {\r\n        const cmd = requireKey(MESSAGE_TYPE, controlData);\r\n        if (MESSAGE_DATA in controlData) {\r\n            const payload = controlData[MESSAGE_DATA];\r\n            if (cmd === SERVER_HELLO) {\r\n                const handshakePayload = Object.assign({}, payload);\r\n                if (this.repoInfo_.isUsingEmulator) {\r\n                    // Upon connecting, the emulator will pass the hostname that it's aware of, but we prefer the user's set hostname via `connectDatabaseEmulator` over what the emulator passes.\r\n                    handshakePayload.h = this.repoInfo_.host;\r\n                }\r\n                this.onHandshake_(handshakePayload);\r\n            }\r\n            else if (cmd === END_TRANSMISSION) {\r\n                this.log_('recvd end transmission on primary');\r\n                this.rx_ = this.secondaryConn_;\r\n                for (let i = 0; i < this.pendingDataMessages.length; ++i) {\r\n                    this.onDataMessage_(this.pendingDataMessages[i]);\r\n                }\r\n                this.pendingDataMessages = [];\r\n                this.tryCleanupConnection();\r\n            }\r\n            else if (cmd === CONTROL_SHUTDOWN) {\r\n                // This was previously the 'onKill' callback passed to the lower-level connection\r\n                // payload in this case is the reason for the shutdown. Generally a human-readable error\r\n                this.onConnectionShutdown_(payload);\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // payload in this case is the host we should contact\r\n                this.onReset_(payload);\r\n            }\r\n            else if (cmd === CONTROL_ERROR) {\r\n                error('Server Error: ' + payload);\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on primary.');\r\n                this.onPrimaryResponse_();\r\n                this.sendPingOnPrimaryIfNecessary_();\r\n            }\r\n            else {\r\n                error('Unknown control packet command: ' + cmd);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @param handshake - The handshake data returned from the server\r\n     */\r\n    onHandshake_(handshake) {\r\n        const timestamp = handshake.ts;\r\n        const version = handshake.v;\r\n        const host = handshake.h;\r\n        this.sessionId = handshake.s;\r\n        this.repoInfo_.host = host;\r\n        // if we've already closed the connection, then don't bother trying to progress further\r\n        if (this.state_ === 0 /* RealtimeState.CONNECTING */) {\r\n            this.conn_.start();\r\n            this.onConnectionEstablished_(this.conn_, timestamp);\r\n            if (PROTOCOL_VERSION !== version) {\r\n                warn('Protocol version mismatch detected');\r\n            }\r\n            // TODO: do we want to upgrade? when? maybe a delay?\r\n            this.tryStartUpgrade_();\r\n        }\r\n    }\r\n    tryStartUpgrade_() {\r\n        const conn = this.transportManager_.upgradeTransport();\r\n        if (conn) {\r\n            this.startUpgrade_(conn);\r\n        }\r\n    }\r\n    startUpgrade_(conn) {\r\n        this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, this.sessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.secondaryResponsesRequired_ =\r\n            conn['responsesRequiredToBeHealthy'] || 0;\r\n        const onMessage = this.connReceiver_(this.secondaryConn_);\r\n        const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\r\n        this.secondaryConn_.open(onMessage, onDisconnect);\r\n        // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\r\n        setTimeoutNonBlocking(() => {\r\n            if (this.secondaryConn_) {\r\n                this.log_('Timed out trying to upgrade.');\r\n                this.secondaryConn_.close();\r\n            }\r\n        }, Math.floor(UPGRADE_TIMEOUT));\r\n    }\r\n    onReset_(host) {\r\n        this.log_('Reset packet received.  New host: ' + host);\r\n        this.repoInfo_.host = host;\r\n        // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\r\n        // We don't currently support resets after the connection has already been established\r\n        if (this.state_ === 1 /* RealtimeState.CONNECTED */) {\r\n            this.close();\r\n        }\r\n        else {\r\n            // Close whatever connections we have open and start again.\r\n            this.closeConnections_();\r\n            this.start_();\r\n        }\r\n    }\r\n    onConnectionEstablished_(conn, timestamp) {\r\n        this.log_('Realtime connection established.');\r\n        this.conn_ = conn;\r\n        this.state_ = 1 /* RealtimeState.CONNECTED */;\r\n        if (this.onReady_) {\r\n            this.onReady_(timestamp, this.sessionId);\r\n            this.onReady_ = null;\r\n        }\r\n        // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\r\n        // send some pings.\r\n        if (this.primaryResponsesRequired_ === 0) {\r\n            this.log_('Primary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n        }\r\n        else {\r\n            setTimeoutNonBlocking(() => {\r\n                this.sendPingOnPrimaryIfNecessary_();\r\n            }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\r\n        }\r\n    }\r\n    sendPingOnPrimaryIfNecessary_() {\r\n        // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\r\n        if (!this.isHealthy_ && this.state_ === 1 /* RealtimeState.CONNECTED */) {\r\n            this.log_('sending ping on primary.');\r\n            this.sendData_({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    }\r\n    onSecondaryConnectionLost_() {\r\n        const conn = this.secondaryConn_;\r\n        this.secondaryConn_ = null;\r\n        if (this.tx_ === conn || this.rx_ === conn) {\r\n            // we are relying on this connection already in some capacity. Therefore, a failure is real\r\n            this.close();\r\n        }\r\n    }\r\n    /**\r\n     * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\r\n     * we should flush the host cache\r\n     */\r\n    onConnectionLost_(everConnected) {\r\n        this.conn_ = null;\r\n        // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\r\n        // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\r\n        if (!everConnected && this.state_ === 0 /* RealtimeState.CONNECTING */) {\r\n            this.log_('Realtime connection failed.');\r\n            // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\r\n            if (this.repoInfo_.isCacheableHost()) {\r\n                PersistentStorage.remove('host:' + this.repoInfo_.host);\r\n                // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\r\n                this.repoInfo_.internalHost = this.repoInfo_.host;\r\n            }\r\n        }\r\n        else if (this.state_ === 1 /* RealtimeState.CONNECTED */) {\r\n            this.log_('Realtime connection lost.');\r\n        }\r\n        this.close();\r\n    }\r\n    onConnectionShutdown_(reason) {\r\n        this.log_('Connection shutdown command received. Shutting down...');\r\n        if (this.onKill_) {\r\n            this.onKill_(reason);\r\n            this.onKill_ = null;\r\n        }\r\n        // We intentionally don't want to fire onDisconnect (kill is a different case),\r\n        // so clear the callback.\r\n        this.onDisconnect_ = null;\r\n        this.close();\r\n    }\r\n    sendData_(data) {\r\n        if (this.state_ !== 1 /* RealtimeState.CONNECTED */) {\r\n            throw 'Connection is not connected';\r\n        }\r\n        else {\r\n            this.tx_.send(data);\r\n        }\r\n    }\r\n    /**\r\n     * Cleans up this connection, calling the appropriate callbacks\r\n     */\r\n    close() {\r\n        if (this.state_ !== 2 /* RealtimeState.DISCONNECTED */) {\r\n            this.log_('Closing realtime connection.');\r\n            this.state_ = 2 /* RealtimeState.DISCONNECTED */;\r\n            this.closeConnections_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_();\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    }\r\n    closeConnections_() {\r\n        this.log_('Shutting down all connections');\r\n        if (this.conn_) {\r\n            this.conn_.close();\r\n            this.conn_ = null;\r\n        }\r\n        if (this.secondaryConn_) {\r\n            this.secondaryConn_.close();\r\n            this.secondaryConn_ = null;\r\n        }\r\n        if (this.healthyTimeout_) {\r\n            clearTimeout(this.healthyTimeout_);\r\n            this.healthyTimeout_ = null;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Interface defining the set of actions that can be performed against the Firebase server\r\n * (basically corresponds to our wire protocol).\r\n *\r\n * @interface\r\n */\r\nclass ServerActions {\r\n    put(pathString, data, onComplete, hash) { }\r\n    merge(pathString, data, onComplete, hash) { }\r\n    /**\r\n     * Refreshes the auth token for the current connection.\r\n     * @param token - The authentication token\r\n     */\r\n    refreshAuthToken(token) { }\r\n    /**\r\n     * Refreshes the app check token for the current connection.\r\n     * @param token The app check token\r\n     */\r\n    refreshAppCheckToken(token) { }\r\n    onDisconnectPut(pathString, data, onComplete) { }\r\n    onDisconnectMerge(pathString, data, onComplete) { }\r\n    onDisconnectCancel(pathString, onComplete) { }\r\n    reportStats(stats) { }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Base class to be used if you want to emit events. Call the constructor with\r\n * the set of allowed event names.\r\n */\r\nclass EventEmitter {\r\n    constructor(allowedEvents_) {\r\n        this.allowedEvents_ = allowedEvents_;\r\n        this.listeners_ = {};\r\n        assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');\r\n    }\r\n    /**\r\n     * To be called by derived classes to trigger events.\r\n     */\r\n    trigger(eventType, ...varArgs) {\r\n        if (Array.isArray(this.listeners_[eventType])) {\r\n            // Clone the list, since callbacks could add/remove listeners.\r\n            const listeners = [...this.listeners_[eventType]];\r\n            for (let i = 0; i < listeners.length; i++) {\r\n                listeners[i].callback.apply(listeners[i].context, varArgs);\r\n            }\r\n        }\r\n    }\r\n    on(eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        this.listeners_[eventType] = this.listeners_[eventType] || [];\r\n        this.listeners_[eventType].push({ callback, context });\r\n        const eventData = this.getInitialEvent(eventType);\r\n        if (eventData) {\r\n            callback.apply(context, eventData);\r\n        }\r\n    }\r\n    off(eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        const listeners = this.listeners_[eventType] || [];\r\n        for (let i = 0; i < listeners.length; i++) {\r\n            if (listeners[i].callback === callback &&\r\n                (!context || context === listeners[i].context)) {\r\n                listeners.splice(i, 1);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    validateEventType_(eventType) {\r\n        assert(this.allowedEvents_.find(et => {\r\n            return et === eventType;\r\n        }), 'Unknown event: ' + eventType);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Monitors online state (as reported by window.online/offline events).\r\n *\r\n * The expectation is that this could have many false positives (thinks we are online\r\n * when we're not), but no false negatives.  So we can safely use it to determine when\r\n * we definitely cannot reach the internet.\r\n */\r\nclass OnlineMonitor extends EventEmitter {\r\n    constructor() {\r\n        super(['online']);\r\n        this.online_ = true;\r\n        // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\r\n        // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\r\n        // It would seem that the 'online' event does not always fire consistently. So we disable it\r\n        // for Cordova.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window.addEventListener !== 'undefined' &&\r\n            !isMobileCordova()) {\r\n            window.addEventListener('online', () => {\r\n                if (!this.online_) {\r\n                    this.online_ = true;\r\n                    this.trigger('online', true);\r\n                }\r\n            }, false);\r\n            window.addEventListener('offline', () => {\r\n                if (this.online_) {\r\n                    this.online_ = false;\r\n                    this.trigger('online', false);\r\n                }\r\n            }, false);\r\n        }\r\n    }\r\n    static getInstance() {\r\n        return new OnlineMonitor();\r\n    }\r\n    getInitialEvent(eventType) {\r\n        assert(eventType === 'online', 'Unknown event type: ' + eventType);\r\n        return [this.online_];\r\n    }\r\n    currentlyOnline() {\r\n        return this.online_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Maximum key depth. */\r\nconst MAX_PATH_DEPTH = 32;\r\n/** Maximum number of (UTF8) bytes in a Firebase path. */\r\nconst MAX_PATH_LENGTH_BYTES = 768;\r\n/**\r\n * An immutable object representing a parsed path.  It's immutable so that you\r\n * can pass them around to other functions without worrying about them changing\r\n * it.\r\n */\r\nclass Path {\r\n    /**\r\n     * @param pathOrString - Path string to parse, or another path, or the raw\r\n     * tokens array\r\n     */\r\n    constructor(pathOrString, pieceNum) {\r\n        if (pieceNum === void 0) {\r\n            this.pieces_ = pathOrString.split('/');\r\n            // Remove empty pieces.\r\n            let copyTo = 0;\r\n            for (let i = 0; i < this.pieces_.length; i++) {\r\n                if (this.pieces_[i].length > 0) {\r\n                    this.pieces_[copyTo] = this.pieces_[i];\r\n                    copyTo++;\r\n                }\r\n            }\r\n            this.pieces_.length = copyTo;\r\n            this.pieceNum_ = 0;\r\n        }\r\n        else {\r\n            this.pieces_ = pathOrString;\r\n            this.pieceNum_ = pieceNum;\r\n        }\r\n    }\r\n    toString() {\r\n        let pathString = '';\r\n        for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\r\n            if (this.pieces_[i] !== '') {\r\n                pathString += '/' + this.pieces_[i];\r\n            }\r\n        }\r\n        return pathString || '/';\r\n    }\r\n}\r\nfunction newEmptyPath() {\r\n    return new Path('');\r\n}\r\nfunction pathGetFront(path) {\r\n    if (path.pieceNum_ >= path.pieces_.length) {\r\n        return null;\r\n    }\r\n    return path.pieces_[path.pieceNum_];\r\n}\r\n/**\r\n * @returns The number of segments in this path\r\n */\r\nfunction pathGetLength(path) {\r\n    return path.pieces_.length - path.pieceNum_;\r\n}\r\nfunction pathPopFront(path) {\r\n    let pieceNum = path.pieceNum_;\r\n    if (pieceNum < path.pieces_.length) {\r\n        pieceNum++;\r\n    }\r\n    return new Path(path.pieces_, pieceNum);\r\n}\r\nfunction pathGetBack(path) {\r\n    if (path.pieceNum_ < path.pieces_.length) {\r\n        return path.pieces_[path.pieces_.length - 1];\r\n    }\r\n    return null;\r\n}\r\nfunction pathToUrlEncodedString(path) {\r\n    let pathString = '';\r\n    for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\r\n        if (path.pieces_[i] !== '') {\r\n            pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\r\n        }\r\n    }\r\n    return pathString || '/';\r\n}\r\n/**\r\n * Shallow copy of the parts of the path.\r\n *\r\n */\r\nfunction pathSlice(path, begin = 0) {\r\n    return path.pieces_.slice(path.pieceNum_ + begin);\r\n}\r\nfunction pathParent(path) {\r\n    if (path.pieceNum_ >= path.pieces_.length) {\r\n        return null;\r\n    }\r\n    const pieces = [];\r\n    for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\r\n        pieces.push(path.pieces_[i]);\r\n    }\r\n    return new Path(pieces, 0);\r\n}\r\nfunction pathChild(path, childPathObj) {\r\n    const pieces = [];\r\n    for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\r\n        pieces.push(path.pieces_[i]);\r\n    }\r\n    if (childPathObj instanceof Path) {\r\n        for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\r\n            pieces.push(childPathObj.pieces_[i]);\r\n        }\r\n    }\r\n    else {\r\n        const childPieces = childPathObj.split('/');\r\n        for (let i = 0; i < childPieces.length; i++) {\r\n            if (childPieces[i].length > 0) {\r\n                pieces.push(childPieces[i]);\r\n            }\r\n        }\r\n    }\r\n    return new Path(pieces, 0);\r\n}\r\n/**\r\n * @returns True if there are no segments in this path\r\n */\r\nfunction pathIsEmpty(path) {\r\n    return path.pieceNum_ >= path.pieces_.length;\r\n}\r\n/**\r\n * @returns The path from outerPath to innerPath\r\n */\r\nfunction newRelativePath(outerPath, innerPath) {\r\n    const outer = pathGetFront(outerPath), inner = pathGetFront(innerPath);\r\n    if (outer === null) {\r\n        return innerPath;\r\n    }\r\n    else if (outer === inner) {\r\n        return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\r\n    }\r\n    else {\r\n        throw new Error('INTERNAL ERROR: innerPath (' +\r\n            innerPath +\r\n            ') is not within ' +\r\n            'outerPath (' +\r\n            outerPath +\r\n            ')');\r\n    }\r\n}\r\n/**\r\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\r\n */\r\nfunction pathCompare(left, right) {\r\n    const leftKeys = pathSlice(left, 0);\r\n    const rightKeys = pathSlice(right, 0);\r\n    for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\r\n        const cmp = nameCompare(leftKeys[i], rightKeys[i]);\r\n        if (cmp !== 0) {\r\n            return cmp;\r\n        }\r\n    }\r\n    if (leftKeys.length === rightKeys.length) {\r\n        return 0;\r\n    }\r\n    return leftKeys.length < rightKeys.length ? -1 : 1;\r\n}\r\n/**\r\n * @returns true if paths are the same.\r\n */\r\nfunction pathEquals(path, other) {\r\n    if (pathGetLength(path) !== pathGetLength(other)) {\r\n        return false;\r\n    }\r\n    for (let i = path.pieceNum_, j = other.pieceNum_; i <= path.pieces_.length; i++, j++) {\r\n        if (path.pieces_[i] !== other.pieces_[j]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * @returns True if this path is a parent of (or the same as) other\r\n */\r\nfunction pathContains(path, other) {\r\n    let i = path.pieceNum_;\r\n    let j = other.pieceNum_;\r\n    if (pathGetLength(path) > pathGetLength(other)) {\r\n        return false;\r\n    }\r\n    while (i < path.pieces_.length) {\r\n        if (path.pieces_[i] !== other.pieces_[j]) {\r\n            return false;\r\n        }\r\n        ++i;\r\n        ++j;\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Dynamic (mutable) path used to count path lengths.\r\n *\r\n * This class is used to efficiently check paths for valid\r\n * length (in UTF8 bytes) and depth (used in path validation).\r\n *\r\n * Throws Error exception if path is ever invalid.\r\n *\r\n * The definition of a path always begins with '/'.\r\n */\r\nclass ValidationPath {\r\n    /**\r\n     * @param path - Initial Path.\r\n     * @param errorPrefix_ - Prefix for any error messages.\r\n     */\r\n    constructor(path, errorPrefix_) {\r\n        this.errorPrefix_ = errorPrefix_;\r\n        this.parts_ = pathSlice(path, 0);\r\n        /** Initialize to number of '/' chars needed in path. */\r\n        this.byteLength_ = Math.max(1, this.parts_.length);\r\n        for (let i = 0; i < this.parts_.length; i++) {\r\n            this.byteLength_ += stringLength(this.parts_[i]);\r\n        }\r\n        validationPathCheckValid(this);\r\n    }\r\n}\r\nfunction validationPathPush(validationPath, child) {\r\n    // Count the needed '/'\r\n    if (validationPath.parts_.length > 0) {\r\n        validationPath.byteLength_ += 1;\r\n    }\r\n    validationPath.parts_.push(child);\r\n    validationPath.byteLength_ += stringLength(child);\r\n    validationPathCheckValid(validationPath);\r\n}\r\nfunction validationPathPop(validationPath) {\r\n    const last = validationPath.parts_.pop();\r\n    validationPath.byteLength_ -= stringLength(last);\r\n    // Un-count the previous '/'\r\n    if (validationPath.parts_.length > 0) {\r\n        validationPath.byteLength_ -= 1;\r\n    }\r\n}\r\nfunction validationPathCheckValid(validationPath) {\r\n    if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\r\n        throw new Error(validationPath.errorPrefix_ +\r\n            'has a key path longer than ' +\r\n            MAX_PATH_LENGTH_BYTES +\r\n            ' bytes (' +\r\n            validationPath.byteLength_ +\r\n            ').');\r\n    }\r\n    if (validationPath.parts_.length > MAX_PATH_DEPTH) {\r\n        throw new Error(validationPath.errorPrefix_ +\r\n            'path specified exceeds the maximum depth that can be written (' +\r\n            MAX_PATH_DEPTH +\r\n            ') or object contains a cycle ' +\r\n            validationPathToErrorString(validationPath));\r\n    }\r\n}\r\n/**\r\n * String for use in error messages - uses '.' notation for path.\r\n */\r\nfunction validationPathToErrorString(validationPath) {\r\n    if (validationPath.parts_.length === 0) {\r\n        return '';\r\n    }\r\n    return \"in property '\" + validationPath.parts_.join('.') + \"'\";\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass VisibilityMonitor extends EventEmitter {\r\n    constructor() {\r\n        super(['visible']);\r\n        let hidden;\r\n        let visibilityChange;\r\n        if (typeof document !== 'undefined' &&\r\n            typeof document.addEventListener !== 'undefined') {\r\n            if (typeof document['hidden'] !== 'undefined') {\r\n                // Opera 12.10 and Firefox 18 and later support\r\n                visibilityChange = 'visibilitychange';\r\n                hidden = 'hidden';\r\n            }\r\n            else if (typeof document['mozHidden'] !== 'undefined') {\r\n                visibilityChange = 'mozvisibilitychange';\r\n                hidden = 'mozHidden';\r\n            }\r\n            else if (typeof document['msHidden'] !== 'undefined') {\r\n                visibilityChange = 'msvisibilitychange';\r\n                hidden = 'msHidden';\r\n            }\r\n            else if (typeof document['webkitHidden'] !== 'undefined') {\r\n                visibilityChange = 'webkitvisibilitychange';\r\n                hidden = 'webkitHidden';\r\n            }\r\n        }\r\n        // Initially, we always assume we are visible. This ensures that in browsers\r\n        // without page visibility support or in cases where we are never visible\r\n        // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\r\n        // reconnects\r\n        this.visible_ = true;\r\n        if (visibilityChange) {\r\n            document.addEventListener(visibilityChange, () => {\r\n                const visible = !document[hidden];\r\n                if (visible !== this.visible_) {\r\n                    this.visible_ = visible;\r\n                    this.trigger('visible', visible);\r\n                }\r\n            }, false);\r\n        }\r\n    }\r\n    static getInstance() {\r\n        return new VisibilityMonitor();\r\n    }\r\n    getInitialEvent(eventType) {\r\n        assert(eventType === 'visible', 'Unknown event type: ' + eventType);\r\n        return [this.visible_];\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst RECONNECT_MIN_DELAY = 1000;\r\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\r\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\r\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\r\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\r\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\r\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\r\nconst INVALID_TOKEN_THRESHOLD = 3;\r\n/**\r\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\r\n *\r\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\r\n * in quotes to make sure the closure compiler does not minify them.\r\n */\r\nclass PersistentConnection extends ServerActions {\r\n    /**\r\n     * @param repoInfo_ - Data about the namespace we are connecting to\r\n     * @param applicationId_ - The Firebase App ID for this project\r\n     * @param onDataUpdate_ - A callback for new data from the server\r\n     */\r\n    constructor(repoInfo_, applicationId_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, appCheckTokenProvider_, authOverride_) {\r\n        super();\r\n        this.repoInfo_ = repoInfo_;\r\n        this.applicationId_ = applicationId_;\r\n        this.onDataUpdate_ = onDataUpdate_;\r\n        this.onConnectStatus_ = onConnectStatus_;\r\n        this.onServerInfoUpdate_ = onServerInfoUpdate_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckTokenProvider_ = appCheckTokenProvider_;\r\n        this.authOverride_ = authOverride_;\r\n        // Used for diagnostic logging.\r\n        this.id = PersistentConnection.nextPersistentConnectionId_++;\r\n        this.log_ = logWrapper('p:' + this.id + ':');\r\n        this.interruptReasons_ = {};\r\n        this.listens = new Map();\r\n        this.outstandingPuts_ = [];\r\n        this.outstandingGets_ = [];\r\n        this.outstandingPutCount_ = 0;\r\n        this.outstandingGetCount_ = 0;\r\n        this.onDisconnectRequestQueue_ = [];\r\n        this.connected_ = false;\r\n        this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n        this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\r\n        this.securityDebugCallback_ = null;\r\n        this.lastSessionId = null;\r\n        this.establishConnectionTimer_ = null;\r\n        this.visible_ = false;\r\n        // Before we get connected, we keep a queue of pending messages to send.\r\n        this.requestCBHash_ = {};\r\n        this.requestNumber_ = 0;\r\n        this.realtime_ = null;\r\n        this.authToken_ = null;\r\n        this.appCheckToken_ = null;\r\n        this.forceTokenRefresh_ = false;\r\n        this.invalidAuthTokenCount_ = 0;\r\n        this.invalidAppCheckTokenCount_ = 0;\r\n        this.firstConnection_ = true;\r\n        this.lastConnectionAttemptTime_ = null;\r\n        this.lastConnectionEstablishedTime_ = null;\r\n        if (authOverride_ && !isNodeSdk()) {\r\n            throw new Error('Auth override specified in options, but not supported on non Node.js platforms');\r\n        }\r\n        VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\r\n        if (repoInfo_.host.indexOf('fblocal') === -1) {\r\n            OnlineMonitor.getInstance().on('online', this.onOnline_, this);\r\n        }\r\n    }\r\n    sendRequest(action, body, onResponse) {\r\n        const curReqNum = ++this.requestNumber_;\r\n        const msg = { r: curReqNum, a: action, b: body };\r\n        this.log_(stringify(msg));\r\n        assert(this.connected_, \"sendRequest call when we're not connected not allowed.\");\r\n        this.realtime_.sendRequest(msg);\r\n        if (onResponse) {\r\n            this.requestCBHash_[curReqNum] = onResponse;\r\n        }\r\n    }\r\n    get(query) {\r\n        this.initConnection_();\r\n        const deferred = new Deferred();\r\n        const request = {\r\n            p: query._path.toString(),\r\n            q: query._queryObject\r\n        };\r\n        const outstandingGet = {\r\n            action: 'g',\r\n            request,\r\n            onComplete: (message) => {\r\n                const payload = message['d'];\r\n                if (message['s'] === 'ok') {\r\n                    deferred.resolve(payload);\r\n                }\r\n                else {\r\n                    deferred.reject(payload);\r\n                }\r\n            }\r\n        };\r\n        this.outstandingGets_.push(outstandingGet);\r\n        this.outstandingGetCount_++;\r\n        const index = this.outstandingGets_.length - 1;\r\n        if (this.connected_) {\r\n            this.sendGet_(index);\r\n        }\r\n        return deferred.promise;\r\n    }\r\n    listen(query, currentHashFn, tag, onComplete) {\r\n        this.initConnection_();\r\n        const queryId = query._queryIdentifier;\r\n        const pathString = query._path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + queryId);\r\n        if (!this.listens.has(pathString)) {\r\n            this.listens.set(pathString, new Map());\r\n        }\r\n        assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'listen() called for non-default but complete query');\r\n        assert(!this.listens.get(pathString).has(queryId), `listen() called twice for same path/queryId.`);\r\n        const listenSpec = {\r\n            onComplete,\r\n            hashFn: currentHashFn,\r\n            query,\r\n            tag\r\n        };\r\n        this.listens.get(pathString).set(queryId, listenSpec);\r\n        if (this.connected_) {\r\n            this.sendListen_(listenSpec);\r\n        }\r\n    }\r\n    sendGet_(index) {\r\n        const get = this.outstandingGets_[index];\r\n        this.sendRequest('g', get.request, (message) => {\r\n            delete this.outstandingGets_[index];\r\n            this.outstandingGetCount_--;\r\n            if (this.outstandingGetCount_ === 0) {\r\n                this.outstandingGets_ = [];\r\n            }\r\n            if (get.onComplete) {\r\n                get.onComplete(message);\r\n            }\r\n        });\r\n    }\r\n    sendListen_(listenSpec) {\r\n        const query = listenSpec.query;\r\n        const pathString = query._path.toString();\r\n        const queryId = query._queryIdentifier;\r\n        this.log_('Listen on ' + pathString + ' for ' + queryId);\r\n        const req = { /*path*/ p: pathString };\r\n        const action = 'q';\r\n        // Only bother to send query if it's non-default.\r\n        if (listenSpec.tag) {\r\n            req['q'] = query._queryObject;\r\n            req['t'] = listenSpec.tag;\r\n        }\r\n        req[ /*hash*/'h'] = listenSpec.hashFn();\r\n        this.sendRequest(action, req, (message) => {\r\n            const payload = message[ /*data*/'d'];\r\n            const status = message[ /*status*/'s'];\r\n            // print warnings in any case...\r\n            PersistentConnection.warnOnListenWarnings_(payload, query);\r\n            const currentListenSpec = this.listens.get(pathString) &&\r\n                this.listens.get(pathString).get(queryId);\r\n            // only trigger actions if the listen hasn't been removed and readded\r\n            if (currentListenSpec === listenSpec) {\r\n                this.log_('listen response', message);\r\n                if (status !== 'ok') {\r\n                    this.removeListen_(pathString, queryId);\r\n                }\r\n                if (listenSpec.onComplete) {\r\n                    listenSpec.onComplete(status, payload);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    static warnOnListenWarnings_(payload, query) {\r\n        if (payload && typeof payload === 'object' && contains(payload, 'w')) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const warnings = safeGet(payload, 'w');\r\n            if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\r\n                const indexSpec = '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\r\n                const indexPath = query._path.toString();\r\n                warn(`Using an unspecified index. Your data will be downloaded and ` +\r\n                    `filtered on the client. Consider adding ${indexSpec} at ` +\r\n                    `${indexPath} to your security rules for better performance.`);\r\n            }\r\n        }\r\n    }\r\n    refreshAuthToken(token) {\r\n        this.authToken_ = token;\r\n        this.log_('Auth token refreshed');\r\n        if (this.authToken_) {\r\n            this.tryAuth();\r\n        }\r\n        else {\r\n            //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\r\n            //the credential so we dont become authenticated next time we connect.\r\n            if (this.connected_) {\r\n                this.sendRequest('unauth', {}, () => { });\r\n            }\r\n        }\r\n        this.reduceReconnectDelayIfAdminCredential_(token);\r\n    }\r\n    reduceReconnectDelayIfAdminCredential_(credential) {\r\n        // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\r\n        // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\r\n        const isFirebaseSecret = credential && credential.length === 40;\r\n        if (isFirebaseSecret || isAdmin(credential)) {\r\n            this.log_('Admin auth credential detected.  Reducing max reconnect time.');\r\n            this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n        }\r\n    }\r\n    refreshAppCheckToken(token) {\r\n        this.appCheckToken_ = token;\r\n        this.log_('App check token refreshed');\r\n        if (this.appCheckToken_) {\r\n            this.tryAppCheck();\r\n        }\r\n        else {\r\n            //If we're connected we want to let the server know to unauthenticate us.\r\n            //If we're not connected, simply delete the credential so we dont become\r\n            // authenticated next time we connect.\r\n            if (this.connected_) {\r\n                this.sendRequest('unappeck', {}, () => { });\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\r\n     * a auth revoked (the connection is closed).\r\n     */\r\n    tryAuth() {\r\n        if (this.connected_ && this.authToken_) {\r\n            const token = this.authToken_;\r\n            const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\r\n            const requestData = { cred: token };\r\n            if (this.authOverride_ === null) {\r\n                requestData['noauth'] = true;\r\n            }\r\n            else if (typeof this.authOverride_ === 'object') {\r\n                requestData['authvar'] = this.authOverride_;\r\n            }\r\n            this.sendRequest(authMethod, requestData, (res) => {\r\n                const status = res[ /*status*/'s'];\r\n                const data = res[ /*data*/'d'] || 'error';\r\n                if (this.authToken_ === token) {\r\n                    if (status === 'ok') {\r\n                        this.invalidAuthTokenCount_ = 0;\r\n                    }\r\n                    else {\r\n                        // Triggers reconnect and force refresh for auth token\r\n                        this.onAuthRevoked_(status, data);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Attempts to authenticate with the given token. If the authentication\r\n     * attempt fails, it's triggered like the token was revoked (the connection is\r\n     * closed).\r\n     */\r\n    tryAppCheck() {\r\n        if (this.connected_ && this.appCheckToken_) {\r\n            this.sendRequest('appcheck', { 'token': this.appCheckToken_ }, (res) => {\r\n                const status = res[ /*status*/'s'];\r\n                const data = res[ /*data*/'d'] || 'error';\r\n                if (status === 'ok') {\r\n                    this.invalidAppCheckTokenCount_ = 0;\r\n                }\r\n                else {\r\n                    this.onAppCheckRevoked_(status, data);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    unlisten(query, tag) {\r\n        const pathString = query._path.toString();\r\n        const queryId = query._queryIdentifier;\r\n        this.log_('Unlisten called for ' + pathString + ' ' + queryId);\r\n        assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'unlisten() called for non-default but complete query');\r\n        const listen = this.removeListen_(pathString, queryId);\r\n        if (listen && this.connected_) {\r\n            this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\r\n        }\r\n    }\r\n    sendUnlisten_(pathString, queryId, queryObj, tag) {\r\n        this.log_('Unlisten on ' + pathString + ' for ' + queryId);\r\n        const req = { /*path*/ p: pathString };\r\n        const action = 'n';\r\n        // Only bother sending queryId if it's non-default.\r\n        if (tag) {\r\n            req['q'] = queryObj;\r\n            req['t'] = tag;\r\n        }\r\n        this.sendRequest(action, req);\r\n    }\r\n    onDisconnectPut(pathString, data, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('o', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'o',\r\n                data,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    onDisconnectMerge(pathString, data, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('om', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'om',\r\n                data,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    onDisconnectCancel(pathString, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('oc', pathString, null, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'oc',\r\n                data: null,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    sendOnDisconnect_(action, pathString, data, onComplete) {\r\n        const request = { /*path*/ p: pathString, /*data*/ d: data };\r\n        this.log_('onDisconnect ' + action, request);\r\n        this.sendRequest(action, request, (response) => {\r\n            if (onComplete) {\r\n                setTimeout(() => {\r\n                    onComplete(response[ /*status*/'s'], response[ /* data */'d']);\r\n                }, Math.floor(0));\r\n            }\r\n        });\r\n    }\r\n    put(pathString, data, onComplete, hash) {\r\n        this.putInternal('p', pathString, data, onComplete, hash);\r\n    }\r\n    merge(pathString, data, onComplete, hash) {\r\n        this.putInternal('m', pathString, data, onComplete, hash);\r\n    }\r\n    putInternal(action, pathString, data, onComplete, hash) {\r\n        this.initConnection_();\r\n        const request = {\r\n            /*path*/ p: pathString,\r\n            /*data*/ d: data\r\n        };\r\n        if (hash !== undefined) {\r\n            request[ /*hash*/'h'] = hash;\r\n        }\r\n        // TODO: Only keep track of the most recent put for a given path?\r\n        this.outstandingPuts_.push({\r\n            action,\r\n            request,\r\n            onComplete\r\n        });\r\n        this.outstandingPutCount_++;\r\n        const index = this.outstandingPuts_.length - 1;\r\n        if (this.connected_) {\r\n            this.sendPut_(index);\r\n        }\r\n        else {\r\n            this.log_('Buffering put: ' + pathString);\r\n        }\r\n    }\r\n    sendPut_(index) {\r\n        const action = this.outstandingPuts_[index].action;\r\n        const request = this.outstandingPuts_[index].request;\r\n        const onComplete = this.outstandingPuts_[index].onComplete;\r\n        this.outstandingPuts_[index].queued = this.connected_;\r\n        this.sendRequest(action, request, (message) => {\r\n            this.log_(action + ' response', message);\r\n            delete this.outstandingPuts_[index];\r\n            this.outstandingPutCount_--;\r\n            // Clean up array occasionally.\r\n            if (this.outstandingPutCount_ === 0) {\r\n                this.outstandingPuts_ = [];\r\n            }\r\n            if (onComplete) {\r\n                onComplete(message[ /*status*/'s'], message[ /* data */'d']);\r\n            }\r\n        });\r\n    }\r\n    reportStats(stats) {\r\n        // If we're not connected, we just drop the stats.\r\n        if (this.connected_) {\r\n            const request = { /*counters*/ c: stats };\r\n            this.log_('reportStats', request);\r\n            this.sendRequest(/*stats*/ 's', request, result => {\r\n                const status = result[ /*status*/'s'];\r\n                if (status !== 'ok') {\r\n                    const errorReason = result[ /* data */'d'];\r\n                    this.log_('reportStats', 'Error sending stats: ' + errorReason);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    onDataMessage_(message) {\r\n        if ('r' in message) {\r\n            // this is a response\r\n            this.log_('from server: ' + stringify(message));\r\n            const reqNum = message['r'];\r\n            const onResponse = this.requestCBHash_[reqNum];\r\n            if (onResponse) {\r\n                delete this.requestCBHash_[reqNum];\r\n                onResponse(message[ /*body*/'b']);\r\n            }\r\n        }\r\n        else if ('error' in message) {\r\n            throw 'A server-side error has occurred: ' + message['error'];\r\n        }\r\n        else if ('a' in message) {\r\n            // a and b are action and body, respectively\r\n            this.onDataPush_(message['a'], message['b']);\r\n        }\r\n    }\r\n    onDataPush_(action, body) {\r\n        this.log_('handleServerMessage', action, body);\r\n        if (action === 'd') {\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge*/ false, body['t']);\r\n        }\r\n        else if (action === 'm') {\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge=*/ true, body['t']);\r\n        }\r\n        else if (action === 'c') {\r\n            this.onListenRevoked_(body[ /*path*/'p'], body[ /*query*/'q']);\r\n        }\r\n        else if (action === 'ac') {\r\n            this.onAuthRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\r\n        }\r\n        else if (action === 'apc') {\r\n            this.onAppCheckRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\r\n        }\r\n        else if (action === 'sd') {\r\n            this.onSecurityDebugPacket_(body);\r\n        }\r\n        else {\r\n            error('Unrecognized action received from server: ' +\r\n                stringify(action) +\r\n                '\\nAre you using the latest client?');\r\n        }\r\n    }\r\n    onReady_(timestamp, sessionId) {\r\n        this.log_('connection ready');\r\n        this.connected_ = true;\r\n        this.lastConnectionEstablishedTime_ = new Date().getTime();\r\n        this.handleTimestamp_(timestamp);\r\n        this.lastSessionId = sessionId;\r\n        if (this.firstConnection_) {\r\n            this.sendConnectStats_();\r\n        }\r\n        this.restoreState_();\r\n        this.firstConnection_ = false;\r\n        this.onConnectStatus_(true);\r\n    }\r\n    scheduleConnect_(timeout) {\r\n        assert(!this.realtime_, \"Scheduling a connect when we're already connected/ing?\");\r\n        if (this.establishConnectionTimer_) {\r\n            clearTimeout(this.establishConnectionTimer_);\r\n        }\r\n        // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\r\n        // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\r\n        this.establishConnectionTimer_ = setTimeout(() => {\r\n            this.establishConnectionTimer_ = null;\r\n            this.establishConnection_();\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(timeout));\r\n    }\r\n    initConnection_() {\r\n        if (!this.realtime_ && this.firstConnection_) {\r\n            this.scheduleConnect_(0);\r\n        }\r\n    }\r\n    onVisible_(visible) {\r\n        // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\r\n        if (visible &&\r\n            !this.visible_ &&\r\n            this.reconnectDelay_ === this.maxReconnectDelay_) {\r\n            this.log_('Window became visible.  Reducing delay.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        this.visible_ = visible;\r\n    }\r\n    onOnline_(online) {\r\n        if (online) {\r\n            this.log_('Browser went online.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        else {\r\n            this.log_('Browser went offline.  Killing connection.');\r\n            if (this.realtime_) {\r\n                this.realtime_.close();\r\n            }\r\n        }\r\n    }\r\n    onRealtimeDisconnect_() {\r\n        this.log_('data client disconnected');\r\n        this.connected_ = false;\r\n        this.realtime_ = null;\r\n        // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\r\n        this.cancelSentTransactions_();\r\n        // Clear out the pending requests.\r\n        this.requestCBHash_ = {};\r\n        if (this.shouldReconnect_()) {\r\n            if (!this.visible_) {\r\n                this.log_(\"Window isn't visible.  Delaying reconnect.\");\r\n                this.reconnectDelay_ = this.maxReconnectDelay_;\r\n                this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            }\r\n            else if (this.lastConnectionEstablishedTime_) {\r\n                // If we've been connected long enough, reset reconnect delay to minimum.\r\n                const timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;\r\n                if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\r\n                    this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n                }\r\n                this.lastConnectionEstablishedTime_ = null;\r\n            }\r\n            const timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;\r\n            let reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);\r\n            reconnectDelay = Math.random() * reconnectDelay;\r\n            this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\r\n            this.scheduleConnect_(reconnectDelay);\r\n            // Adjust reconnect delay for next time.\r\n            this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);\r\n        }\r\n        this.onConnectStatus_(false);\r\n    }\r\n    async establishConnection_() {\r\n        if (this.shouldReconnect_()) {\r\n            this.log_('Making a connection attempt');\r\n            this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            this.lastConnectionEstablishedTime_ = null;\r\n            const onDataMessage = this.onDataMessage_.bind(this);\r\n            const onReady = this.onReady_.bind(this);\r\n            const onDisconnect = this.onRealtimeDisconnect_.bind(this);\r\n            const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\r\n            const lastSessionId = this.lastSessionId;\r\n            let canceled = false;\r\n            let connection = null;\r\n            const closeFn = function () {\r\n                if (connection) {\r\n                    connection.close();\r\n                }\r\n                else {\r\n                    canceled = true;\r\n                    onDisconnect();\r\n                }\r\n            };\r\n            const sendRequestFn = function (msg) {\r\n                assert(connection, \"sendRequest call when we're not connected not allowed.\");\r\n                connection.sendRequest(msg);\r\n            };\r\n            this.realtime_ = {\r\n                close: closeFn,\r\n                sendRequest: sendRequestFn\r\n            };\r\n            const forceRefresh = this.forceTokenRefresh_;\r\n            this.forceTokenRefresh_ = false;\r\n            try {\r\n                // First fetch auth and app check token, and establish connection after\r\n                // fetching the token was successful\r\n                const [authToken, appCheckToken] = await Promise.all([\r\n                    this.authTokenProvider_.getToken(forceRefresh),\r\n                    this.appCheckTokenProvider_.getToken(forceRefresh)\r\n                ]);\r\n                if (!canceled) {\r\n                    log('getToken() completed. Creating connection.');\r\n                    this.authToken_ = authToken && authToken.accessToken;\r\n                    this.appCheckToken_ = appCheckToken && appCheckToken.token;\r\n                    connection = new Connection(connId, this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, onDataMessage, onReady, onDisconnect, \r\n                    /* onKill= */ reason => {\r\n                        warn(reason + ' (' + this.repoInfo_.toString() + ')');\r\n                        this.interrupt(SERVER_KILL_INTERRUPT_REASON);\r\n                    }, lastSessionId);\r\n                }\r\n                else {\r\n                    log('getToken() completed but was canceled');\r\n                }\r\n            }\r\n            catch (error) {\r\n                this.log_('Failed to get token: ' + error);\r\n                if (!canceled) {\r\n                    if (this.repoInfo_.nodeAdmin) {\r\n                        // This may be a critical error for the Admin Node.js SDK, so log a warning.\r\n                        // But getToken() may also just have temporarily failed, so we still want to\r\n                        // continue retrying.\r\n                        warn(error);\r\n                    }\r\n                    closeFn();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    interrupt(reason) {\r\n        log('Interrupting connection for reason: ' + reason);\r\n        this.interruptReasons_[reason] = true;\r\n        if (this.realtime_) {\r\n            this.realtime_.close();\r\n        }\r\n        else {\r\n            if (this.establishConnectionTimer_) {\r\n                clearTimeout(this.establishConnectionTimer_);\r\n                this.establishConnectionTimer_ = null;\r\n            }\r\n            if (this.connected_) {\r\n                this.onRealtimeDisconnect_();\r\n            }\r\n        }\r\n    }\r\n    resume(reason) {\r\n        log('Resuming connection for reason: ' + reason);\r\n        delete this.interruptReasons_[reason];\r\n        if (isEmpty(this.interruptReasons_)) {\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n    }\r\n    handleTimestamp_(timestamp) {\r\n        const delta = timestamp - new Date().getTime();\r\n        this.onServerInfoUpdate_({ serverTimeOffset: delta });\r\n    }\r\n    cancelSentTransactions_() {\r\n        for (let i = 0; i < this.outstandingPuts_.length; i++) {\r\n            const put = this.outstandingPuts_[i];\r\n            if (put && /*hash*/ 'h' in put.request && put.queued) {\r\n                if (put.onComplete) {\r\n                    put.onComplete('disconnect');\r\n                }\r\n                delete this.outstandingPuts_[i];\r\n                this.outstandingPutCount_--;\r\n            }\r\n        }\r\n        // Clean up array occasionally.\r\n        if (this.outstandingPutCount_ === 0) {\r\n            this.outstandingPuts_ = [];\r\n        }\r\n    }\r\n    onListenRevoked_(pathString, query) {\r\n        // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\r\n        let queryId;\r\n        if (!query) {\r\n            queryId = 'default';\r\n        }\r\n        else {\r\n            queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\r\n        }\r\n        const listen = this.removeListen_(pathString, queryId);\r\n        if (listen && listen.onComplete) {\r\n            listen.onComplete('permission_denied');\r\n        }\r\n    }\r\n    removeListen_(pathString, queryId) {\r\n        const normalizedPathString = new Path(pathString).toString(); // normalize path.\r\n        let listen;\r\n        if (this.listens.has(normalizedPathString)) {\r\n            const map = this.listens.get(normalizedPathString);\r\n            listen = map.get(queryId);\r\n            map.delete(queryId);\r\n            if (map.size === 0) {\r\n                this.listens.delete(normalizedPathString);\r\n            }\r\n        }\r\n        else {\r\n            // all listens for this path has already been removed\r\n            listen = undefined;\r\n        }\r\n        return listen;\r\n    }\r\n    onAuthRevoked_(statusCode, explanation) {\r\n        log('Auth token revoked: ' + statusCode + '/' + explanation);\r\n        this.authToken_ = null;\r\n        this.forceTokenRefresh_ = true;\r\n        this.realtime_.close();\r\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\r\n            // We'll wait a couple times before logging the warning / increasing the\r\n            // retry period since oauth tokens will report as \"invalid\" if they're\r\n            // just expired. Plus there may be transient issues that resolve themselves.\r\n            this.invalidAuthTokenCount_++;\r\n            if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\r\n                // Set a long reconnect delay because recovery is unlikely\r\n                this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n                // Notify the auth token provider that the token is invalid, which will log\r\n                // a warning\r\n                this.authTokenProvider_.notifyForInvalidToken();\r\n            }\r\n        }\r\n    }\r\n    onAppCheckRevoked_(statusCode, explanation) {\r\n        log('App check token revoked: ' + statusCode + '/' + explanation);\r\n        this.appCheckToken_ = null;\r\n        this.forceTokenRefresh_ = true;\r\n        // Note: We don't close the connection as the developer may not have\r\n        // enforcement enabled. The backend closes connections with enforcements.\r\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\r\n            // We'll wait a couple times before logging the warning / increasing the\r\n            // retry period since oauth tokens will report as \"invalid\" if they're\r\n            // just expired. Plus there may be transient issues that resolve themselves.\r\n            this.invalidAppCheckTokenCount_++;\r\n            if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\r\n                this.appCheckTokenProvider_.notifyForInvalidToken();\r\n            }\r\n        }\r\n    }\r\n    onSecurityDebugPacket_(body) {\r\n        if (this.securityDebugCallback_) {\r\n            this.securityDebugCallback_(body);\r\n        }\r\n        else {\r\n            if ('msg' in body) {\r\n                console.log('FIREBASE: ' + body['msg'].replace('\\n', '\\nFIREBASE: '));\r\n            }\r\n        }\r\n    }\r\n    restoreState_() {\r\n        //Re-authenticate ourselves if we have a credential stored.\r\n        this.tryAuth();\r\n        this.tryAppCheck();\r\n        // Puts depend on having received the corresponding data update from the server before they complete, so we must\r\n        // make sure to send listens before puts.\r\n        for (const queries of this.listens.values()) {\r\n            for (const listenSpec of queries.values()) {\r\n                this.sendListen_(listenSpec);\r\n            }\r\n        }\r\n        for (let i = 0; i < this.outstandingPuts_.length; i++) {\r\n            if (this.outstandingPuts_[i]) {\r\n                this.sendPut_(i);\r\n            }\r\n        }\r\n        while (this.onDisconnectRequestQueue_.length) {\r\n            const request = this.onDisconnectRequestQueue_.shift();\r\n            this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);\r\n        }\r\n        for (let i = 0; i < this.outstandingGets_.length; i++) {\r\n            if (this.outstandingGets_[i]) {\r\n                this.sendGet_(i);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Sends client stats for first connection\r\n     */\r\n    sendConnectStats_() {\r\n        const stats = {};\r\n        let clientName = 'js';\r\n        if (isNodeSdk()) {\r\n            if (this.repoInfo_.nodeAdmin) {\r\n                clientName = 'admin_node';\r\n            }\r\n            else {\r\n                clientName = 'node';\r\n            }\r\n        }\r\n        stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\r\n        if (isMobileCordova()) {\r\n            stats['framework.cordova'] = 1;\r\n        }\r\n        else if (isReactNative()) {\r\n            stats['framework.reactnative'] = 1;\r\n        }\r\n        this.reportStats(stats);\r\n    }\r\n    shouldReconnect_() {\r\n        const online = OnlineMonitor.getInstance().currentlyOnline();\r\n        return isEmpty(this.interruptReasons_) && online;\r\n    }\r\n}\r\nPersistentConnection.nextPersistentConnectionId_ = 0;\r\n/**\r\n * Counter for number of connections created. Mainly used for tagging in the logs\r\n */\r\nPersistentConnection.nextConnectionId_ = 0;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass NamedNode {\r\n    constructor(name, node) {\r\n        this.name = name;\r\n        this.node = node;\r\n    }\r\n    static Wrap(name, node) {\r\n        return new NamedNode(name, node);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Index {\r\n    /**\r\n     * @returns A standalone comparison function for\r\n     * this index\r\n     */\r\n    getCompare() {\r\n        return this.compare.bind(this);\r\n    }\r\n    /**\r\n     * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\r\n     * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\r\n     *\r\n     *\r\n     * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\r\n     */\r\n    indexedValueChanged(oldNode, newNode) {\r\n        const oldWrapped = new NamedNode(MIN_NAME, oldNode);\r\n        const newWrapped = new NamedNode(MIN_NAME, newNode);\r\n        return this.compare(oldWrapped, newWrapped) !== 0;\r\n    }\r\n    /**\r\n     * @returns a node wrapper that will sort equal to or less than\r\n     * any other node wrapper, using this index\r\n     */\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet __EMPTY_NODE;\r\nclass KeyIndex extends Index {\r\n    static get __EMPTY_NODE() {\r\n        return __EMPTY_NODE;\r\n    }\r\n    static set __EMPTY_NODE(val) {\r\n        __EMPTY_NODE = val;\r\n    }\r\n    compare(a, b) {\r\n        return nameCompare(a.name, b.name);\r\n    }\r\n    isDefinedOn(node) {\r\n        // We could probably return true here (since every node has a key), but it's never called\r\n        // so just leaving unimplemented for now.\r\n        throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return false; // The key for a node never changes.\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        // TODO: This should really be created once and cached in a static property, but\r\n        // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\r\n        return new NamedNode(MAX_NAME, __EMPTY_NODE);\r\n    }\r\n    makePost(indexValue, name) {\r\n        assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');\r\n        // We just use empty node, but it'll never be compared, since our comparator only looks at name.\r\n        return new NamedNode(indexValue, __EMPTY_NODE);\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.key';\r\n    }\r\n}\r\nconst KEY_INDEX = new KeyIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An iterator over an LLRBNode.\r\n */\r\nclass SortedMapIterator {\r\n    /**\r\n     * @param node - Node to iterate.\r\n     * @param isReverse_ - Whether or not to iterate in reverse\r\n     */\r\n    constructor(node, startKey, comparator, isReverse_, resultGenerator_ = null) {\r\n        this.isReverse_ = isReverse_;\r\n        this.resultGenerator_ = resultGenerator_;\r\n        this.nodeStack_ = [];\r\n        let cmp = 1;\r\n        while (!node.isEmpty()) {\r\n            node = node;\r\n            cmp = startKey ? comparator(node.key, startKey) : 1;\r\n            // flip the comparison if we're going in reverse\r\n            if (isReverse_) {\r\n                cmp *= -1;\r\n            }\r\n            if (cmp < 0) {\r\n                // This node is less than our start key. ignore it\r\n                if (this.isReverse_) {\r\n                    node = node.left;\r\n                }\r\n                else {\r\n                    node = node.right;\r\n                }\r\n            }\r\n            else if (cmp === 0) {\r\n                // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\r\n                this.nodeStack_.push(node);\r\n                break;\r\n            }\r\n            else {\r\n                // This node is greater than our start key, add it to the stack and move to the next one\r\n                this.nodeStack_.push(node);\r\n                if (this.isReverse_) {\r\n                    node = node.right;\r\n                }\r\n                else {\r\n                    node = node.left;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    getNext() {\r\n        if (this.nodeStack_.length === 0) {\r\n            return null;\r\n        }\r\n        let node = this.nodeStack_.pop();\r\n        let result;\r\n        if (this.resultGenerator_) {\r\n            result = this.resultGenerator_(node.key, node.value);\r\n        }\r\n        else {\r\n            result = { key: node.key, value: node.value };\r\n        }\r\n        if (this.isReverse_) {\r\n            node = node.left;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.right;\r\n            }\r\n        }\r\n        else {\r\n            node = node.right;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.left;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    hasNext() {\r\n        return this.nodeStack_.length > 0;\r\n    }\r\n    peek() {\r\n        if (this.nodeStack_.length === 0) {\r\n            return null;\r\n        }\r\n        const node = this.nodeStack_[this.nodeStack_.length - 1];\r\n        if (this.resultGenerator_) {\r\n            return this.resultGenerator_(node.key, node.value);\r\n        }\r\n        else {\r\n            return { key: node.key, value: node.value };\r\n        }\r\n    }\r\n}\r\n/**\r\n * Represents a node in a Left-leaning Red-Black tree.\r\n */\r\nclass LLRBNode {\r\n    /**\r\n     * @param key - Key associated with this node.\r\n     * @param value - Value associated with this node.\r\n     * @param color - Whether this node is red.\r\n     * @param left - Left child.\r\n     * @param right - Right child.\r\n     */\r\n    constructor(key, value, color, left, right) {\r\n        this.key = key;\r\n        this.value = value;\r\n        this.color = color != null ? color : LLRBNode.RED;\r\n        this.left =\r\n            left != null ? left : SortedMap.EMPTY_NODE;\r\n        this.right =\r\n            right != null ? right : SortedMap.EMPTY_NODE;\r\n    }\r\n    /**\r\n     * Returns a copy of the current node, optionally replacing pieces of it.\r\n     *\r\n     * @param key - New key for the node, or null.\r\n     * @param value - New value for the node, or null.\r\n     * @param color - New color for the node, or null.\r\n     * @param left - New left child for the node, or null.\r\n     * @param right - New right child for the node, or null.\r\n     * @returns The node copy.\r\n     */\r\n    copy(key, value, color, left, right) {\r\n        return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the tree.\r\n     */\r\n    count() {\r\n        return this.left.count() + 1 + this.right.count();\r\n    }\r\n    /**\r\n     * @returns True if the tree is empty.\r\n     */\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     *   node.  If it returns true, traversal is aborted.\r\n     * @returns The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    inorderTraversal(action) {\r\n        return (this.left.inorderTraversal(action) ||\r\n            !!action(this.key, this.value) ||\r\n            this.right.inorderTraversal(action));\r\n    }\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return (this.right.reverseTraversal(action) ||\r\n            action(this.key, this.value) ||\r\n            this.left.reverseTraversal(action));\r\n    }\r\n    /**\r\n     * @returns The minimum node in the tree.\r\n     */\r\n    min_() {\r\n        if (this.left.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            return this.left.min_();\r\n        }\r\n    }\r\n    /**\r\n     * @returns The maximum key in the tree.\r\n     */\r\n    minKey() {\r\n        return this.min_().key;\r\n    }\r\n    /**\r\n     * @returns The maximum key in the tree.\r\n     */\r\n    maxKey() {\r\n        if (this.right.isEmpty()) {\r\n            return this.key;\r\n        }\r\n        else {\r\n            return this.right.maxKey();\r\n        }\r\n    }\r\n    /**\r\n     * @param key - Key to insert.\r\n     * @param value - Value to insert.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with the key/value added.\r\n     */\r\n    insert(key, value, comparator) {\r\n        let n = this;\r\n        const cmp = comparator(key, n.key);\r\n        if (cmp < 0) {\r\n            n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\r\n        }\r\n        else if (cmp === 0) {\r\n            n = n.copy(null, value, null, null, null);\r\n        }\r\n        else {\r\n            n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @returns New tree, with the minimum key removed.\r\n     */\r\n    removeMin_() {\r\n        if (this.left.isEmpty()) {\r\n            return SortedMap.EMPTY_NODE;\r\n        }\r\n        let n = this;\r\n        if (!n.left.isRed_() && !n.left.left.isRed_()) {\r\n            n = n.moveRedLeft_();\r\n        }\r\n        n = n.copy(null, null, null, n.left.removeMin_(), null);\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @param key - The key of the item to remove.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with the specified item removed.\r\n     */\r\n    remove(key, comparator) {\r\n        let n, smallest;\r\n        n = this;\r\n        if (comparator(key, n.key) < 0) {\r\n            if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\r\n                n = n.moveRedLeft_();\r\n            }\r\n            n = n.copy(null, null, null, n.left.remove(key, comparator), null);\r\n        }\r\n        else {\r\n            if (n.left.isRed_()) {\r\n                n = n.rotateRight_();\r\n            }\r\n            if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\r\n                n = n.moveRedRight_();\r\n            }\r\n            if (comparator(key, n.key) === 0) {\r\n                if (n.right.isEmpty()) {\r\n                    return SortedMap.EMPTY_NODE;\r\n                }\r\n                else {\r\n                    smallest = n.right.min_();\r\n                    n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());\r\n                }\r\n            }\r\n            n = n.copy(null, null, null, null, n.right.remove(key, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @returns Whether this is a RED node.\r\n     */\r\n    isRed_() {\r\n        return this.color;\r\n    }\r\n    /**\r\n     * @returns New tree after performing any needed rotations.\r\n     */\r\n    fixUp_() {\r\n        let n = this;\r\n        if (n.right.isRed_() && !n.left.isRed_()) {\r\n            n = n.rotateLeft_();\r\n        }\r\n        if (n.left.isRed_() && n.left.left.isRed_()) {\r\n            n = n.rotateRight_();\r\n        }\r\n        if (n.left.isRed_() && n.right.isRed_()) {\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after moveRedLeft.\r\n     */\r\n    moveRedLeft_() {\r\n        let n = this.colorFlip_();\r\n        if (n.right.left.isRed_()) {\r\n            n = n.copy(null, null, null, null, n.right.rotateRight_());\r\n            n = n.rotateLeft_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after moveRedRight.\r\n     */\r\n    moveRedRight_() {\r\n        let n = this.colorFlip_();\r\n        if (n.left.left.isRed_()) {\r\n            n = n.rotateRight_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after rotateLeft.\r\n     */\r\n    rotateLeft_() {\r\n        const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\r\n        return this.right.copy(null, null, this.color, nl, null);\r\n    }\r\n    /**\r\n     * @returns New tree, after rotateRight.\r\n     */\r\n    rotateRight_() {\r\n        const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\r\n        return this.left.copy(null, null, this.color, null, nr);\r\n    }\r\n    /**\r\n     * @returns Newt ree, after colorFlip.\r\n     */\r\n    colorFlip_() {\r\n        const left = this.left.copy(null, null, !this.left.color, null, null);\r\n        const right = this.right.copy(null, null, !this.right.color, null, null);\r\n        return this.copy(null, null, !this.color, left, right);\r\n    }\r\n    /**\r\n     * For testing.\r\n     *\r\n     * @returns True if all is well.\r\n     */\r\n    checkMaxDepth_() {\r\n        const blackDepth = this.check_();\r\n        return Math.pow(2.0, blackDepth) <= this.count() + 1;\r\n    }\r\n    check_() {\r\n        if (this.isRed_() && this.left.isRed_()) {\r\n            throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');\r\n        }\r\n        if (this.right.isRed_()) {\r\n            throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');\r\n        }\r\n        const blackDepth = this.left.check_();\r\n        if (blackDepth !== this.right.check_()) {\r\n            throw new Error('Black depths differ');\r\n        }\r\n        else {\r\n            return blackDepth + (this.isRed_() ? 0 : 1);\r\n        }\r\n    }\r\n}\r\nLLRBNode.RED = true;\r\nLLRBNode.BLACK = false;\r\n/**\r\n * Represents an empty node (a leaf node in the Red-Black Tree).\r\n */\r\nclass LLRBEmptyNode {\r\n    /**\r\n     * Returns a copy of the current node.\r\n     *\r\n     * @returns The node copy.\r\n     */\r\n    copy(key, value, color, left, right) {\r\n        return this;\r\n    }\r\n    /**\r\n     * Returns a copy of the tree, with the specified key/value added.\r\n     *\r\n     * @param key - Key to be added.\r\n     * @param value - Value to be added.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with item added.\r\n     */\r\n    insert(key, value, comparator) {\r\n        return new LLRBNode(key, value, null);\r\n    }\r\n    /**\r\n     * Returns a copy of the tree, with the specified key removed.\r\n     *\r\n     * @param key - The key to remove.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with item removed.\r\n     */\r\n    remove(key, comparator) {\r\n        return this;\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the tree.\r\n     */\r\n    count() {\r\n        return 0;\r\n    }\r\n    /**\r\n     * @returns True if the tree is empty.\r\n     */\r\n    isEmpty() {\r\n        return true;\r\n    }\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    inorderTraversal(action) {\r\n        return false;\r\n    }\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return false;\r\n    }\r\n    minKey() {\r\n        return null;\r\n    }\r\n    maxKey() {\r\n        return null;\r\n    }\r\n    check_() {\r\n        return 0;\r\n    }\r\n    /**\r\n     * @returns Whether this node is red.\r\n     */\r\n    isRed_() {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\r\n * tree.\r\n */\r\nclass SortedMap {\r\n    /**\r\n     * @param comparator_ - Key comparator.\r\n     * @param root_ - Optional root node for the map.\r\n     */\r\n    constructor(comparator_, root_ = SortedMap.EMPTY_NODE) {\r\n        this.comparator_ = comparator_;\r\n        this.root_ = root_;\r\n    }\r\n    /**\r\n     * Returns a copy of the map, with the specified key/value added or replaced.\r\n     * (TODO: We should perhaps rename this method to 'put')\r\n     *\r\n     * @param key - Key to be added.\r\n     * @param value - Value to be added.\r\n     * @returns New map, with item added.\r\n     */\r\n    insert(key, value) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .insert(key, value, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    }\r\n    /**\r\n     * Returns a copy of the map, with the specified key removed.\r\n     *\r\n     * @param key - The key to remove.\r\n     * @returns New map, with item removed.\r\n     */\r\n    remove(key) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .remove(key, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    }\r\n    /**\r\n     * Returns the value of the node with the given key, or null.\r\n     *\r\n     * @param key - The key to look up.\r\n     * @returns The value of the node with the given key, or null if the\r\n     * key doesn't exist.\r\n     */\r\n    get(key) {\r\n        let cmp;\r\n        let node = this.root_;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                return node.value;\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                node = node.right;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Returns the key of the item *before* the specified key, or null if key is the first item.\r\n     * @param key - The key to find the predecessor of\r\n     * @returns The predecessor key.\r\n     */\r\n    getPredecessorKey(key) {\r\n        let cmp, node = this.root_, rightParent = null;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                if (!node.left.isEmpty()) {\r\n                    node = node.left;\r\n                    while (!node.right.isEmpty()) {\r\n                        node = node.right;\r\n                    }\r\n                    return node.key;\r\n                }\r\n                else if (rightParent) {\r\n                    return rightParent.key;\r\n                }\r\n                else {\r\n                    return null; // first item.\r\n                }\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                rightParent = node;\r\n                node = node.right;\r\n            }\r\n        }\r\n        throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');\r\n    }\r\n    /**\r\n     * @returns True if the map is empty.\r\n     */\r\n    isEmpty() {\r\n        return this.root_.isEmpty();\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the map.\r\n     */\r\n    count() {\r\n        return this.root_.count();\r\n    }\r\n    /**\r\n     * @returns The minimum key in the map.\r\n     */\r\n    minKey() {\r\n        return this.root_.minKey();\r\n    }\r\n    /**\r\n     * @returns The maximum key in the map.\r\n     */\r\n    maxKey() {\r\n        return this.root_.maxKey();\r\n    }\r\n    /**\r\n     * Traverses the map in key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param action - Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @returns The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    inorderTraversal(action) {\r\n        return this.root_.inorderTraversal(action);\r\n    }\r\n    /**\r\n     * Traverses the map in reverse key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param action - Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @returns True if the traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return this.root_.reverseTraversal(action);\r\n    }\r\n    /**\r\n     * Returns an iterator over the SortedMap.\r\n     * @returns The iterator.\r\n     */\r\n    getIterator(resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);\r\n    }\r\n    getIteratorFrom(key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);\r\n    }\r\n    getReverseIteratorFrom(key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);\r\n    }\r\n    getReverseIterator(resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);\r\n    }\r\n}\r\n/**\r\n * Always use the same empty node, to reduce memory.\r\n */\r\nSortedMap.EMPTY_NODE = new LLRBEmptyNode();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction NAME_ONLY_COMPARATOR(left, right) {\r\n    return nameCompare(left.name, right.name);\r\n}\r\nfunction NAME_COMPARATOR(left, right) {\r\n    return nameCompare(left, right);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet MAX_NODE$2;\r\nfunction setMaxNode$1(val) {\r\n    MAX_NODE$2 = val;\r\n}\r\nconst priorityHashText = function (priority) {\r\n    if (typeof priority === 'number') {\r\n        return 'number:' + doubleToIEEE754String(priority);\r\n    }\r\n    else {\r\n        return 'string:' + priority;\r\n    }\r\n};\r\n/**\r\n * Validates that a priority snapshot Node is valid.\r\n */\r\nconst validatePriorityNode = function (priorityNode) {\r\n    if (priorityNode.isLeafNode()) {\r\n        const val = priorityNode.val();\r\n        assert(typeof val === 'string' ||\r\n            typeof val === 'number' ||\r\n            (typeof val === 'object' && contains(val, '.sv')), 'Priority must be a string or number.');\r\n    }\r\n    else {\r\n        assert(priorityNode === MAX_NODE$2 || priorityNode.isEmpty(), 'priority of unexpected type.');\r\n    }\r\n    // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\r\n    assert(priorityNode === MAX_NODE$2 || priorityNode.getPriority().isEmpty(), \"Priority nodes can't have a priority of their own.\");\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet __childrenNodeConstructor;\r\n/**\r\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\r\n * implements Node and stores the value of the node (a string,\r\n * number, or boolean) accessible via getValue().\r\n */\r\nclass LeafNode {\r\n    /**\r\n     * @param value_ - The value to store in this leaf node. The object type is\r\n     * possible in the event of a deferred value\r\n     * @param priorityNode_ - The priority of this node.\r\n     */\r\n    constructor(value_, priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\r\n        this.value_ = value_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.lazyHash_ = null;\r\n        assert(this.value_ !== undefined && this.value_ !== null, \"LeafNode shouldn't be created with null/undefined value.\");\r\n        validatePriorityNode(this.priorityNode_);\r\n    }\r\n    static set __childrenNodeConstructor(val) {\r\n        __childrenNodeConstructor = val;\r\n    }\r\n    static get __childrenNodeConstructor() {\r\n        return __childrenNodeConstructor;\r\n    }\r\n    /** @inheritDoc */\r\n    isLeafNode() {\r\n        return true;\r\n    }\r\n    /** @inheritDoc */\r\n    getPriority() {\r\n        return this.priorityNode_;\r\n    }\r\n    /** @inheritDoc */\r\n    updatePriority(newPriorityNode) {\r\n        return new LeafNode(this.value_, newPriorityNode);\r\n    }\r\n    /** @inheritDoc */\r\n    getImmediateChild(childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getChild(path) {\r\n        if (pathIsEmpty(path)) {\r\n            return this;\r\n        }\r\n        else if (pathGetFront(path) === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    }\r\n    hasChild() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    getPredecessorChildName(childName, childNode) {\r\n        return null;\r\n    }\r\n    /** @inheritDoc */\r\n    updateImmediateChild(childName, newChildNode) {\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else if (newChildNode.isEmpty() && childName !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    updateChild(path, newChildNode) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else if (newChildNode.isEmpty() && front !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            assert(front !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\r\n            return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(pathPopFront(path), newChildNode));\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    numChildren() {\r\n        return 0;\r\n    }\r\n    /** @inheritDoc */\r\n    forEachChild(index, action) {\r\n        return false;\r\n    }\r\n    val(exportFormat) {\r\n        if (exportFormat && !this.getPriority().isEmpty()) {\r\n            return {\r\n                '.value': this.getValue(),\r\n                '.priority': this.getPriority().val()\r\n            };\r\n        }\r\n        else {\r\n            return this.getValue();\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    hash() {\r\n        if (this.lazyHash_ === null) {\r\n            let toHash = '';\r\n            if (!this.priorityNode_.isEmpty()) {\r\n                toHash +=\r\n                    'priority:' +\r\n                        priorityHashText(this.priorityNode_.val()) +\r\n                        ':';\r\n            }\r\n            const type = typeof this.value_;\r\n            toHash += type + ':';\r\n            if (type === 'number') {\r\n                toHash += doubleToIEEE754String(this.value_);\r\n            }\r\n            else {\r\n                toHash += this.value_;\r\n            }\r\n            this.lazyHash_ = sha1(toHash);\r\n        }\r\n        return this.lazyHash_;\r\n    }\r\n    /**\r\n     * Returns the value of the leaf node.\r\n     * @returns The value of the node.\r\n     */\r\n    getValue() {\r\n        return this.value_;\r\n    }\r\n    compareTo(other) {\r\n        if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\r\n            return 1;\r\n        }\r\n        else if (other instanceof LeafNode.__childrenNodeConstructor) {\r\n            return -1;\r\n        }\r\n        else {\r\n            assert(other.isLeafNode(), 'Unknown node type');\r\n            return this.compareToLeafNode_(other);\r\n        }\r\n    }\r\n    /**\r\n     * Comparison specifically for two leaf nodes\r\n     */\r\n    compareToLeafNode_(otherLeaf) {\r\n        const otherLeafType = typeof otherLeaf.value_;\r\n        const thisLeafType = typeof this.value_;\r\n        const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\r\n        const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\r\n        assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\r\n        assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\r\n        if (otherIndex === thisIndex) {\r\n            // Same type, compare values\r\n            if (thisLeafType === 'object') {\r\n                // Deferred value nodes are all equal, but we should also never get to this point...\r\n                return 0;\r\n            }\r\n            else {\r\n                // Note that this works because true > false, all others are number or string comparisons\r\n                if (this.value_ < otherLeaf.value_) {\r\n                    return -1;\r\n                }\r\n                else if (this.value_ === otherLeaf.value_) {\r\n                    return 0;\r\n                }\r\n                else {\r\n                    return 1;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return thisIndex - otherIndex;\r\n        }\r\n    }\r\n    withIndex() {\r\n        return this;\r\n    }\r\n    isIndexed() {\r\n        return true;\r\n    }\r\n    equals(other) {\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            const otherLeaf = other;\r\n            return (this.value_ === otherLeaf.value_ &&\r\n                this.priorityNode_.equals(otherLeaf.priorityNode_));\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n/**\r\n * The sort order for comparing leaf nodes of different types. If two leaf nodes have\r\n * the same type, the comparison falls back to their value\r\n */\r\nLeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet nodeFromJSON$1;\r\nlet MAX_NODE$1;\r\nfunction setNodeFromJSON(val) {\r\n    nodeFromJSON$1 = val;\r\n}\r\nfunction setMaxNode(val) {\r\n    MAX_NODE$1 = val;\r\n}\r\nclass PriorityIndex extends Index {\r\n    compare(a, b) {\r\n        const aPriority = a.node.getPriority();\r\n        const bPriority = b.node.getPriority();\r\n        const indexCmp = aPriority.compareTo(bPriority);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    isDefinedOn(node) {\r\n        return !node.getPriority().isEmpty();\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return !oldNode.getPriority().equals(newNode.getPriority());\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));\r\n    }\r\n    makePost(indexValue, name) {\r\n        const priorityNode = nodeFromJSON$1(indexValue);\r\n        return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.priority';\r\n    }\r\n}\r\nconst PRIORITY_INDEX = new PriorityIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst LOG_2 = Math.log(2);\r\nclass Base12Num {\r\n    constructor(length) {\r\n        const logBase2 = (num) => \r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        parseInt((Math.log(num) / LOG_2), 10);\r\n        const bitMask = (bits) => parseInt(Array(bits + 1).join('1'), 2);\r\n        this.count = logBase2(length + 1);\r\n        this.current_ = this.count - 1;\r\n        const mask = bitMask(this.count);\r\n        this.bits_ = (length + 1) & mask;\r\n    }\r\n    nextBitIsOne() {\r\n        //noinspection JSBitwiseOperatorUsage\r\n        const result = !(this.bits_ & (0x1 << this.current_));\r\n        this.current_--;\r\n        return result;\r\n    }\r\n}\r\n/**\r\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\r\n * function\r\n *\r\n * Uses the algorithm described in the paper linked here:\r\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\r\n *\r\n * @param childList - Unsorted list of children\r\n * @param cmp - The comparison method to be used\r\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\r\n * type is not NamedNode\r\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\r\n */\r\nconst buildChildSet = function (childList, cmp, keyFn, mapSortFn) {\r\n    childList.sort(cmp);\r\n    const buildBalancedTree = function (low, high) {\r\n        const length = high - low;\r\n        let namedNode;\r\n        let key;\r\n        if (length === 0) {\r\n            return null;\r\n        }\r\n        else if (length === 1) {\r\n            namedNode = childList[low];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);\r\n        }\r\n        else {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const middle = parseInt((length / 2), 10) + low;\r\n            const left = buildBalancedTree(low, middle);\r\n            const right = buildBalancedTree(middle + 1, high);\r\n            namedNode = childList[middle];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);\r\n        }\r\n    };\r\n    const buildFrom12Array = function (base12) {\r\n        let node = null;\r\n        let root = null;\r\n        let index = childList.length;\r\n        const buildPennant = function (chunkSize, color) {\r\n            const low = index - chunkSize;\r\n            const high = index;\r\n            index -= chunkSize;\r\n            const childTree = buildBalancedTree(low + 1, high);\r\n            const namedNode = childList[low];\r\n            const key = keyFn ? keyFn(namedNode) : namedNode;\r\n            attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));\r\n        };\r\n        const attachPennant = function (pennant) {\r\n            if (node) {\r\n                node.left = pennant;\r\n                node = pennant;\r\n            }\r\n            else {\r\n                root = pennant;\r\n                node = pennant;\r\n            }\r\n        };\r\n        for (let i = 0; i < base12.count; ++i) {\r\n            const isOne = base12.nextBitIsOne();\r\n            // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\r\n            const chunkSize = Math.pow(2, base12.count - (i + 1));\r\n            if (isOne) {\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n            }\r\n            else {\r\n                // current == 2\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n                buildPennant(chunkSize, LLRBNode.RED);\r\n            }\r\n        }\r\n        return root;\r\n    };\r\n    const base12 = new Base12Num(childList.length);\r\n    const root = buildFrom12Array(base12);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    return new SortedMap(mapSortFn || cmp, root);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet _defaultIndexMap;\r\nconst fallbackObject = {};\r\nclass IndexMap {\r\n    constructor(indexes_, indexSet_) {\r\n        this.indexes_ = indexes_;\r\n        this.indexSet_ = indexSet_;\r\n    }\r\n    /**\r\n     * The default IndexMap for nodes without a priority\r\n     */\r\n    static get Default() {\r\n        assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');\r\n        _defaultIndexMap =\r\n            _defaultIndexMap ||\r\n                new IndexMap({ '.priority': fallbackObject }, { '.priority': PRIORITY_INDEX });\r\n        return _defaultIndexMap;\r\n    }\r\n    get(indexKey) {\r\n        const sortedMap = safeGet(this.indexes_, indexKey);\r\n        if (!sortedMap) {\r\n            throw new Error('No index defined for ' + indexKey);\r\n        }\r\n        if (sortedMap instanceof SortedMap) {\r\n            return sortedMap;\r\n        }\r\n        else {\r\n            // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\r\n            // regular child map\r\n            return null;\r\n        }\r\n    }\r\n    hasIndex(indexDefinition) {\r\n        return contains(this.indexSet_, indexDefinition.toString());\r\n    }\r\n    addIndex(indexDefinition, existingChildren) {\r\n        assert(indexDefinition !== KEY_INDEX, \"KeyIndex always exists and isn't meant to be added to the IndexMap.\");\r\n        const childList = [];\r\n        let sawIndexedValue = false;\r\n        const iter = existingChildren.getIterator(NamedNode.Wrap);\r\n        let next = iter.getNext();\r\n        while (next) {\r\n            sawIndexedValue =\r\n                sawIndexedValue || indexDefinition.isDefinedOn(next.node);\r\n            childList.push(next);\r\n            next = iter.getNext();\r\n        }\r\n        let newIndex;\r\n        if (sawIndexedValue) {\r\n            newIndex = buildChildSet(childList, indexDefinition.getCompare());\r\n        }\r\n        else {\r\n            newIndex = fallbackObject;\r\n        }\r\n        const indexName = indexDefinition.toString();\r\n        const newIndexSet = Object.assign({}, this.indexSet_);\r\n        newIndexSet[indexName] = indexDefinition;\r\n        const newIndexes = Object.assign({}, this.indexes_);\r\n        newIndexes[indexName] = newIndex;\r\n        return new IndexMap(newIndexes, newIndexSet);\r\n    }\r\n    /**\r\n     * Ensure that this node is properly tracked in any indexes that we're maintaining\r\n     */\r\n    addToIndexes(namedNode, existingChildren) {\r\n        const newIndexes = map(this.indexes_, (indexedChildren, indexName) => {\r\n            const index = safeGet(this.indexSet_, indexName);\r\n            assert(index, 'Missing index implementation for ' + indexName);\r\n            if (indexedChildren === fallbackObject) {\r\n                // Check to see if we need to index everything\r\n                if (index.isDefinedOn(namedNode.node)) {\r\n                    // We need to build this index\r\n                    const childList = [];\r\n                    const iter = existingChildren.getIterator(NamedNode.Wrap);\r\n                    let next = iter.getNext();\r\n                    while (next) {\r\n                        if (next.name !== namedNode.name) {\r\n                            childList.push(next);\r\n                        }\r\n                        next = iter.getNext();\r\n                    }\r\n                    childList.push(namedNode);\r\n                    return buildChildSet(childList, index.getCompare());\r\n                }\r\n                else {\r\n                    // No change, this remains a fallback\r\n                    return fallbackObject;\r\n                }\r\n            }\r\n            else {\r\n                const existingSnap = existingChildren.get(namedNode.name);\r\n                let newChildren = indexedChildren;\r\n                if (existingSnap) {\r\n                    newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                return newChildren.insert(namedNode, namedNode.node);\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    }\r\n    /**\r\n     * Create a new IndexMap instance with the given value removed\r\n     */\r\n    removeFromIndexes(namedNode, existingChildren) {\r\n        const newIndexes = map(this.indexes_, (indexedChildren) => {\r\n            if (indexedChildren === fallbackObject) {\r\n                // This is the fallback. Just return it, nothing to do in this case\r\n                return indexedChildren;\r\n            }\r\n            else {\r\n                const existingSnap = existingChildren.get(namedNode.name);\r\n                if (existingSnap) {\r\n                    return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                else {\r\n                    // No record of this child\r\n                    return indexedChildren;\r\n                }\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\r\nlet EMPTY_NODE;\r\n/**\r\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\r\n * (i.e. nodes with children).  It implements Node and stores the\r\n * list of children in the children property, sorted by child name.\r\n */\r\nclass ChildrenNode {\r\n    /**\r\n     * @param children_ - List of children of this node..\r\n     * @param priorityNode_ - The priority of this node (as a snapshot node).\r\n     */\r\n    constructor(children_, priorityNode_, indexMap_) {\r\n        this.children_ = children_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.indexMap_ = indexMap_;\r\n        this.lazyHash_ = null;\r\n        /**\r\n         * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\r\n         * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\r\n         * class instead of an empty ChildrenNode.\r\n         */\r\n        if (this.priorityNode_) {\r\n            validatePriorityNode(this.priorityNode_);\r\n        }\r\n        if (this.children_.isEmpty()) {\r\n            assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');\r\n        }\r\n    }\r\n    static get EMPTY_NODE() {\r\n        return (EMPTY_NODE ||\r\n            (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default)));\r\n    }\r\n    /** @inheritDoc */\r\n    isLeafNode() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    getPriority() {\r\n        return this.priorityNode_ || EMPTY_NODE;\r\n    }\r\n    /** @inheritDoc */\r\n    updatePriority(newPriorityNode) {\r\n        if (this.children_.isEmpty()) {\r\n            // Don't allow priorities on empty nodes\r\n            return this;\r\n        }\r\n        else {\r\n            return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getImmediateChild(childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.getPriority();\r\n        }\r\n        else {\r\n            const child = this.children_.get(childName);\r\n            return child === null ? EMPTY_NODE : child;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getChild(path) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return this;\r\n        }\r\n        return this.getImmediateChild(front).getChild(pathPopFront(path));\r\n    }\r\n    /** @inheritDoc */\r\n    hasChild(childName) {\r\n        return this.children_.get(childName) !== null;\r\n    }\r\n    /** @inheritDoc */\r\n    updateImmediateChild(childName, newChildNode) {\r\n        assert(newChildNode, 'We should always be passing snapshot nodes');\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else {\r\n            const namedNode = new NamedNode(childName, newChildNode);\r\n            let newChildren, newIndexMap;\r\n            if (newChildNode.isEmpty()) {\r\n                newChildren = this.children_.remove(childName);\r\n                newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);\r\n            }\r\n            else {\r\n                newChildren = this.children_.insert(childName, newChildNode);\r\n                newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\r\n            }\r\n            const newPriority = newChildren.isEmpty()\r\n                ? EMPTY_NODE\r\n                : this.priorityNode_;\r\n            return new ChildrenNode(newChildren, newPriority, newIndexMap);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    updateChild(path, newChildNode) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else {\r\n            assert(pathGetFront(path) !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\r\n            const newImmediateChild = this.getImmediateChild(front).updateChild(pathPopFront(path), newChildNode);\r\n            return this.updateImmediateChild(front, newImmediateChild);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    isEmpty() {\r\n        return this.children_.isEmpty();\r\n    }\r\n    /** @inheritDoc */\r\n    numChildren() {\r\n        return this.children_.count();\r\n    }\r\n    /** @inheritDoc */\r\n    val(exportFormat) {\r\n        if (this.isEmpty()) {\r\n            return null;\r\n        }\r\n        const obj = {};\r\n        let numKeys = 0, maxKey = 0, allIntegerKeys = true;\r\n        this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            obj[key] = childNode.val(exportFormat);\r\n            numKeys++;\r\n            if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\r\n                maxKey = Math.max(maxKey, Number(key));\r\n            }\r\n            else {\r\n                allIntegerKeys = false;\r\n            }\r\n        });\r\n        if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\r\n            // convert to array.\r\n            const array = [];\r\n            // eslint-disable-next-line guard-for-in\r\n            for (const key in obj) {\r\n                array[key] = obj[key];\r\n            }\r\n            return array;\r\n        }\r\n        else {\r\n            if (exportFormat && !this.getPriority().isEmpty()) {\r\n                obj['.priority'] = this.getPriority().val();\r\n            }\r\n            return obj;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    hash() {\r\n        if (this.lazyHash_ === null) {\r\n            let toHash = '';\r\n            if (!this.getPriority().isEmpty()) {\r\n                toHash +=\r\n                    'priority:' +\r\n                        priorityHashText(this.getPriority().val()) +\r\n                        ':';\r\n            }\r\n            this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                const childHash = childNode.hash();\r\n                if (childHash !== '') {\r\n                    toHash += ':' + key + ':' + childHash;\r\n                }\r\n            });\r\n            this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\r\n        }\r\n        return this.lazyHash_;\r\n    }\r\n    /** @inheritDoc */\r\n    getPredecessorChildName(childName, childNode, index) {\r\n        const idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            const predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));\r\n            return predecessor ? predecessor.name : null;\r\n        }\r\n        else {\r\n            return this.children_.getPredecessorKey(childName);\r\n        }\r\n    }\r\n    getFirstChildName(indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            const minKey = idx.minKey();\r\n            return minKey && minKey.name;\r\n        }\r\n        else {\r\n            return this.children_.minKey();\r\n        }\r\n    }\r\n    getFirstChild(indexDefinition) {\r\n        const minKey = this.getFirstChildName(indexDefinition);\r\n        if (minKey) {\r\n            return new NamedNode(minKey, this.children_.get(minKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     * Given an index, return the key name of the largest value we have, according to that index\r\n     */\r\n    getLastChildName(indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            const maxKey = idx.maxKey();\r\n            return maxKey && maxKey.name;\r\n        }\r\n        else {\r\n            return this.children_.maxKey();\r\n        }\r\n    }\r\n    getLastChild(indexDefinition) {\r\n        const maxKey = this.getLastChildName(indexDefinition);\r\n        if (maxKey) {\r\n            return new NamedNode(maxKey, this.children_.get(maxKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    forEachChild(index, action) {\r\n        const idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            return idx.inorderTraversal(wrappedNode => {\r\n                return action(wrappedNode.name, wrappedNode.node);\r\n            });\r\n        }\r\n        else {\r\n            return this.children_.inorderTraversal(action);\r\n        }\r\n    }\r\n    getIterator(indexDefinition) {\r\n        return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\r\n    }\r\n    getIteratorFrom(startPost, indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getIteratorFrom(startPost, key => key);\r\n        }\r\n        else {\r\n            const iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);\r\n            let next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, startPost) < 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    }\r\n    getReverseIterator(indexDefinition) {\r\n        return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);\r\n    }\r\n    getReverseIteratorFrom(endPost, indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getReverseIteratorFrom(endPost, key => {\r\n                return key;\r\n            });\r\n        }\r\n        else {\r\n            const iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);\r\n            let next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, endPost) > 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    }\r\n    compareTo(other) {\r\n        if (this.isEmpty()) {\r\n            if (other.isEmpty()) {\r\n                return 0;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (other.isLeafNode() || other.isEmpty()) {\r\n            return 1;\r\n        }\r\n        else if (other === MAX_NODE) {\r\n            return -1;\r\n        }\r\n        else {\r\n            // Must be another node with children.\r\n            return 0;\r\n        }\r\n    }\r\n    withIndex(indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX ||\r\n            this.indexMap_.hasIndex(indexDefinition)) {\r\n            return this;\r\n        }\r\n        else {\r\n            const newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);\r\n            return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\r\n        }\r\n    }\r\n    isIndexed(index) {\r\n        return index === KEY_INDEX || this.indexMap_.hasIndex(index);\r\n    }\r\n    equals(other) {\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            return false;\r\n        }\r\n        else {\r\n            const otherChildrenNode = other;\r\n            if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\r\n                return false;\r\n            }\r\n            else if (this.children_.count() === otherChildrenNode.children_.count()) {\r\n                const thisIter = this.getIterator(PRIORITY_INDEX);\r\n                const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\r\n                let thisCurrent = thisIter.getNext();\r\n                let otherCurrent = otherIter.getNext();\r\n                while (thisCurrent && otherCurrent) {\r\n                    if (thisCurrent.name !== otherCurrent.name ||\r\n                        !thisCurrent.node.equals(otherCurrent.node)) {\r\n                        return false;\r\n                    }\r\n                    thisCurrent = thisIter.getNext();\r\n                    otherCurrent = otherIter.getNext();\r\n                }\r\n                return thisCurrent === null && otherCurrent === null;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\r\n     * instead.\r\n     *\r\n     */\r\n    resolveIndex_(indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX) {\r\n            return null;\r\n        }\r\n        else {\r\n            return this.indexMap_.get(indexDefinition.toString());\r\n        }\r\n    }\r\n}\r\nChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\r\nclass MaxNode extends ChildrenNode {\r\n    constructor() {\r\n        super(new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default);\r\n    }\r\n    compareTo(other) {\r\n        if (other === this) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return 1;\r\n        }\r\n    }\r\n    equals(other) {\r\n        // Not that we every compare it, but MAX_NODE is only ever equal to itself\r\n        return other === this;\r\n    }\r\n    getPriority() {\r\n        return this;\r\n    }\r\n    getImmediateChild(childName) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    }\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Marker that will sort higher than any other snapshot.\r\n */\r\nconst MAX_NODE = new MaxNode();\r\nObject.defineProperties(NamedNode, {\r\n    MIN: {\r\n        value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\r\n    },\r\n    MAX: {\r\n        value: new NamedNode(MAX_NAME, MAX_NODE)\r\n    }\r\n});\r\n/**\r\n * Reference Extensions\r\n */\r\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\r\nLeafNode.__childrenNodeConstructor = ChildrenNode;\r\nsetMaxNode$1(MAX_NODE);\r\nsetMaxNode(MAX_NODE);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst USE_HINZE = true;\r\n/**\r\n * Constructs a snapshot node representing the passed JSON and returns it.\r\n * @param json - JSON to create a node for.\r\n * @param priority - Optional priority to use.  This will be ignored if the\r\n * passed JSON contains a .priority property.\r\n */\r\nfunction nodeFromJSON(json, priority = null) {\r\n    if (json === null) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    }\r\n    if (typeof json === 'object' && '.priority' in json) {\r\n        priority = json['.priority'];\r\n    }\r\n    assert(priority === null ||\r\n        typeof priority === 'string' ||\r\n        typeof priority === 'number' ||\r\n        (typeof priority === 'object' && '.sv' in priority), 'Invalid priority type found: ' + typeof priority);\r\n    if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\r\n        json = json['.value'];\r\n    }\r\n    // Valid leaf nodes include non-objects or server-value wrapper objects\r\n    if (typeof json !== 'object' || '.sv' in json) {\r\n        const jsonLeaf = json;\r\n        return new LeafNode(jsonLeaf, nodeFromJSON(priority));\r\n    }\r\n    if (!(json instanceof Array) && USE_HINZE) {\r\n        const children = [];\r\n        let childrenHavePriority = false;\r\n        const hinzeJsonObj = json;\r\n        each(hinzeJsonObj, (key, child) => {\r\n            if (key.substring(0, 1) !== '.') {\r\n                // Ignore metadata nodes\r\n                const childNode = nodeFromJSON(child);\r\n                if (!childNode.isEmpty()) {\r\n                    childrenHavePriority =\r\n                        childrenHavePriority || !childNode.getPriority().isEmpty();\r\n                    children.push(new NamedNode(key, childNode));\r\n                }\r\n            }\r\n        });\r\n        if (children.length === 0) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        const childSet = buildChildSet(children, NAME_ONLY_COMPARATOR, namedNode => namedNode.name, NAME_COMPARATOR);\r\n        if (childrenHavePriority) {\r\n            const sortedChildSet = buildChildSet(children, PRIORITY_INDEX.getCompare());\r\n            return new ChildrenNode(childSet, nodeFromJSON(priority), new IndexMap({ '.priority': sortedChildSet }, { '.priority': PRIORITY_INDEX }));\r\n        }\r\n        else {\r\n            return new ChildrenNode(childSet, nodeFromJSON(priority), IndexMap.Default);\r\n        }\r\n    }\r\n    else {\r\n        let node = ChildrenNode.EMPTY_NODE;\r\n        each(json, (key, childData) => {\r\n            if (contains(json, key)) {\r\n                if (key.substring(0, 1) !== '.') {\r\n                    // ignore metadata nodes.\r\n                    const childNode = nodeFromJSON(childData);\r\n                    if (childNode.isLeafNode() || !childNode.isEmpty()) {\r\n                        node = node.updateImmediateChild(key, childNode);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        return node.updatePriority(nodeFromJSON(priority));\r\n    }\r\n}\r\nsetNodeFromJSON(nodeFromJSON);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass PathIndex extends Index {\r\n    constructor(indexPath_) {\r\n        super();\r\n        this.indexPath_ = indexPath_;\r\n        assert(!pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority', \"Can't create PathIndex with empty path or .priority key\");\r\n    }\r\n    extractChild(snap) {\r\n        return snap.getChild(this.indexPath_);\r\n    }\r\n    isDefinedOn(node) {\r\n        return !node.getChild(this.indexPath_).isEmpty();\r\n    }\r\n    compare(a, b) {\r\n        const aChild = this.extractChild(a.node);\r\n        const bChild = this.extractChild(b.node);\r\n        const indexCmp = aChild.compareTo(bChild);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    makePost(indexValue, name) {\r\n        const valueNode = nodeFromJSON(indexValue);\r\n        const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);\r\n        return new NamedNode(name, node);\r\n    }\r\n    maxPost() {\r\n        const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\r\n        return new NamedNode(MAX_NAME, node);\r\n    }\r\n    toString() {\r\n        return pathSlice(this.indexPath_, 0).join('/');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ValueIndex extends Index {\r\n    compare(a, b) {\r\n        const indexCmp = a.node.compareTo(b.node);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    isDefinedOn(node) {\r\n        return true;\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return !oldNode.equals(newNode);\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MAX;\r\n    }\r\n    makePost(indexValue, name) {\r\n        const valueNode = nodeFromJSON(indexValue);\r\n        return new NamedNode(name, valueNode);\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.value';\r\n    }\r\n}\r\nconst VALUE_INDEX = new ValueIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction changeValue(snapshotNode) {\r\n    return { type: \"value\" /* ChangeType.VALUE */, snapshotNode };\r\n}\r\nfunction changeChildAdded(childName, snapshotNode) {\r\n    return { type: \"child_added\" /* ChangeType.CHILD_ADDED */, snapshotNode, childName };\r\n}\r\nfunction changeChildRemoved(childName, snapshotNode) {\r\n    return { type: \"child_removed\" /* ChangeType.CHILD_REMOVED */, snapshotNode, childName };\r\n}\r\nfunction changeChildChanged(childName, snapshotNode, oldSnap) {\r\n    return {\r\n        type: \"child_changed\" /* ChangeType.CHILD_CHANGED */,\r\n        snapshotNode,\r\n        childName,\r\n        oldSnap\r\n    };\r\n}\r\nfunction changeChildMoved(childName, snapshotNode) {\r\n    return { type: \"child_moved\" /* ChangeType.CHILD_MOVED */, snapshotNode, childName };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\r\n */\r\nclass IndexedFilter {\r\n    constructor(index_) {\r\n        this.index_ = index_;\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');\r\n        const oldChild = snap.getImmediateChild(key);\r\n        // Check if anything actually changed.\r\n        if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {\r\n            // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\r\n            // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\r\n            // to avoid treating these cases as \"nothing changed.\"\r\n            if (oldChild.isEmpty() === newChild.isEmpty()) {\r\n                // Nothing changed.\r\n                // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\r\n                //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\r\n                return snap;\r\n            }\r\n        }\r\n        if (optChangeAccumulator != null) {\r\n            if (newChild.isEmpty()) {\r\n                if (snap.hasChild(key)) {\r\n                    optChangeAccumulator.trackChildChange(changeChildRemoved(key, oldChild));\r\n                }\r\n                else {\r\n                    assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');\r\n                }\r\n            }\r\n            else if (oldChild.isEmpty()) {\r\n                optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\r\n            }\r\n            else {\r\n                optChangeAccumulator.trackChildChange(changeChildChanged(key, newChild, oldChild));\r\n            }\r\n        }\r\n        if (snap.isLeafNode() && newChild.isEmpty()) {\r\n            return snap;\r\n        }\r\n        else {\r\n            // Make sure the node is indexed\r\n            return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\r\n        }\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        if (optChangeAccumulator != null) {\r\n            if (!oldSnap.isLeafNode()) {\r\n                oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                    if (!newSnap.hasChild(key)) {\r\n                        optChangeAccumulator.trackChildChange(changeChildRemoved(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n            if (!newSnap.isLeafNode()) {\r\n                newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                    if (oldSnap.hasChild(key)) {\r\n                        const oldChild = oldSnap.getImmediateChild(key);\r\n                        if (!oldChild.equals(childNode)) {\r\n                            optChangeAccumulator.trackChildChange(changeChildChanged(key, childNode, oldChild));\r\n                        }\r\n                    }\r\n                    else {\r\n                        optChangeAccumulator.trackChildChange(changeChildAdded(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return newSnap.withIndex(this.index_);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        if (oldSnap.isEmpty()) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        else {\r\n            return oldSnap.updatePriority(newPriority);\r\n        }\r\n    }\r\n    filtersNodes() {\r\n        return false;\r\n    }\r\n    getIndexedFilter() {\r\n        return this;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\r\n */\r\nclass RangedFilter {\r\n    constructor(params) {\r\n        this.indexedFilter_ = new IndexedFilter(params.getIndex());\r\n        this.index_ = params.getIndex();\r\n        this.startPost_ = RangedFilter.getStartPost_(params);\r\n        this.endPost_ = RangedFilter.getEndPost_(params);\r\n        this.startIsInclusive_ = !params.startAfterSet_;\r\n        this.endIsInclusive_ = !params.endBeforeSet_;\r\n    }\r\n    getStartPost() {\r\n        return this.startPost_;\r\n    }\r\n    getEndPost() {\r\n        return this.endPost_;\r\n    }\r\n    matches(node) {\r\n        const isWithinStart = this.startIsInclusive_\r\n            ? this.index_.compare(this.getStartPost(), node) <= 0\r\n            : this.index_.compare(this.getStartPost(), node) < 0;\r\n        const isWithinEnd = this.endIsInclusive_\r\n            ? this.index_.compare(node, this.getEndPost()) <= 0\r\n            : this.index_.compare(node, this.getEndPost()) < 0;\r\n        return isWithinStart && isWithinEnd;\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        if (newSnap.isLeafNode()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            newSnap = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        let filtered = newSnap.withIndex(this.index_);\r\n        // Don't support priorities on queries\r\n        filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n        const self = this;\r\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            if (!self.matches(new NamedNode(key, childNode))) {\r\n                filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\r\n            }\r\n        });\r\n        return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    }\r\n    filtersNodes() {\r\n        return true;\r\n    }\r\n    getIndexedFilter() {\r\n        return this.indexedFilter_;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    static getStartPost_(params) {\r\n        if (params.hasStart()) {\r\n            const startName = params.getIndexStartName();\r\n            return params.getIndex().makePost(params.getIndexStartValue(), startName);\r\n        }\r\n        else {\r\n            return params.getIndex().minPost();\r\n        }\r\n    }\r\n    static getEndPost_(params) {\r\n        if (params.hasEnd()) {\r\n            const endName = params.getIndexEndName();\r\n            return params.getIndex().makePost(params.getIndexEndValue(), endName);\r\n        }\r\n        else {\r\n            return params.getIndex().maxPost();\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\r\n */\r\nclass LimitedFilter {\r\n    constructor(params) {\r\n        this.withinDirectionalStart = (node) => this.reverse_ ? this.withinEndPost(node) : this.withinStartPost(node);\r\n        this.withinDirectionalEnd = (node) => this.reverse_ ? this.withinStartPost(node) : this.withinEndPost(node);\r\n        this.withinStartPost = (node) => {\r\n            const compareRes = this.index_.compare(this.rangedFilter_.getStartPost(), node);\r\n            return this.startIsInclusive_ ? compareRes <= 0 : compareRes < 0;\r\n        };\r\n        this.withinEndPost = (node) => {\r\n            const compareRes = this.index_.compare(node, this.rangedFilter_.getEndPost());\r\n            return this.endIsInclusive_ ? compareRes <= 0 : compareRes < 0;\r\n        };\r\n        this.rangedFilter_ = new RangedFilter(params);\r\n        this.index_ = params.getIndex();\r\n        this.limit_ = params.getLimit();\r\n        this.reverse_ = !params.isViewFromLeft();\r\n        this.startIsInclusive_ = !params.startAfterSet_;\r\n        this.endIsInclusive_ = !params.endBeforeSet_;\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        if (snap.getImmediateChild(key).equals(newChild)) {\r\n            // No change\r\n            return snap;\r\n        }\r\n        else if (snap.numChildren() < this.limit_) {\r\n            return this.rangedFilter_\r\n                .getIndexedFilter()\r\n                .updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n        }\r\n        else {\r\n            return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);\r\n        }\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        let filtered;\r\n        if (newSnap.isLeafNode() || newSnap.isEmpty()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n        }\r\n        else {\r\n            if (this.limit_ * 2 < newSnap.numChildren() &&\r\n                newSnap.isIndexed(this.index_)) {\r\n                // Easier to build up a snapshot, since what we're given has more than twice the elements we want\r\n                filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n                // anchor to the startPost, endPost, or last element as appropriate\r\n                let iterator;\r\n                if (this.reverse_) {\r\n                    iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);\r\n                }\r\n                else {\r\n                    iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);\r\n                }\r\n                let count = 0;\r\n                while (iterator.hasNext() && count < this.limit_) {\r\n                    const next = iterator.getNext();\r\n                    if (!this.withinDirectionalStart(next)) {\r\n                        // if we have not reached the start, skip to the next element\r\n                        continue;\r\n                    }\r\n                    else if (!this.withinDirectionalEnd(next)) {\r\n                        // if we have reached the end, stop adding elements\r\n                        break;\r\n                    }\r\n                    else {\r\n                        filtered = filtered.updateImmediateChild(next.name, next.node);\r\n                        count++;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\r\n                filtered = newSnap.withIndex(this.index_);\r\n                // Don't support priorities on queries\r\n                filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n                let iterator;\r\n                if (this.reverse_) {\r\n                    iterator = filtered.getReverseIterator(this.index_);\r\n                }\r\n                else {\r\n                    iterator = filtered.getIterator(this.index_);\r\n                }\r\n                let count = 0;\r\n                while (iterator.hasNext()) {\r\n                    const next = iterator.getNext();\r\n                    const inRange = count < this.limit_ &&\r\n                        this.withinDirectionalStart(next) &&\r\n                        this.withinDirectionalEnd(next);\r\n                    if (inRange) {\r\n                        count++;\r\n                    }\r\n                    else {\r\n                        filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return this.rangedFilter_\r\n            .getIndexedFilter()\r\n            .updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    }\r\n    filtersNodes() {\r\n        return true;\r\n    }\r\n    getIndexedFilter() {\r\n        return this.rangedFilter_.getIndexedFilter();\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    fullLimitUpdateChild_(snap, childKey, childSnap, source, changeAccumulator) {\r\n        // TODO: rename all cache stuff etc to general snap terminology\r\n        let cmp;\r\n        if (this.reverse_) {\r\n            const indexCmp = this.index_.getCompare();\r\n            cmp = (a, b) => indexCmp(b, a);\r\n        }\r\n        else {\r\n            cmp = this.index_.getCompare();\r\n        }\r\n        const oldEventCache = snap;\r\n        assert(oldEventCache.numChildren() === this.limit_, '');\r\n        const newChildNamedNode = new NamedNode(childKey, childSnap);\r\n        const windowBoundary = this.reverse_\r\n            ? oldEventCache.getFirstChild(this.index_)\r\n            : oldEventCache.getLastChild(this.index_);\r\n        const inRange = this.rangedFilter_.matches(newChildNamedNode);\r\n        if (oldEventCache.hasChild(childKey)) {\r\n            const oldChildSnap = oldEventCache.getImmediateChild(childKey);\r\n            let nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);\r\n            while (nextChild != null &&\r\n                (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))) {\r\n                // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\r\n                // been applied to the limited filter yet. Ignore this next child which will be updated later in\r\n                // the limited filter...\r\n                nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);\r\n            }\r\n            const compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\r\n            const remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;\r\n            if (remainsInWindow) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildChanged(childKey, childSnap, oldChildSnap));\r\n                }\r\n                return oldEventCache.updateImmediateChild(childKey, childSnap);\r\n            }\r\n            else {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildRemoved(childKey, oldChildSnap));\r\n                }\r\n                const newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);\r\n                const nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);\r\n                if (nextChildInRange) {\r\n                    if (changeAccumulator != null) {\r\n                        changeAccumulator.trackChildChange(changeChildAdded(nextChild.name, nextChild.node));\r\n                    }\r\n                    return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);\r\n                }\r\n                else {\r\n                    return newEventCache;\r\n                }\r\n            }\r\n        }\r\n        else if (childSnap.isEmpty()) {\r\n            // we're deleting a node, but it was not in the window, so ignore it\r\n            return snap;\r\n        }\r\n        else if (inRange) {\r\n            if (cmp(windowBoundary, newChildNamedNode) >= 0) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildRemoved(windowBoundary.name, windowBoundary.node));\r\n                    changeAccumulator.trackChildChange(changeChildAdded(childKey, childSnap));\r\n                }\r\n                return oldEventCache\r\n                    .updateImmediateChild(childKey, childSnap)\r\n                    .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\r\n            }\r\n            else {\r\n                return snap;\r\n            }\r\n        }\r\n        else {\r\n            return snap;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\r\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\r\n * user-facing API level, so it is not done here.\r\n *\r\n * @internal\r\n */\r\nclass QueryParams {\r\n    constructor() {\r\n        this.limitSet_ = false;\r\n        this.startSet_ = false;\r\n        this.startNameSet_ = false;\r\n        this.startAfterSet_ = false; // can only be true if startSet_ is true\r\n        this.endSet_ = false;\r\n        this.endNameSet_ = false;\r\n        this.endBeforeSet_ = false; // can only be true if endSet_ is true\r\n        this.limit_ = 0;\r\n        this.viewFrom_ = '';\r\n        this.indexStartValue_ = null;\r\n        this.indexStartName_ = '';\r\n        this.indexEndValue_ = null;\r\n        this.indexEndName_ = '';\r\n        this.index_ = PRIORITY_INDEX;\r\n    }\r\n    hasStart() {\r\n        return this.startSet_;\r\n    }\r\n    /**\r\n     * @returns True if it would return from left.\r\n     */\r\n    isViewFromLeft() {\r\n        if (this.viewFrom_ === '') {\r\n            // limit(), rather than limitToFirst or limitToLast was called.\r\n            // This means that only one of startSet_ and endSet_ is true. Use them\r\n            // to calculate which side of the view to anchor to. If neither is set,\r\n            // anchor to the end.\r\n            return this.startSet_;\r\n        }\r\n        else {\r\n            return this.viewFrom_ === \"l\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT */;\r\n        }\r\n    }\r\n    /**\r\n     * Only valid to call if hasStart() returns true\r\n     */\r\n    getIndexStartValue() {\r\n        assert(this.startSet_, 'Only valid if start has been set');\r\n        return this.indexStartValue_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasStart() returns true.\r\n     * Returns the starting key name for the range defined by these query parameters\r\n     */\r\n    getIndexStartName() {\r\n        assert(this.startSet_, 'Only valid if start has been set');\r\n        if (this.startNameSet_) {\r\n            return this.indexStartName_;\r\n        }\r\n        else {\r\n            return MIN_NAME;\r\n        }\r\n    }\r\n    hasEnd() {\r\n        return this.endSet_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     */\r\n    getIndexEndValue() {\r\n        assert(this.endSet_, 'Only valid if end has been set');\r\n        return this.indexEndValue_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     * Returns the end key name for the range defined by these query parameters\r\n     */\r\n    getIndexEndName() {\r\n        assert(this.endSet_, 'Only valid if end has been set');\r\n        if (this.endNameSet_) {\r\n            return this.indexEndName_;\r\n        }\r\n        else {\r\n            return MAX_NAME;\r\n        }\r\n    }\r\n    hasLimit() {\r\n        return this.limitSet_;\r\n    }\r\n    /**\r\n     * @returns True if a limit has been set and it has been explicitly anchored\r\n     */\r\n    hasAnchoredLimit() {\r\n        return this.limitSet_ && this.viewFrom_ !== '';\r\n    }\r\n    /**\r\n     * Only valid to call if hasLimit() returns true\r\n     */\r\n    getLimit() {\r\n        assert(this.limitSet_, 'Only valid if limit has been set');\r\n        return this.limit_;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    loadsAllData() {\r\n        return !(this.startSet_ || this.endSet_ || this.limitSet_);\r\n    }\r\n    isDefault() {\r\n        return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\r\n    }\r\n    copy() {\r\n        const copy = new QueryParams();\r\n        copy.limitSet_ = this.limitSet_;\r\n        copy.limit_ = this.limit_;\r\n        copy.startSet_ = this.startSet_;\r\n        copy.startAfterSet_ = this.startAfterSet_;\r\n        copy.indexStartValue_ = this.indexStartValue_;\r\n        copy.startNameSet_ = this.startNameSet_;\r\n        copy.indexStartName_ = this.indexStartName_;\r\n        copy.endSet_ = this.endSet_;\r\n        copy.endBeforeSet_ = this.endBeforeSet_;\r\n        copy.indexEndValue_ = this.indexEndValue_;\r\n        copy.endNameSet_ = this.endNameSet_;\r\n        copy.indexEndName_ = this.indexEndName_;\r\n        copy.index_ = this.index_;\r\n        copy.viewFrom_ = this.viewFrom_;\r\n        return copy;\r\n    }\r\n}\r\nfunction queryParamsGetNodeFilter(queryParams) {\r\n    if (queryParams.loadsAllData()) {\r\n        return new IndexedFilter(queryParams.getIndex());\r\n    }\r\n    else if (queryParams.hasLimit()) {\r\n        return new LimitedFilter(queryParams);\r\n    }\r\n    else {\r\n        return new RangedFilter(queryParams);\r\n    }\r\n}\r\nfunction queryParamsLimitToFirst(queryParams, newLimit) {\r\n    const newParams = queryParams.copy();\r\n    newParams.limitSet_ = true;\r\n    newParams.limit_ = newLimit;\r\n    newParams.viewFrom_ = \"l\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT */;\r\n    return newParams;\r\n}\r\nfunction queryParamsLimitToLast(queryParams, newLimit) {\r\n    const newParams = queryParams.copy();\r\n    newParams.limitSet_ = true;\r\n    newParams.limit_ = newLimit;\r\n    newParams.viewFrom_ = \"r\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT */;\r\n    return newParams;\r\n}\r\nfunction queryParamsStartAt(queryParams, indexValue, key) {\r\n    const newParams = queryParams.copy();\r\n    newParams.startSet_ = true;\r\n    if (indexValue === undefined) {\r\n        indexValue = null;\r\n    }\r\n    newParams.indexStartValue_ = indexValue;\r\n    if (key != null) {\r\n        newParams.startNameSet_ = true;\r\n        newParams.indexStartName_ = key;\r\n    }\r\n    else {\r\n        newParams.startNameSet_ = false;\r\n        newParams.indexStartName_ = '';\r\n    }\r\n    return newParams;\r\n}\r\nfunction queryParamsStartAfter(queryParams, indexValue, key) {\r\n    let params;\r\n    if (queryParams.index_ === KEY_INDEX || !!key) {\r\n        params = queryParamsStartAt(queryParams, indexValue, key);\r\n    }\r\n    else {\r\n        params = queryParamsStartAt(queryParams, indexValue, MAX_NAME);\r\n    }\r\n    params.startAfterSet_ = true;\r\n    return params;\r\n}\r\nfunction queryParamsEndAt(queryParams, indexValue, key) {\r\n    const newParams = queryParams.copy();\r\n    newParams.endSet_ = true;\r\n    if (indexValue === undefined) {\r\n        indexValue = null;\r\n    }\r\n    newParams.indexEndValue_ = indexValue;\r\n    if (key !== undefined) {\r\n        newParams.endNameSet_ = true;\r\n        newParams.indexEndName_ = key;\r\n    }\r\n    else {\r\n        newParams.endNameSet_ = false;\r\n        newParams.indexEndName_ = '';\r\n    }\r\n    return newParams;\r\n}\r\nfunction queryParamsEndBefore(queryParams, indexValue, key) {\r\n    let params;\r\n    if (queryParams.index_ === KEY_INDEX || !!key) {\r\n        params = queryParamsEndAt(queryParams, indexValue, key);\r\n    }\r\n    else {\r\n        params = queryParamsEndAt(queryParams, indexValue, MIN_NAME);\r\n    }\r\n    params.endBeforeSet_ = true;\r\n    return params;\r\n}\r\nfunction queryParamsOrderBy(queryParams, index) {\r\n    const newParams = queryParams.copy();\r\n    newParams.index_ = index;\r\n    return newParams;\r\n}\r\n/**\r\n * Returns a set of REST query string parameters representing this query.\r\n *\r\n * @returns query string parameters\r\n */\r\nfunction queryParamsToRestQueryStringParameters(queryParams) {\r\n    const qs = {};\r\n    if (queryParams.isDefault()) {\r\n        return qs;\r\n    }\r\n    let orderBy;\r\n    if (queryParams.index_ === PRIORITY_INDEX) {\r\n        orderBy = \"$priority\" /* REST_QUERY_CONSTANTS.PRIORITY_INDEX */;\r\n    }\r\n    else if (queryParams.index_ === VALUE_INDEX) {\r\n        orderBy = \"$value\" /* REST_QUERY_CONSTANTS.VALUE_INDEX */;\r\n    }\r\n    else if (queryParams.index_ === KEY_INDEX) {\r\n        orderBy = \"$key\" /* REST_QUERY_CONSTANTS.KEY_INDEX */;\r\n    }\r\n    else {\r\n        assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\r\n        orderBy = queryParams.index_.toString();\r\n    }\r\n    qs[\"orderBy\" /* REST_QUERY_CONSTANTS.ORDER_BY */] = stringify(orderBy);\r\n    if (queryParams.startSet_) {\r\n        const startParam = queryParams.startAfterSet_\r\n            ? \"startAfter\" /* REST_QUERY_CONSTANTS.START_AFTER */\r\n            : \"startAt\" /* REST_QUERY_CONSTANTS.START_AT */;\r\n        qs[startParam] = stringify(queryParams.indexStartValue_);\r\n        if (queryParams.startNameSet_) {\r\n            qs[startParam] += ',' + stringify(queryParams.indexStartName_);\r\n        }\r\n    }\r\n    if (queryParams.endSet_) {\r\n        const endParam = queryParams.endBeforeSet_\r\n            ? \"endBefore\" /* REST_QUERY_CONSTANTS.END_BEFORE */\r\n            : \"endAt\" /* REST_QUERY_CONSTANTS.END_AT */;\r\n        qs[endParam] = stringify(queryParams.indexEndValue_);\r\n        if (queryParams.endNameSet_) {\r\n            qs[endParam] += ',' + stringify(queryParams.indexEndName_);\r\n        }\r\n    }\r\n    if (queryParams.limitSet_) {\r\n        if (queryParams.isViewFromLeft()) {\r\n            qs[\"limitToFirst\" /* REST_QUERY_CONSTANTS.LIMIT_TO_FIRST */] = queryParams.limit_;\r\n        }\r\n        else {\r\n            qs[\"limitToLast\" /* REST_QUERY_CONSTANTS.LIMIT_TO_LAST */] = queryParams.limit_;\r\n        }\r\n    }\r\n    return qs;\r\n}\r\nfunction queryParamsGetQueryObject(queryParams) {\r\n    const obj = {};\r\n    if (queryParams.startSet_) {\r\n        obj[\"sp\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE */] =\r\n            queryParams.indexStartValue_;\r\n        if (queryParams.startNameSet_) {\r\n            obj[\"sn\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME */] =\r\n                queryParams.indexStartName_;\r\n        }\r\n        obj[\"sin\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_START_IS_INCLUSIVE */] =\r\n            !queryParams.startAfterSet_;\r\n    }\r\n    if (queryParams.endSet_) {\r\n        obj[\"ep\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE */] = queryParams.indexEndValue_;\r\n        if (queryParams.endNameSet_) {\r\n            obj[\"en\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME */] = queryParams.indexEndName_;\r\n        }\r\n        obj[\"ein\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_END_IS_INCLUSIVE */] =\r\n            !queryParams.endBeforeSet_;\r\n    }\r\n    if (queryParams.limitSet_) {\r\n        obj[\"l\" /* WIRE_PROTOCOL_CONSTANTS.LIMIT */] = queryParams.limit_;\r\n        let viewFrom = queryParams.viewFrom_;\r\n        if (viewFrom === '') {\r\n            if (queryParams.isViewFromLeft()) {\r\n                viewFrom = \"l\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT */;\r\n            }\r\n            else {\r\n                viewFrom = \"r\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT */;\r\n            }\r\n        }\r\n        obj[\"vf\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM */] = viewFrom;\r\n    }\r\n    // For now, priority index is the default, so we only specify if it's some other index\r\n    if (queryParams.index_ !== PRIORITY_INDEX) {\r\n        obj[\"i\" /* WIRE_PROTOCOL_CONSTANTS.INDEX */] = queryParams.index_.toString();\r\n    }\r\n    return obj;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of ServerActions that communicates with the server via REST requests.\r\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\r\n * persistent connection (using WebSockets or long-polling)\r\n */\r\nclass ReadonlyRestClient extends ServerActions {\r\n    /**\r\n     * @param repoInfo_ - Data about the namespace we are connecting to\r\n     * @param onDataUpdate_ - A callback for new data from the server\r\n     */\r\n    constructor(repoInfo_, onDataUpdate_, authTokenProvider_, appCheckTokenProvider_) {\r\n        super();\r\n        this.repoInfo_ = repoInfo_;\r\n        this.onDataUpdate_ = onDataUpdate_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckTokenProvider_ = appCheckTokenProvider_;\r\n        /** @private {function(...[*])} */\r\n        this.log_ = logWrapper('p:rest:');\r\n        /**\r\n         * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\r\n         * that's been removed. :-/\r\n         */\r\n        this.listens_ = {};\r\n    }\r\n    reportStats(stats) {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    static getListenId_(query, tag) {\r\n        if (tag !== undefined) {\r\n            return 'tag$' + tag;\r\n        }\r\n        else {\r\n            assert(query._queryParams.isDefault(), \"should have a tag if it's not a default query.\");\r\n            return query._path.toString();\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    listen(query, currentHashFn, tag, onComplete) {\r\n        const pathString = query._path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\r\n        // Mark this listener so we can tell if it's removed.\r\n        const listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        const thisListen = {};\r\n        this.listens_[listenId] = thisListen;\r\n        const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\r\n        this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\r\n            let data = result;\r\n            if (error === 404) {\r\n                data = null;\r\n                error = null;\r\n            }\r\n            if (error === null) {\r\n                this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\r\n            }\r\n            if (safeGet(this.listens_, listenId) === thisListen) {\r\n                let status;\r\n                if (!error) {\r\n                    status = 'ok';\r\n                }\r\n                else if (error === 401) {\r\n                    status = 'permission_denied';\r\n                }\r\n                else {\r\n                    status = 'rest_error:' + error;\r\n                }\r\n                onComplete(status, null);\r\n            }\r\n        });\r\n    }\r\n    /** @inheritDoc */\r\n    unlisten(query, tag) {\r\n        const listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        delete this.listens_[listenId];\r\n    }\r\n    get(query) {\r\n        const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\r\n        const pathString = query._path.toString();\r\n        const deferred = new Deferred();\r\n        this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\r\n            let data = result;\r\n            if (error === 404) {\r\n                data = null;\r\n                error = null;\r\n            }\r\n            if (error === null) {\r\n                this.onDataUpdate_(pathString, data, \r\n                /*isMerge=*/ false, \r\n                /*tag=*/ null);\r\n                deferred.resolve(data);\r\n            }\r\n            else {\r\n                deferred.reject(new Error(data));\r\n            }\r\n        });\r\n        return deferred.promise;\r\n    }\r\n    /** @inheritDoc */\r\n    refreshAuthToken(token) {\r\n        // no-op since we just always call getToken.\r\n    }\r\n    /**\r\n     * Performs a REST request to the given path, with the provided query string parameters,\r\n     * and any auth credentials we have.\r\n     */\r\n    restRequest_(pathString, queryStringParameters = {}, callback) {\r\n        queryStringParameters['format'] = 'export';\r\n        return Promise.all([\r\n            this.authTokenProvider_.getToken(/*forceRefresh=*/ false),\r\n            this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)\r\n        ]).then(([authToken, appCheckToken]) => {\r\n            if (authToken && authToken.accessToken) {\r\n                queryStringParameters['auth'] = authToken.accessToken;\r\n            }\r\n            if (appCheckToken && appCheckToken.token) {\r\n                queryStringParameters['ac'] = appCheckToken.token;\r\n            }\r\n            const url = (this.repoInfo_.secure ? 'https://' : 'http://') +\r\n                this.repoInfo_.host +\r\n                pathString +\r\n                '?' +\r\n                'ns=' +\r\n                this.repoInfo_.namespace +\r\n                querystring(queryStringParameters);\r\n            this.log_('Sending REST request for ' + url);\r\n            const xhr = new XMLHttpRequest();\r\n            xhr.onreadystatechange = () => {\r\n                if (callback && xhr.readyState === 4) {\r\n                    this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);\r\n                    let res = null;\r\n                    if (xhr.status >= 200 && xhr.status < 300) {\r\n                        try {\r\n                            res = jsonEval(xhr.responseText);\r\n                        }\r\n                        catch (e) {\r\n                            warn('Failed to parse JSON response for ' +\r\n                                url +\r\n                                ': ' +\r\n                                xhr.responseText);\r\n                        }\r\n                        callback(null, res);\r\n                    }\r\n                    else {\r\n                        // 401 and 404 are expected.\r\n                        if (xhr.status !== 401 && xhr.status !== 404) {\r\n                            warn('Got unsuccessful REST response for ' +\r\n                                url +\r\n                                ' Status: ' +\r\n                                xhr.status);\r\n                        }\r\n                        callback(xhr.status);\r\n                    }\r\n                    callback = null;\r\n                }\r\n            };\r\n            xhr.open('GET', url, /*asynchronous=*/ true);\r\n            xhr.send();\r\n        });\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\r\n */\r\nclass SnapshotHolder {\r\n    constructor() {\r\n        this.rootNode_ = ChildrenNode.EMPTY_NODE;\r\n    }\r\n    getNode(path) {\r\n        return this.rootNode_.getChild(path);\r\n    }\r\n    updateSnapshot(path, newSnapshotNode) {\r\n        this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newSparseSnapshotTree() {\r\n    return {\r\n        value: null,\r\n        children: new Map()\r\n    };\r\n}\r\n/**\r\n * Stores the given node at the specified path. If there is already a node\r\n * at a shallower path, it merges the new data into that snapshot node.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @param data - The new data, or null.\r\n */\r\nfunction sparseSnapshotTreeRemember(sparseSnapshotTree, path, data) {\r\n    if (pathIsEmpty(path)) {\r\n        sparseSnapshotTree.value = data;\r\n        sparseSnapshotTree.children.clear();\r\n    }\r\n    else if (sparseSnapshotTree.value !== null) {\r\n        sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(path);\r\n        if (!sparseSnapshotTree.children.has(childKey)) {\r\n            sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\r\n        }\r\n        const child = sparseSnapshotTree.children.get(childKey);\r\n        path = pathPopFront(path);\r\n        sparseSnapshotTreeRemember(child, path, data);\r\n    }\r\n}\r\n/**\r\n * Purge the data at path from the cache.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @returns True if this node should now be removed.\r\n */\r\nfunction sparseSnapshotTreeForget(sparseSnapshotTree, path) {\r\n    if (pathIsEmpty(path)) {\r\n        sparseSnapshotTree.value = null;\r\n        sparseSnapshotTree.children.clear();\r\n        return true;\r\n    }\r\n    else {\r\n        if (sparseSnapshotTree.value !== null) {\r\n            if (sparseSnapshotTree.value.isLeafNode()) {\r\n                // We're trying to forget a node that doesn't exist\r\n                return false;\r\n            }\r\n            else {\r\n                const value = sparseSnapshotTree.value;\r\n                sparseSnapshotTree.value = null;\r\n                value.forEachChild(PRIORITY_INDEX, (key, tree) => {\r\n                    sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\r\n                });\r\n                return sparseSnapshotTreeForget(sparseSnapshotTree, path);\r\n            }\r\n        }\r\n        else if (sparseSnapshotTree.children.size > 0) {\r\n            const childKey = pathGetFront(path);\r\n            path = pathPopFront(path);\r\n            if (sparseSnapshotTree.children.has(childKey)) {\r\n                const safeToRemove = sparseSnapshotTreeForget(sparseSnapshotTree.children.get(childKey), path);\r\n                if (safeToRemove) {\r\n                    sparseSnapshotTree.children.delete(childKey);\r\n                }\r\n            }\r\n            return sparseSnapshotTree.children.size === 0;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Recursively iterates through all of the stored tree and calls the\r\n * callback on each one.\r\n *\r\n * @param prefixPath - Path to look up node for.\r\n * @param func - The function to invoke for each tree.\r\n */\r\nfunction sparseSnapshotTreeForEachTree(sparseSnapshotTree, prefixPath, func) {\r\n    if (sparseSnapshotTree.value !== null) {\r\n        func(prefixPath, sparseSnapshotTree.value);\r\n    }\r\n    else {\r\n        sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\r\n            const path = new Path(prefixPath.toString() + '/' + key);\r\n            sparseSnapshotTreeForEachTree(tree, path, func);\r\n        });\r\n    }\r\n}\r\n/**\r\n * Iterates through each immediate child and triggers the callback.\r\n * Only seems to be used in tests.\r\n *\r\n * @param func - The function to invoke for each child.\r\n */\r\nfunction sparseSnapshotTreeForEachChild(sparseSnapshotTree, func) {\r\n    sparseSnapshotTree.children.forEach((tree, key) => {\r\n        func(key, tree);\r\n    });\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns the delta from the previous call to get stats.\r\n *\r\n * @param collection_ - The collection to \"listen\" to.\r\n */\r\nclass StatsListener {\r\n    constructor(collection_) {\r\n        this.collection_ = collection_;\r\n        this.last_ = null;\r\n    }\r\n    get() {\r\n        const newStats = this.collection_.get();\r\n        const delta = Object.assign({}, newStats);\r\n        if (this.last_) {\r\n            each(this.last_, (stat, value) => {\r\n                delta[stat] = delta[stat] - value;\r\n            });\r\n        }\r\n        this.last_ = newStats;\r\n        return delta;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\r\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\r\n// seconds to try to ensure the Firebase connection is established / settled.\r\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\r\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\r\n// We'll continue to report stats on average every 5 minutes.\r\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\r\nclass StatsReporter {\r\n    constructor(collection, server_) {\r\n        this.server_ = server_;\r\n        this.statsToReport_ = {};\r\n        this.statsListener_ = new StatsListener(collection);\r\n        const timeout = FIRST_STATS_MIN_TIME +\r\n            (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\r\n    }\r\n    reportStats_() {\r\n        const stats = this.statsListener_.get();\r\n        const reportedStats = {};\r\n        let haveStatsToReport = false;\r\n        each(stats, (stat, value) => {\r\n            if (value > 0 && contains(this.statsToReport_, stat)) {\r\n                reportedStats[stat] = value;\r\n                haveStatsToReport = true;\r\n            }\r\n        });\r\n        if (haveStatsToReport) {\r\n            this.server_.reportStats(reportedStats);\r\n        }\r\n        // queue our next run.\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n *\r\n * @enum\r\n */\r\nvar OperationType;\r\n(function (OperationType) {\r\n    OperationType[OperationType[\"OVERWRITE\"] = 0] = \"OVERWRITE\";\r\n    OperationType[OperationType[\"MERGE\"] = 1] = \"MERGE\";\r\n    OperationType[OperationType[\"ACK_USER_WRITE\"] = 2] = \"ACK_USER_WRITE\";\r\n    OperationType[OperationType[\"LISTEN_COMPLETE\"] = 3] = \"LISTEN_COMPLETE\";\r\n})(OperationType || (OperationType = {}));\r\nfunction newOperationSourceUser() {\r\n    return {\r\n        fromUser: true,\r\n        fromServer: false,\r\n        queryId: null,\r\n        tagged: false\r\n    };\r\n}\r\nfunction newOperationSourceServer() {\r\n    return {\r\n        fromUser: false,\r\n        fromServer: true,\r\n        queryId: null,\r\n        tagged: false\r\n    };\r\n}\r\nfunction newOperationSourceServerTaggedQuery(queryId) {\r\n    return {\r\n        fromUser: false,\r\n        fromServer: true,\r\n        queryId,\r\n        tagged: true\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass AckUserWrite {\r\n    /**\r\n     * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\r\n     */\r\n    constructor(\r\n    /** @inheritDoc */ path, \r\n    /** @inheritDoc */ affectedTree, \r\n    /** @inheritDoc */ revert) {\r\n        this.path = path;\r\n        this.affectedTree = affectedTree;\r\n        this.revert = revert;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.ACK_USER_WRITE;\r\n        /** @inheritDoc */\r\n        this.source = newOperationSourceUser();\r\n    }\r\n    operationForChild(childName) {\r\n        if (!pathIsEmpty(this.path)) {\r\n            assert(pathGetFront(this.path) === childName, 'operationForChild called for unrelated child.');\r\n            return new AckUserWrite(pathPopFront(this.path), this.affectedTree, this.revert);\r\n        }\r\n        else if (this.affectedTree.value != null) {\r\n            assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');\r\n            // All child locations are affected as well; just return same operation.\r\n            return this;\r\n        }\r\n        else {\r\n            const childTree = this.affectedTree.subtree(new Path(childName));\r\n            return new AckUserWrite(newEmptyPath(), childTree, this.revert);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ListenComplete {\r\n    constructor(source, path) {\r\n        this.source = source;\r\n        this.path = path;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.LISTEN_COMPLETE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            return new ListenComplete(this.source, newEmptyPath());\r\n        }\r\n        else {\r\n            return new ListenComplete(this.source, pathPopFront(this.path));\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Overwrite {\r\n    constructor(source, path, snap) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.snap = snap;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.OVERWRITE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            return new Overwrite(this.source, newEmptyPath(), this.snap.getImmediateChild(childName));\r\n        }\r\n        else {\r\n            return new Overwrite(this.source, pathPopFront(this.path), this.snap);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Merge {\r\n    constructor(\r\n    /** @inheritDoc */ source, \r\n    /** @inheritDoc */ path, \r\n    /** @inheritDoc */ children) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.children = children;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.MERGE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            const childTree = this.children.subtree(new Path(childName));\r\n            if (childTree.isEmpty()) {\r\n                // This child is unaffected\r\n                return null;\r\n            }\r\n            else if (childTree.value) {\r\n                // We have a snapshot for the child in question.  This becomes an overwrite of the child.\r\n                return new Overwrite(this.source, newEmptyPath(), childTree.value);\r\n            }\r\n            else {\r\n                // This is a merge at a deeper level\r\n                return new Merge(this.source, newEmptyPath(), childTree);\r\n            }\r\n        }\r\n        else {\r\n            assert(pathGetFront(this.path) === childName, \"Can't get a merge for a child not on the path of the operation\");\r\n            return new Merge(this.source, pathPopFront(this.path), this.children);\r\n        }\r\n    }\r\n    toString() {\r\n        return ('Operation(' +\r\n            this.path +\r\n            ': ' +\r\n            this.source.toString() +\r\n            ' merge: ' +\r\n            this.children.toString() +\r\n            ')');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\r\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\r\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\r\n * whether a node potentially had children removed due to a filter.\r\n */\r\nclass CacheNode {\r\n    constructor(node_, fullyInitialized_, filtered_) {\r\n        this.node_ = node_;\r\n        this.fullyInitialized_ = fullyInitialized_;\r\n        this.filtered_ = filtered_;\r\n    }\r\n    /**\r\n     * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\r\n     */\r\n    isFullyInitialized() {\r\n        return this.fullyInitialized_;\r\n    }\r\n    /**\r\n     * Returns whether this node is potentially missing children due to a filter applied to the node\r\n     */\r\n    isFiltered() {\r\n        return this.filtered_;\r\n    }\r\n    isCompleteForPath(path) {\r\n        if (pathIsEmpty(path)) {\r\n            return this.isFullyInitialized() && !this.filtered_;\r\n        }\r\n        const childKey = pathGetFront(path);\r\n        return this.isCompleteForChild(childKey);\r\n    }\r\n    isCompleteForChild(key) {\r\n        return ((this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key));\r\n    }\r\n    getNode() {\r\n        return this.node_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\r\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\r\n * for details.\r\n *\r\n */\r\nclass EventGenerator {\r\n    constructor(query_) {\r\n        this.query_ = query_;\r\n        this.index_ = this.query_._queryParams.getIndex();\r\n    }\r\n}\r\n/**\r\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\r\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\r\n *\r\n * Notes:\r\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\r\n *    our index.\r\n *  - prevName will be calculated based on the index ordering.\r\n */\r\nfunction eventGeneratorGenerateEventsForChanges(eventGenerator, changes, eventCache, eventRegistrations) {\r\n    const events = [];\r\n    const moves = [];\r\n    changes.forEach(change => {\r\n        if (change.type === \"child_changed\" /* ChangeType.CHILD_CHANGED */ &&\r\n            eventGenerator.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {\r\n            moves.push(changeChildMoved(change.childName, change.snapshotNode));\r\n        }\r\n    });\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_removed\" /* ChangeType.CHILD_REMOVED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_added\" /* ChangeType.CHILD_ADDED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_moved\" /* ChangeType.CHILD_MOVED */, moves, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_changed\" /* ChangeType.CHILD_CHANGED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"value\" /* ChangeType.VALUE */, changes, eventRegistrations, eventCache);\r\n    return events;\r\n}\r\n/**\r\n * Given changes of a single change type, generate the corresponding events.\r\n */\r\nfunction eventGeneratorGenerateEventsForType(eventGenerator, events, eventType, changes, registrations, eventCache) {\r\n    const filteredChanges = changes.filter(change => change.type === eventType);\r\n    filteredChanges.sort((a, b) => eventGeneratorCompareChanges(eventGenerator, a, b));\r\n    filteredChanges.forEach(change => {\r\n        const materializedChange = eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache);\r\n        registrations.forEach(registration => {\r\n            if (registration.respondsTo(change.type)) {\r\n                events.push(registration.createEvent(materializedChange, eventGenerator.query_));\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache) {\r\n    if (change.type === 'value' || change.type === 'child_removed') {\r\n        return change;\r\n    }\r\n    else {\r\n        change.prevName = eventCache.getPredecessorChildName(change.childName, change.snapshotNode, eventGenerator.index_);\r\n        return change;\r\n    }\r\n}\r\nfunction eventGeneratorCompareChanges(eventGenerator, a, b) {\r\n    if (a.childName == null || b.childName == null) {\r\n        throw assertionError('Should only compare child_ events.');\r\n    }\r\n    const aWrapped = new NamedNode(a.childName, a.snapshotNode);\r\n    const bWrapped = new NamedNode(b.childName, b.snapshotNode);\r\n    return eventGenerator.index_.compare(aWrapped, bWrapped);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newViewCache(eventCache, serverCache) {\r\n    return { eventCache, serverCache };\r\n}\r\nfunction viewCacheUpdateEventSnap(viewCache, eventSnap, complete, filtered) {\r\n    return newViewCache(new CacheNode(eventSnap, complete, filtered), viewCache.serverCache);\r\n}\r\nfunction viewCacheUpdateServerSnap(viewCache, serverSnap, complete, filtered) {\r\n    return newViewCache(viewCache.eventCache, new CacheNode(serverSnap, complete, filtered));\r\n}\r\nfunction viewCacheGetCompleteEventSnap(viewCache) {\r\n    return viewCache.eventCache.isFullyInitialized()\r\n        ? viewCache.eventCache.getNode()\r\n        : null;\r\n}\r\nfunction viewCacheGetCompleteServerSnap(viewCache) {\r\n    return viewCache.serverCache.isFullyInitialized()\r\n        ? viewCache.serverCache.getNode()\r\n        : null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet emptyChildrenSingleton;\r\n/**\r\n * Singleton empty children collection.\r\n *\r\n */\r\nconst EmptyChildren = () => {\r\n    if (!emptyChildrenSingleton) {\r\n        emptyChildrenSingleton = new SortedMap(stringCompare);\r\n    }\r\n    return emptyChildrenSingleton;\r\n};\r\n/**\r\n * A tree with immutable elements.\r\n */\r\nclass ImmutableTree {\r\n    constructor(value, children = EmptyChildren()) {\r\n        this.value = value;\r\n        this.children = children;\r\n    }\r\n    static fromObject(obj) {\r\n        let tree = new ImmutableTree(null);\r\n        each(obj, (childPath, childSnap) => {\r\n            tree = tree.set(new Path(childPath), childSnap);\r\n        });\r\n        return tree;\r\n    }\r\n    /**\r\n     * True if the value is empty and there are no children\r\n     */\r\n    isEmpty() {\r\n        return this.value === null && this.children.isEmpty();\r\n    }\r\n    /**\r\n     * Given a path and predicate, return the first node and the path to that node\r\n     * where the predicate returns true.\r\n     *\r\n     * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\r\n     * objects on the way back out, it may be better to pass down a pathSoFar obj.\r\n     *\r\n     * @param relativePath - The remainder of the path\r\n     * @param predicate - The predicate to satisfy to return a node\r\n     */\r\n    findRootMostMatchingPathAndValue(relativePath, predicate) {\r\n        if (this.value != null && predicate(this.value)) {\r\n            return { path: newEmptyPath(), value: this.value };\r\n        }\r\n        else {\r\n            if (pathIsEmpty(relativePath)) {\r\n                return null;\r\n            }\r\n            else {\r\n                const front = pathGetFront(relativePath);\r\n                const child = this.children.get(front);\r\n                if (child !== null) {\r\n                    const childExistingPathAndValue = child.findRootMostMatchingPathAndValue(pathPopFront(relativePath), predicate);\r\n                    if (childExistingPathAndValue != null) {\r\n                        const fullPath = pathChild(new Path(front), childExistingPathAndValue.path);\r\n                        return { path: fullPath, value: childExistingPathAndValue.value };\r\n                    }\r\n                    else {\r\n                        return null;\r\n                    }\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Find, if it exists, the shortest subpath of the given path that points a defined\r\n     * value in the tree\r\n     */\r\n    findRootMostValueAndPath(relativePath) {\r\n        return this.findRootMostMatchingPathAndValue(relativePath, () => true);\r\n    }\r\n    /**\r\n     * @returns The subtree at the given path\r\n     */\r\n    subtree(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return this;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const childTree = this.children.get(front);\r\n            if (childTree !== null) {\r\n                return childTree.subtree(pathPopFront(relativePath));\r\n            }\r\n            else {\r\n                return new ImmutableTree(null);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Sets a value at the specified path.\r\n     *\r\n     * @param relativePath - Path to set value at.\r\n     * @param toSet - Value to set.\r\n     * @returns Resulting tree.\r\n     */\r\n    set(relativePath, toSet) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return new ImmutableTree(toSet, this.children);\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front) || new ImmutableTree(null);\r\n            const newChild = child.set(pathPopFront(relativePath), toSet);\r\n            const newChildren = this.children.insert(front, newChild);\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    }\r\n    /**\r\n     * Removes the value at the specified path.\r\n     *\r\n     * @param relativePath - Path to value to remove.\r\n     * @returns Resulting tree.\r\n     */\r\n    remove(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            if (this.children.isEmpty()) {\r\n                return new ImmutableTree(null);\r\n            }\r\n            else {\r\n                return new ImmutableTree(null, this.children);\r\n            }\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front);\r\n            if (child) {\r\n                const newChild = child.remove(pathPopFront(relativePath));\r\n                let newChildren;\r\n                if (newChild.isEmpty()) {\r\n                    newChildren = this.children.remove(front);\r\n                }\r\n                else {\r\n                    newChildren = this.children.insert(front, newChild);\r\n                }\r\n                if (this.value === null && newChildren.isEmpty()) {\r\n                    return new ImmutableTree(null);\r\n                }\r\n                else {\r\n                    return new ImmutableTree(this.value, newChildren);\r\n                }\r\n            }\r\n            else {\r\n                return this;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Gets a value from the tree.\r\n     *\r\n     * @param relativePath - Path to get value for.\r\n     * @returns Value at path, or null.\r\n     */\r\n    get(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return this.value;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front);\r\n            if (child) {\r\n                return child.get(pathPopFront(relativePath));\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Replace the subtree at the specified path with the given new tree.\r\n     *\r\n     * @param relativePath - Path to replace subtree for.\r\n     * @param newTree - New tree.\r\n     * @returns Resulting tree.\r\n     */\r\n    setTree(relativePath, newTree) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return newTree;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front) || new ImmutableTree(null);\r\n            const newChild = child.setTree(pathPopFront(relativePath), newTree);\r\n            let newChildren;\r\n            if (newChild.isEmpty()) {\r\n                newChildren = this.children.remove(front);\r\n            }\r\n            else {\r\n                newChildren = this.children.insert(front, newChild);\r\n            }\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    }\r\n    /**\r\n     * Performs a depth first fold on this tree. Transforms a tree into a single\r\n     * value, given a function that operates on the path to a node, an optional\r\n     * current value, and a map of child names to folded subtrees\r\n     */\r\n    fold(fn) {\r\n        return this.fold_(newEmptyPath(), fn);\r\n    }\r\n    /**\r\n     * Recursive helper for public-facing fold() method\r\n     */\r\n    fold_(pathSoFar, fn) {\r\n        const accum = {};\r\n        this.children.inorderTraversal((childKey, childTree) => {\r\n            accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\r\n        });\r\n        return fn(pathSoFar, this.value, accum);\r\n    }\r\n    /**\r\n     * Find the first matching value on the given path. Return the result of applying f to it.\r\n     */\r\n    findOnPath(path, f) {\r\n        return this.findOnPath_(path, newEmptyPath(), f);\r\n    }\r\n    findOnPath_(pathToFollow, pathSoFar, f) {\r\n        const result = this.value ? f(pathSoFar, this.value) : false;\r\n        if (result) {\r\n            return result;\r\n        }\r\n        else {\r\n            if (pathIsEmpty(pathToFollow)) {\r\n                return null;\r\n            }\r\n            else {\r\n                const front = pathGetFront(pathToFollow);\r\n                const nextChild = this.children.get(front);\r\n                if (nextChild) {\r\n                    return nextChild.findOnPath_(pathPopFront(pathToFollow), pathChild(pathSoFar, front), f);\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    foreachOnPath(path, f) {\r\n        return this.foreachOnPath_(path, newEmptyPath(), f);\r\n    }\r\n    foreachOnPath_(pathToFollow, currentRelativePath, f) {\r\n        if (pathIsEmpty(pathToFollow)) {\r\n            return this;\r\n        }\r\n        else {\r\n            if (this.value) {\r\n                f(currentRelativePath, this.value);\r\n            }\r\n            const front = pathGetFront(pathToFollow);\r\n            const nextChild = this.children.get(front);\r\n            if (nextChild) {\r\n                return nextChild.foreachOnPath_(pathPopFront(pathToFollow), pathChild(currentRelativePath, front), f);\r\n            }\r\n            else {\r\n                return new ImmutableTree(null);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Calls the given function for each node in the tree that has a value.\r\n     *\r\n     * @param f - A function to be called with the path from the root of the tree to\r\n     * a node, and the value at that node. Called in depth-first order.\r\n     */\r\n    foreach(f) {\r\n        this.foreach_(newEmptyPath(), f);\r\n    }\r\n    foreach_(currentRelativePath, f) {\r\n        this.children.inorderTraversal((childName, childTree) => {\r\n            childTree.foreach_(pathChild(currentRelativePath, childName), f);\r\n        });\r\n        if (this.value) {\r\n            f(currentRelativePath, this.value);\r\n        }\r\n    }\r\n    foreachChild(f) {\r\n        this.children.inorderTraversal((childName, childTree) => {\r\n            if (childTree.value) {\r\n                f(childName, childTree.value);\r\n            }\r\n        });\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\r\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\r\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\r\n * to reflect the write added.\r\n */\r\nclass CompoundWrite {\r\n    constructor(writeTree_) {\r\n        this.writeTree_ = writeTree_;\r\n    }\r\n    static empty() {\r\n        return new CompoundWrite(new ImmutableTree(null));\r\n    }\r\n}\r\nfunction compoundWriteAddWrite(compoundWrite, path, node) {\r\n    if (pathIsEmpty(path)) {\r\n        return new CompoundWrite(new ImmutableTree(node));\r\n    }\r\n    else {\r\n        const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\r\n        if (rootmost != null) {\r\n            const rootMostPath = rootmost.path;\r\n            let value = rootmost.value;\r\n            const relativePath = newRelativePath(rootMostPath, path);\r\n            value = value.updateChild(relativePath, node);\r\n            return new CompoundWrite(compoundWrite.writeTree_.set(rootMostPath, value));\r\n        }\r\n        else {\r\n            const subtree = new ImmutableTree(node);\r\n            const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\r\n            return new CompoundWrite(newWriteTree);\r\n        }\r\n    }\r\n}\r\nfunction compoundWriteAddWrites(compoundWrite, path, updates) {\r\n    let newWrite = compoundWrite;\r\n    each(updates, (childKey, node) => {\r\n        newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\r\n    });\r\n    return newWrite;\r\n}\r\n/**\r\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\r\n * location, which must be removed by calling this method with that path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to remove.\r\n * @param path - The path at which a write and all deeper writes should be removed\r\n * @returns The new CompoundWrite with the removed path\r\n */\r\nfunction compoundWriteRemoveWrite(compoundWrite, path) {\r\n    if (pathIsEmpty(path)) {\r\n        return CompoundWrite.empty();\r\n    }\r\n    else {\r\n        const newWriteTree = compoundWrite.writeTree_.setTree(path, new ImmutableTree(null));\r\n        return new CompoundWrite(newWriteTree);\r\n    }\r\n}\r\n/**\r\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\r\n * considered \"complete\".\r\n *\r\n * @param compoundWrite - The CompoundWrite to check.\r\n * @param path - The path to check for\r\n * @returns Whether there is a complete write at that path\r\n */\r\nfunction compoundWriteHasCompleteWrite(compoundWrite, path) {\r\n    return compoundWriteGetCompleteNode(compoundWrite, path) != null;\r\n}\r\n/**\r\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\r\n * writes from deeper paths, but will return child nodes from a more shallow path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get the node from.\r\n * @param path - The path to get a complete write\r\n * @returns The node if complete at that path, or null otherwise.\r\n */\r\nfunction compoundWriteGetCompleteNode(compoundWrite, path) {\r\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\r\n    if (rootmost != null) {\r\n        return compoundWrite.writeTree_\r\n            .get(rootmost.path)\r\n            .getChild(newRelativePath(rootmost.path, path));\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * Returns all children that are guaranteed to be a complete overwrite.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get children from.\r\n * @returns A list of all complete children.\r\n */\r\nfunction compoundWriteGetCompleteChildren(compoundWrite) {\r\n    const children = [];\r\n    const node = compoundWrite.writeTree_.value;\r\n    if (node != null) {\r\n        // If it's a leaf node, it has no children; so nothing to do.\r\n        if (!node.isLeafNode()) {\r\n            node.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n                children.push(new NamedNode(childName, childNode));\r\n            });\r\n        }\r\n    }\r\n    else {\r\n        compoundWrite.writeTree_.children.inorderTraversal((childName, childTree) => {\r\n            if (childTree.value != null) {\r\n                children.push(new NamedNode(childName, childTree.value));\r\n            }\r\n        });\r\n    }\r\n    return children;\r\n}\r\nfunction compoundWriteChildCompoundWrite(compoundWrite, path) {\r\n    if (pathIsEmpty(path)) {\r\n        return compoundWrite;\r\n    }\r\n    else {\r\n        const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\r\n        if (shadowingNode != null) {\r\n            return new CompoundWrite(new ImmutableTree(shadowingNode));\r\n        }\r\n        else {\r\n            return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\r\n * @returns Whether this CompoundWrite is empty\r\n */\r\nfunction compoundWriteIsEmpty(compoundWrite) {\r\n    return compoundWrite.writeTree_.isEmpty();\r\n}\r\n/**\r\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\r\n * node\r\n * @param node - The node to apply this CompoundWrite to\r\n * @returns The node with all writes applied\r\n */\r\nfunction compoundWriteApply(compoundWrite, node) {\r\n    return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\r\n}\r\nfunction applySubtreeWrite(relativePath, writeTree, node) {\r\n    if (writeTree.value != null) {\r\n        // Since there a write is always a leaf, we're done here\r\n        return node.updateChild(relativePath, writeTree.value);\r\n    }\r\n    else {\r\n        let priorityWrite = null;\r\n        writeTree.children.inorderTraversal((childKey, childTree) => {\r\n            if (childKey === '.priority') {\r\n                // Apply priorities at the end so we don't update priorities for either empty nodes or forget\r\n                // to apply priorities to empty nodes that are later filled\r\n                assert(childTree.value !== null, 'Priority writes must always be leaf nodes');\r\n                priorityWrite = childTree.value;\r\n            }\r\n            else {\r\n                node = applySubtreeWrite(pathChild(relativePath, childKey), childTree, node);\r\n            }\r\n        });\r\n        // If there was a priority write, we only apply it if the node is not empty\r\n        if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\r\n            node = node.updateChild(pathChild(relativePath, '.priority'), priorityWrite);\r\n        }\r\n        return node;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\r\n *\r\n */\r\nfunction writeTreeChildWrites(writeTree, path) {\r\n    return newWriteTreeRef(path, writeTree);\r\n}\r\n/**\r\n * Record a new overwrite from user code.\r\n *\r\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\r\n */\r\nfunction writeTreeAddOverwrite(writeTree, path, snap, writeId, visible) {\r\n    assert(writeId > writeTree.lastWriteId, 'Stacking an older write on top of newer ones');\r\n    if (visible === undefined) {\r\n        visible = true;\r\n    }\r\n    writeTree.allWrites.push({\r\n        path,\r\n        snap,\r\n        writeId,\r\n        visible\r\n    });\r\n    if (visible) {\r\n        writeTree.visibleWrites = compoundWriteAddWrite(writeTree.visibleWrites, path, snap);\r\n    }\r\n    writeTree.lastWriteId = writeId;\r\n}\r\n/**\r\n * Record a new merge from user code.\r\n */\r\nfunction writeTreeAddMerge(writeTree, path, changedChildren, writeId) {\r\n    assert(writeId > writeTree.lastWriteId, 'Stacking an older merge on top of newer ones');\r\n    writeTree.allWrites.push({\r\n        path,\r\n        children: changedChildren,\r\n        writeId,\r\n        visible: true\r\n    });\r\n    writeTree.visibleWrites = compoundWriteAddWrites(writeTree.visibleWrites, path, changedChildren);\r\n    writeTree.lastWriteId = writeId;\r\n}\r\nfunction writeTreeGetWrite(writeTree, writeId) {\r\n    for (let i = 0; i < writeTree.allWrites.length; i++) {\r\n        const record = writeTree.allWrites[i];\r\n        if (record.writeId === writeId) {\r\n            return record;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\r\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\r\n *\r\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\r\n * events as a result).\r\n */\r\nfunction writeTreeRemoveWrite(writeTree, writeId) {\r\n    // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\r\n    // out of order.\r\n    //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\r\n    //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\r\n    const idx = writeTree.allWrites.findIndex(s => {\r\n        return s.writeId === writeId;\r\n    });\r\n    assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\r\n    const writeToRemove = writeTree.allWrites[idx];\r\n    writeTree.allWrites.splice(idx, 1);\r\n    let removedWriteWasVisible = writeToRemove.visible;\r\n    let removedWriteOverlapsWithOtherWrites = false;\r\n    let i = writeTree.allWrites.length - 1;\r\n    while (removedWriteWasVisible && i >= 0) {\r\n        const currentWrite = writeTree.allWrites[i];\r\n        if (currentWrite.visible) {\r\n            if (i >= idx &&\r\n                writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)) {\r\n                // The removed write was completely shadowed by a subsequent write.\r\n                removedWriteWasVisible = false;\r\n            }\r\n            else if (pathContains(writeToRemove.path, currentWrite.path)) {\r\n                // Either we're covering some writes or they're covering part of us (depending on which came first).\r\n                removedWriteOverlapsWithOtherWrites = true;\r\n            }\r\n        }\r\n        i--;\r\n    }\r\n    if (!removedWriteWasVisible) {\r\n        return false;\r\n    }\r\n    else if (removedWriteOverlapsWithOtherWrites) {\r\n        // There's some shadowing going on. Just rebuild the visible writes from scratch.\r\n        writeTreeResetTree_(writeTree);\r\n        return true;\r\n    }\r\n    else {\r\n        // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\r\n        if (writeToRemove.snap) {\r\n            writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, writeToRemove.path);\r\n        }\r\n        else {\r\n            const children = writeToRemove.children;\r\n            each(children, (childName) => {\r\n                writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, pathChild(writeToRemove.path, childName));\r\n            });\r\n        }\r\n        return true;\r\n    }\r\n}\r\nfunction writeTreeRecordContainsPath_(writeRecord, path) {\r\n    if (writeRecord.snap) {\r\n        return pathContains(writeRecord.path, path);\r\n    }\r\n    else {\r\n        for (const childName in writeRecord.children) {\r\n            if (writeRecord.children.hasOwnProperty(childName) &&\r\n                pathContains(pathChild(writeRecord.path, childName), path)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\r\n */\r\nfunction writeTreeResetTree_(writeTree) {\r\n    writeTree.visibleWrites = writeTreeLayerTree_(writeTree.allWrites, writeTreeDefaultFilter_, newEmptyPath());\r\n    if (writeTree.allWrites.length > 0) {\r\n        writeTree.lastWriteId =\r\n            writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\r\n    }\r\n    else {\r\n        writeTree.lastWriteId = -1;\r\n    }\r\n}\r\n/**\r\n * The default filter used when constructing the tree. Keep everything that's visible.\r\n */\r\nfunction writeTreeDefaultFilter_(write) {\r\n    return write.visible;\r\n}\r\n/**\r\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\r\n * event data at that path.\r\n */\r\nfunction writeTreeLayerTree_(writes, filter, treeRoot) {\r\n    let compoundWrite = CompoundWrite.empty();\r\n    for (let i = 0; i < writes.length; ++i) {\r\n        const write = writes[i];\r\n        // Theory, a later set will either:\r\n        // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\r\n        // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\r\n        if (filter(write)) {\r\n            const writePath = write.path;\r\n            let relativePath;\r\n            if (write.snap) {\r\n                if (pathContains(treeRoot, writePath)) {\r\n                    relativePath = newRelativePath(treeRoot, writePath);\r\n                    compoundWrite = compoundWriteAddWrite(compoundWrite, relativePath, write.snap);\r\n                }\r\n                else if (pathContains(writePath, treeRoot)) {\r\n                    relativePath = newRelativePath(writePath, treeRoot);\r\n                    compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), write.snap.getChild(relativePath));\r\n                }\r\n                else ;\r\n            }\r\n            else if (write.children) {\r\n                if (pathContains(treeRoot, writePath)) {\r\n                    relativePath = newRelativePath(treeRoot, writePath);\r\n                    compoundWrite = compoundWriteAddWrites(compoundWrite, relativePath, write.children);\r\n                }\r\n                else if (pathContains(writePath, treeRoot)) {\r\n                    relativePath = newRelativePath(writePath, treeRoot);\r\n                    if (pathIsEmpty(relativePath)) {\r\n                        compoundWrite = compoundWriteAddWrites(compoundWrite, newEmptyPath(), write.children);\r\n                    }\r\n                    else {\r\n                        const child = safeGet(write.children, pathGetFront(relativePath));\r\n                        if (child) {\r\n                            // There exists a child in this node that matches the root path\r\n                            const deepNode = child.getChild(pathPopFront(relativePath));\r\n                            compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), deepNode);\r\n                        }\r\n                    }\r\n                }\r\n                else ;\r\n            }\r\n            else {\r\n                throw assertionError('WriteRecord should have .snap or .children');\r\n            }\r\n        }\r\n    }\r\n    return compoundWrite;\r\n}\r\n/**\r\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\r\n * writes), attempt to calculate a complete snapshot for the given path\r\n *\r\n * @param writeIdsToExclude - An optional set to be excluded\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\r\nfunction writeTreeCalcCompleteEventCache(writeTree, treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n    if (!writeIdsToExclude && !includeHiddenWrites) {\r\n        const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\r\n        if (shadowingNode != null) {\r\n            return shadowingNode;\r\n        }\r\n        else {\r\n            const subMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n            if (compoundWriteIsEmpty(subMerge)) {\r\n                return completeServerCache;\r\n            }\r\n            else if (completeServerCache == null &&\r\n                !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())) {\r\n                // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\r\n                return null;\r\n            }\r\n            else {\r\n                const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                return compoundWriteApply(subMerge, layeredCache);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\r\n            return completeServerCache;\r\n        }\r\n        else {\r\n            // If the server cache is null, and we don't have a complete cache, we need to return null\r\n            if (!includeHiddenWrites &&\r\n                completeServerCache == null &&\r\n                !compoundWriteHasCompleteWrite(merge, newEmptyPath())) {\r\n                return null;\r\n            }\r\n            else {\r\n                const filter = function (write) {\r\n                    return ((write.visible || includeHiddenWrites) &&\r\n                        (!writeIdsToExclude ||\r\n                            !~writeIdsToExclude.indexOf(write.writeId)) &&\r\n                        (pathContains(write.path, treePath) ||\r\n                            pathContains(treePath, write.path)));\r\n                };\r\n                const mergeAtPath = writeTreeLayerTree_(writeTree.allWrites, filter, treePath);\r\n                const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                return compoundWriteApply(mergeAtPath, layeredCache);\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\r\n * Used when creating new views, to pre-fill their complete event children snapshot.\r\n */\r\nfunction writeTreeCalcCompleteEventChildren(writeTree, treePath, completeServerChildren) {\r\n    let completeChildren = ChildrenNode.EMPTY_NODE;\r\n    const topLevelSet = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\r\n    if (topLevelSet) {\r\n        if (!topLevelSet.isLeafNode()) {\r\n            // we're shadowing everything. Return the children.\r\n            topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\r\n                completeChildren = completeChildren.updateImmediateChild(childName, childSnap);\r\n            });\r\n        }\r\n        return completeChildren;\r\n    }\r\n    else if (completeServerChildren) {\r\n        // Layer any children we have on top of this\r\n        // We know we don't have a top-level set, so just enumerate existing children\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        completeServerChildren.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n            const node = compoundWriteApply(compoundWriteChildCompoundWrite(merge, new Path(childName)), childNode);\r\n            completeChildren = completeChildren.updateImmediateChild(childName, node);\r\n        });\r\n        // Add any complete children we have from the set\r\n        compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\r\n            completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n        });\r\n        return completeChildren;\r\n    }\r\n    else {\r\n        // We don't have anything to layer on top of. Layer on any children we have\r\n        // Note that we can return an empty snap if we have a defined delete\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\r\n            completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n        });\r\n        return completeChildren;\r\n    }\r\n}\r\n/**\r\n * Given that the underlying server data has updated, determine what, if anything, needs to be\r\n * applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist\r\n */\r\nfunction writeTreeCalcEventCacheAfterServerOverwrite(writeTree, treePath, childPath, existingEventSnap, existingServerSnap) {\r\n    assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');\r\n    const path = pathChild(treePath, childPath);\r\n    if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\r\n        // At this point we can probably guarantee that we're in case 2, meaning no events\r\n        // May need to check visibility while doing the findRootMostValueAndPath call\r\n        return null;\r\n    }\r\n    else {\r\n        // No complete shadowing. We're either partially shadowing or not shadowing at all.\r\n        const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\r\n        if (compoundWriteIsEmpty(childMerge)) {\r\n            // We're not shadowing at all. Case 1\r\n            return existingServerSnap.getChild(childPath);\r\n        }\r\n        else {\r\n            // This could be more efficient if the serverNode + updates doesn't change the eventSnap\r\n            // However this is tricky to find out, since user updates don't necessary change the server\r\n            // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\r\n            // adds nodes, but doesn't change any existing writes. It is therefore not enough to\r\n            // only check if the updates change the serverNode.\r\n            // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\r\n            return compoundWriteApply(childMerge, existingServerSnap.getChild(childPath));\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\r\nfunction writeTreeCalcCompleteChild(writeTree, treePath, childKey, existingServerSnap) {\r\n    const path = pathChild(treePath, childKey);\r\n    const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\r\n    if (shadowingNode != null) {\r\n        return shadowingNode;\r\n    }\r\n    else {\r\n        if (existingServerSnap.isCompleteForChild(childKey)) {\r\n            const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\r\n            return compoundWriteApply(childMerge, existingServerSnap.getNode().getImmediateChild(childKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n */\r\nfunction writeTreeShadowingWrite(writeTree, path) {\r\n    return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\r\n}\r\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window.\r\n */\r\nfunction writeTreeCalcIndexedSlice(writeTree, treePath, completeServerData, startPost, count, reverse, index) {\r\n    let toIterate;\r\n    const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n    const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\r\n    if (shadowingNode != null) {\r\n        toIterate = shadowingNode;\r\n    }\r\n    else if (completeServerData != null) {\r\n        toIterate = compoundWriteApply(merge, completeServerData);\r\n    }\r\n    else {\r\n        // no children to iterate on\r\n        return [];\r\n    }\r\n    toIterate = toIterate.withIndex(index);\r\n    if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\r\n        const nodes = [];\r\n        const cmp = index.getCompare();\r\n        const iter = reverse\r\n            ? toIterate.getReverseIteratorFrom(startPost, index)\r\n            : toIterate.getIteratorFrom(startPost, index);\r\n        let next = iter.getNext();\r\n        while (next && nodes.length < count) {\r\n            if (cmp(next, startPost) !== 0) {\r\n                nodes.push(next);\r\n            }\r\n            next = iter.getNext();\r\n        }\r\n        return nodes;\r\n    }\r\n    else {\r\n        return [];\r\n    }\r\n}\r\nfunction newWriteTree() {\r\n    return {\r\n        visibleWrites: CompoundWrite.empty(),\r\n        allWrites: [],\r\n        lastWriteId: -1\r\n    };\r\n}\r\n/**\r\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\r\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\r\n * can lead to a more expensive calculation.\r\n *\r\n * @param writeIdsToExclude - Optional writes to exclude.\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\r\nfunction writeTreeRefCalcCompleteEventCache(writeTreeRef, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n    return writeTreeCalcCompleteEventCache(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites);\r\n}\r\n/**\r\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\r\n * mix of the given server data and write data.\r\n *\r\n */\r\nfunction writeTreeRefCalcCompleteEventChildren(writeTreeRef, completeServerChildren) {\r\n    return writeTreeCalcCompleteEventChildren(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerChildren);\r\n}\r\n/**\r\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\r\n * if anything, needs to be applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events should be raised\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\r\n *\r\n *\r\n */\r\nfunction writeTreeRefCalcEventCacheAfterServerOverwrite(writeTreeRef, path, existingEventSnap, existingServerSnap) {\r\n    return writeTreeCalcEventCacheAfterServerOverwrite(writeTreeRef.writeTree, writeTreeRef.treePath, path, existingEventSnap, existingServerSnap);\r\n}\r\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n *\r\n */\r\nfunction writeTreeRefShadowingWrite(writeTreeRef, path) {\r\n    return writeTreeShadowingWrite(writeTreeRef.writeTree, pathChild(writeTreeRef.treePath, path));\r\n}\r\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window\r\n */\r\nfunction writeTreeRefCalcIndexedSlice(writeTreeRef, completeServerData, startPost, count, reverse, index) {\r\n    return writeTreeCalcIndexedSlice(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerData, startPost, count, reverse, index);\r\n}\r\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\r\nfunction writeTreeRefCalcCompleteChild(writeTreeRef, childKey, existingServerCache) {\r\n    return writeTreeCalcCompleteChild(writeTreeRef.writeTree, writeTreeRef.treePath, childKey, existingServerCache);\r\n}\r\n/**\r\n * Return a WriteTreeRef for a child.\r\n */\r\nfunction writeTreeRefChild(writeTreeRef, childName) {\r\n    return newWriteTreeRef(pathChild(writeTreeRef.treePath, childName), writeTreeRef.writeTree);\r\n}\r\nfunction newWriteTreeRef(path, writeTree) {\r\n    return {\r\n        treePath: path,\r\n        writeTree\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ChildChangeAccumulator {\r\n    constructor() {\r\n        this.changeMap = new Map();\r\n    }\r\n    trackChildChange(change) {\r\n        const type = change.type;\r\n        const childKey = change.childName;\r\n        assert(type === \"child_added\" /* ChangeType.CHILD_ADDED */ ||\r\n            type === \"child_changed\" /* ChangeType.CHILD_CHANGED */ ||\r\n            type === \"child_removed\" /* ChangeType.CHILD_REMOVED */, 'Only child changes supported for tracking');\r\n        assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');\r\n        const oldChange = this.changeMap.get(childKey);\r\n        if (oldChange) {\r\n            const oldType = oldChange.type;\r\n            if (type === \"child_added\" /* ChangeType.CHILD_ADDED */ &&\r\n                oldType === \"child_removed\" /* ChangeType.CHILD_REMOVED */) {\r\n                this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.snapshotNode));\r\n            }\r\n            else if (type === \"child_removed\" /* ChangeType.CHILD_REMOVED */ &&\r\n                oldType === \"child_added\" /* ChangeType.CHILD_ADDED */) {\r\n                this.changeMap.delete(childKey);\r\n            }\r\n            else if (type === \"child_removed\" /* ChangeType.CHILD_REMOVED */ &&\r\n                oldType === \"child_changed\" /* ChangeType.CHILD_CHANGED */) {\r\n                this.changeMap.set(childKey, changeChildRemoved(childKey, oldChange.oldSnap));\r\n            }\r\n            else if (type === \"child_changed\" /* ChangeType.CHILD_CHANGED */ &&\r\n                oldType === \"child_added\" /* ChangeType.CHILD_ADDED */) {\r\n                this.changeMap.set(childKey, changeChildAdded(childKey, change.snapshotNode));\r\n            }\r\n            else if (type === \"child_changed\" /* ChangeType.CHILD_CHANGED */ &&\r\n                oldType === \"child_changed\" /* ChangeType.CHILD_CHANGED */) {\r\n                this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap));\r\n            }\r\n            else {\r\n                throw assertionError('Illegal combination of changes: ' +\r\n                    change +\r\n                    ' occurred after ' +\r\n                    oldChange);\r\n            }\r\n        }\r\n        else {\r\n            this.changeMap.set(childKey, change);\r\n        }\r\n    }\r\n    getChanges() {\r\n        return Array.from(this.changeMap.values());\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of CompleteChildSource that never returns any additional children\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nclass NoCompleteChildSource_ {\r\n    getCompleteChild(childKey) {\r\n        return null;\r\n    }\r\n    getChildAfterChild(index, child, reverse) {\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * Singleton instance.\r\n */\r\nconst NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\r\n/**\r\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\r\n * old event caches available to calculate complete children.\r\n */\r\nclass WriteTreeCompleteChildSource {\r\n    constructor(writes_, viewCache_, optCompleteServerCache_ = null) {\r\n        this.writes_ = writes_;\r\n        this.viewCache_ = viewCache_;\r\n        this.optCompleteServerCache_ = optCompleteServerCache_;\r\n    }\r\n    getCompleteChild(childKey) {\r\n        const node = this.viewCache_.eventCache;\r\n        if (node.isCompleteForChild(childKey)) {\r\n            return node.getNode().getImmediateChild(childKey);\r\n        }\r\n        else {\r\n            const serverNode = this.optCompleteServerCache_ != null\r\n                ? new CacheNode(this.optCompleteServerCache_, true, false)\r\n                : this.viewCache_.serverCache;\r\n            return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\r\n        }\r\n    }\r\n    getChildAfterChild(index, child, reverse) {\r\n        const completeServerData = this.optCompleteServerCache_ != null\r\n            ? this.optCompleteServerCache_\r\n            : viewCacheGetCompleteServerSnap(this.viewCache_);\r\n        const nodes = writeTreeRefCalcIndexedSlice(this.writes_, completeServerData, child, 1, reverse, index);\r\n        if (nodes.length === 0) {\r\n            return null;\r\n        }\r\n        else {\r\n            return nodes[0];\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newViewProcessor(filter) {\r\n    return { filter };\r\n}\r\nfunction viewProcessorAssertIndexed(viewProcessor, viewCache) {\r\n    assert(viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Event snap not indexed');\r\n    assert(viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Server snap not indexed');\r\n}\r\nfunction viewProcessorApplyOperation(viewProcessor, oldViewCache, operation, writesCache, completeCache) {\r\n    const accumulator = new ChildChangeAccumulator();\r\n    let newViewCache, filterServerNode;\r\n    if (operation.type === OperationType.OVERWRITE) {\r\n        const overwrite = operation;\r\n        if (overwrite.source.fromUser) {\r\n            newViewCache = viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            assert(overwrite.source.fromServer, 'Unknown source.');\r\n            // We filter the node if it's a tagged update or the node has been previously filtered  and the\r\n            // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\r\n            // again\r\n            filterServerNode =\r\n                overwrite.source.tagged ||\r\n                    (oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path));\r\n            newViewCache = viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.MERGE) {\r\n        const merge = operation;\r\n        if (merge.source.fromUser) {\r\n            newViewCache = viewProcessorApplyUserMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            assert(merge.source.fromServer, 'Unknown source.');\r\n            // We filter the node if it's a tagged update or the node has been previously filtered\r\n            filterServerNode =\r\n                merge.source.tagged || oldViewCache.serverCache.isFiltered();\r\n            newViewCache = viewProcessorApplyServerMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.ACK_USER_WRITE) {\r\n        const ackUserWrite = operation;\r\n        if (!ackUserWrite.revert) {\r\n            newViewCache = viewProcessorAckUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            newViewCache = viewProcessorRevertUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.LISTEN_COMPLETE) {\r\n        newViewCache = viewProcessorListenComplete(viewProcessor, oldViewCache, operation.path, writesCache, accumulator);\r\n    }\r\n    else {\r\n        throw assertionError('Unknown operation type: ' + operation.type);\r\n    }\r\n    const changes = accumulator.getChanges();\r\n    viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\r\n    return { viewCache: newViewCache, changes };\r\n}\r\nfunction viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, accumulator) {\r\n    const eventSnap = newViewCache.eventCache;\r\n    if (eventSnap.isFullyInitialized()) {\r\n        const isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\r\n        const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\r\n        if (accumulator.length > 0 ||\r\n            !oldViewCache.eventCache.isFullyInitialized() ||\r\n            (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||\r\n            !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())) {\r\n            accumulator.push(changeValue(viewCacheGetCompleteEventSnap(newViewCache)));\r\n        }\r\n    }\r\n}\r\nfunction viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, viewCache, changePath, writesCache, source, accumulator) {\r\n    const oldEventSnap = viewCache.eventCache;\r\n    if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\r\n        // we have a shadowing write, ignore changes\r\n        return viewCache;\r\n    }\r\n    else {\r\n        let newEventCache, serverNode;\r\n        if (pathIsEmpty(changePath)) {\r\n            // TODO: figure out how this plays with \"sliding ack windows\"\r\n            assert(viewCache.serverCache.isFullyInitialized(), 'If change path is empty, we must have complete server data');\r\n            if (viewCache.serverCache.isFiltered()) {\r\n                // We need to special case this, because we need to only apply writes to complete children, or\r\n                // we might end up raising events for incomplete children. If the server data is filtered deep\r\n                // writes cannot be guaranteed to be complete\r\n                const serverCache = viewCacheGetCompleteServerSnap(viewCache);\r\n                const completeChildren = serverCache instanceof ChildrenNode\r\n                    ? serverCache\r\n                    : ChildrenNode.EMPTY_NODE;\r\n                const completeEventChildren = writeTreeRefCalcCompleteEventChildren(writesCache, completeChildren);\r\n                newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeEventChildren, accumulator);\r\n            }\r\n            else {\r\n                const completeNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n                newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeNode, accumulator);\r\n            }\r\n        }\r\n        else {\r\n            const childKey = pathGetFront(changePath);\r\n            if (childKey === '.priority') {\r\n                assert(pathGetLength(changePath) === 1, \"Can't have a priority with additional path components\");\r\n                const oldEventNode = oldEventSnap.getNode();\r\n                serverNode = viewCache.serverCache.getNode();\r\n                // we might have overwrites for this priority\r\n                const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventNode, serverNode);\r\n                if (updatedPriority != null) {\r\n                    newEventCache = viewProcessor.filter.updatePriority(oldEventNode, updatedPriority);\r\n                }\r\n                else {\r\n                    // priority didn't change, keep old node\r\n                    newEventCache = oldEventSnap.getNode();\r\n                }\r\n            }\r\n            else {\r\n                const childChangePath = pathPopFront(changePath);\r\n                // update child\r\n                let newEventChild;\r\n                if (oldEventSnap.isCompleteForChild(childKey)) {\r\n                    serverNode = viewCache.serverCache.getNode();\r\n                    const eventChildUpdate = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventSnap.getNode(), serverNode);\r\n                    if (eventChildUpdate != null) {\r\n                        newEventChild = oldEventSnap\r\n                            .getNode()\r\n                            .getImmediateChild(childKey)\r\n                            .updateChild(childChangePath, eventChildUpdate);\r\n                    }\r\n                    else {\r\n                        // Nothing changed, just keep the old child\r\n                        newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\r\n                    }\r\n                }\r\n                else {\r\n                    newEventChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\r\n                }\r\n                if (newEventChild != null) {\r\n                    newEventCache = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);\r\n                }\r\n                else {\r\n                    // no complete child available or no change\r\n                    newEventCache = oldEventSnap.getNode();\r\n                }\r\n            }\r\n        }\r\n        return viewCacheUpdateEventSnap(viewCache, newEventCache, oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath), viewProcessor.filter.filtersNodes());\r\n    }\r\n}\r\nfunction viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {\r\n    const oldServerSnap = oldViewCache.serverCache;\r\n    let newServerCache;\r\n    const serverFilter = filterServerNode\r\n        ? viewProcessor.filter\r\n        : viewProcessor.filter.getIndexedFilter();\r\n    if (pathIsEmpty(changePath)) {\r\n        newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);\r\n    }\r\n    else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\r\n        // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\r\n        const newServerNode = oldServerSnap\r\n            .getNode()\r\n            .updateChild(changePath, changedSnap);\r\n        newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(changePath);\r\n        if (!oldServerSnap.isCompleteForPath(changePath) &&\r\n            pathGetLength(changePath) > 1) {\r\n            // We don't update incomplete nodes with updates intended for other listeners\r\n            return oldViewCache;\r\n        }\r\n        const childChangePath = pathPopFront(changePath);\r\n        const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\r\n        const newChildNode = childNode.updateChild(childChangePath, changedSnap);\r\n        if (childKey === '.priority') {\r\n            newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);\r\n        }\r\n        else {\r\n            newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);\r\n        }\r\n    }\r\n    const newViewCache = viewCacheUpdateServerSnap(oldViewCache, newServerCache, oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath), serverFilter.filtersNodes());\r\n    const source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);\r\n    return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, changePath, writesCache, source, accumulator);\r\n}\r\nfunction viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {\r\n    const oldEventSnap = oldViewCache.eventCache;\r\n    let newViewCache, newEventCache;\r\n    const source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);\r\n    if (pathIsEmpty(changePath)) {\r\n        newEventCache = viewProcessor.filter.updateFullNode(oldViewCache.eventCache.getNode(), changedSnap, accumulator);\r\n        newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, true, viewProcessor.filter.filtersNodes());\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(changePath);\r\n        if (childKey === '.priority') {\r\n            newEventCache = viewProcessor.filter.updatePriority(oldViewCache.eventCache.getNode(), changedSnap);\r\n            newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());\r\n        }\r\n        else {\r\n            const childChangePath = pathPopFront(changePath);\r\n            const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\r\n            let newChild;\r\n            if (pathIsEmpty(childChangePath)) {\r\n                // Child overwrite, we can replace the child\r\n                newChild = changedSnap;\r\n            }\r\n            else {\r\n                const childNode = source.getCompleteChild(childKey);\r\n                if (childNode != null) {\r\n                    if (pathGetBack(childChangePath) === '.priority' &&\r\n                        childNode.getChild(pathParent(childChangePath)).isEmpty()) {\r\n                        // This is a priority update on an empty node. If this node exists on the server, the\r\n                        // server will send down the priority in the update, so ignore for now\r\n                        newChild = childNode;\r\n                    }\r\n                    else {\r\n                        newChild = childNode.updateChild(childChangePath, changedSnap);\r\n                    }\r\n                }\r\n                else {\r\n                    // There is no complete child node available\r\n                    newChild = ChildrenNode.EMPTY_NODE;\r\n                }\r\n            }\r\n            if (!oldChild.equals(newChild)) {\r\n                const newEventSnap = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);\r\n                newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventSnap, oldEventSnap.isFullyInitialized(), viewProcessor.filter.filtersNodes());\r\n            }\r\n            else {\r\n                newViewCache = oldViewCache;\r\n            }\r\n        }\r\n    }\r\n    return newViewCache;\r\n}\r\nfunction viewProcessorCacheHasChild(viewCache, childKey) {\r\n    return viewCache.eventCache.isCompleteForChild(childKey);\r\n}\r\nfunction viewProcessorApplyUserMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, accumulator) {\r\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n    // window leaving room for new items.  It's important we process these changes first, so we\r\n    // iterate the changes twice, first processing any that affect items currently in view.\r\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n    // not the other.\r\n    let curViewCache = viewCache;\r\n    changedChildren.foreach((relativePath, childNode) => {\r\n        const writePath = pathChild(path, relativePath);\r\n        if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\r\n            curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n        }\r\n    });\r\n    changedChildren.foreach((relativePath, childNode) => {\r\n        const writePath = pathChild(path, relativePath);\r\n        if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\r\n            curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n        }\r\n    });\r\n    return curViewCache;\r\n}\r\nfunction viewProcessorApplyMerge(viewProcessor, node, merge) {\r\n    merge.foreach((relativePath, childNode) => {\r\n        node = node.updateChild(relativePath, childNode);\r\n    });\r\n    return node;\r\n}\r\nfunction viewProcessorApplyServerMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {\r\n    // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\r\n    // wait for the complete data update coming soon.\r\n    if (viewCache.serverCache.getNode().isEmpty() &&\r\n        !viewCache.serverCache.isFullyInitialized()) {\r\n        return viewCache;\r\n    }\r\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n    // window leaving room for new items.  It's important we process these changes first, so we\r\n    // iterate the changes twice, first processing any that affect items currently in view.\r\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n    // not the other.\r\n    let curViewCache = viewCache;\r\n    let viewMergeTree;\r\n    if (pathIsEmpty(path)) {\r\n        viewMergeTree = changedChildren;\r\n    }\r\n    else {\r\n        viewMergeTree = new ImmutableTree(null).setTree(path, changedChildren);\r\n    }\r\n    const serverNode = viewCache.serverCache.getNode();\r\n    viewMergeTree.children.inorderTraversal((childKey, childTree) => {\r\n        if (serverNode.hasChild(childKey)) {\r\n            const serverChild = viewCache.serverCache\r\n                .getNode()\r\n                .getImmediateChild(childKey);\r\n            const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childTree);\r\n            curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n        }\r\n    });\r\n    viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\r\n        const isUnknownDeepMerge = !viewCache.serverCache.isCompleteForChild(childKey) &&\r\n            childMergeTree.value === null;\r\n        if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\r\n            const serverChild = viewCache.serverCache\r\n                .getNode()\r\n                .getImmediateChild(childKey);\r\n            const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childMergeTree);\r\n            curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n        }\r\n    });\r\n    return curViewCache;\r\n}\r\nfunction viewProcessorAckUserWrite(viewProcessor, viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {\r\n    if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\r\n        return viewCache;\r\n    }\r\n    // Only filter server node if it is currently filtered\r\n    const filterServerNode = viewCache.serverCache.isFiltered();\r\n    // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\r\n    // now that it won't be shadowed.\r\n    const serverCache = viewCache.serverCache;\r\n    if (affectedTree.value != null) {\r\n        // This is an overwrite.\r\n        if ((pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||\r\n            serverCache.isCompleteForPath(ackPath)) {\r\n            return viewProcessorApplyServerOverwrite(viewProcessor, viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n        else if (pathIsEmpty(ackPath)) {\r\n            // This is a goofy edge case where we are acking data at this location but don't have full data.  We\r\n            // should just re-apply whatever we have in our cache as a merge.\r\n            let changedChildren = new ImmutableTree(null);\r\n            serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\r\n                changedChildren = changedChildren.set(new Path(name), node);\r\n            });\r\n            return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n        else {\r\n            return viewCache;\r\n        }\r\n    }\r\n    else {\r\n        // This is a merge.\r\n        let changedChildren = new ImmutableTree(null);\r\n        affectedTree.foreach((mergePath, value) => {\r\n            const serverCachePath = pathChild(ackPath, mergePath);\r\n            if (serverCache.isCompleteForPath(serverCachePath)) {\r\n                changedChildren = changedChildren.set(mergePath, serverCache.getNode().getChild(serverCachePath));\r\n            }\r\n        });\r\n        return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\r\n    }\r\n}\r\nfunction viewProcessorListenComplete(viewProcessor, viewCache, path, writesCache, accumulator) {\r\n    const oldServerNode = viewCache.serverCache;\r\n    const newViewCache = viewCacheUpdateServerSnap(viewCache, oldServerNode.getNode(), oldServerNode.isFullyInitialized() || pathIsEmpty(path), oldServerNode.isFiltered());\r\n    return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);\r\n}\r\nfunction viewProcessorRevertUserWrite(viewProcessor, viewCache, path, writesCache, completeServerCache, accumulator) {\r\n    let complete;\r\n    if (writeTreeRefShadowingWrite(writesCache, path) != null) {\r\n        return viewCache;\r\n    }\r\n    else {\r\n        const source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);\r\n        const oldEventCache = viewCache.eventCache.getNode();\r\n        let newEventCache;\r\n        if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\r\n            let newNode;\r\n            if (viewCache.serverCache.isFullyInitialized()) {\r\n                newNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n            }\r\n            else {\r\n                const serverChildren = viewCache.serverCache.getNode();\r\n                assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');\r\n                newNode = writeTreeRefCalcCompleteEventChildren(writesCache, serverChildren);\r\n            }\r\n            newNode = newNode;\r\n            newEventCache = viewProcessor.filter.updateFullNode(oldEventCache, newNode, accumulator);\r\n        }\r\n        else {\r\n            const childKey = pathGetFront(path);\r\n            let newChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\r\n            if (newChild == null &&\r\n                viewCache.serverCache.isCompleteForChild(childKey)) {\r\n                newChild = oldEventCache.getImmediateChild(childKey);\r\n            }\r\n            if (newChild != null) {\r\n                newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, newChild, pathPopFront(path), source, accumulator);\r\n            }\r\n            else if (viewCache.eventCache.getNode().hasChild(childKey)) {\r\n                // No complete child available, delete the existing one, if any\r\n                newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, pathPopFront(path), source, accumulator);\r\n            }\r\n            else {\r\n                newEventCache = oldEventCache;\r\n            }\r\n            if (newEventCache.isEmpty() &&\r\n                viewCache.serverCache.isFullyInitialized()) {\r\n                // We might have reverted all child writes. Maybe the old event was a leaf node\r\n                complete = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n                if (complete.isLeafNode()) {\r\n                    newEventCache = viewProcessor.filter.updateFullNode(newEventCache, complete, accumulator);\r\n                }\r\n            }\r\n        }\r\n        complete =\r\n            viewCache.serverCache.isFullyInitialized() ||\r\n                writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\r\n        return viewCacheUpdateEventSnap(viewCache, newEventCache, complete, viewProcessor.filter.filtersNodes());\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A view represents a specific location and query that has 1 or more event registrations.\r\n *\r\n * It does several things:\r\n *  - Maintains the list of event registrations for this location/query.\r\n *  - Maintains a cache of the data visible for this location/query.\r\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\r\n *    registrations returns the set of events to be raised.\r\n */\r\nclass View {\r\n    constructor(query_, initialViewCache) {\r\n        this.query_ = query_;\r\n        this.eventRegistrations_ = [];\r\n        const params = this.query_._queryParams;\r\n        const indexFilter = new IndexedFilter(params.getIndex());\r\n        const filter = queryParamsGetNodeFilter(params);\r\n        this.processor_ = newViewProcessor(filter);\r\n        const initialServerCache = initialViewCache.serverCache;\r\n        const initialEventCache = initialViewCache.eventCache;\r\n        // Don't filter server node with other filter than index, wait for tagged listen\r\n        const serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);\r\n        const eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);\r\n        const newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());\r\n        const newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());\r\n        this.viewCache_ = newViewCache(newEventCache, newServerCache);\r\n        this.eventGenerator_ = new EventGenerator(this.query_);\r\n    }\r\n    get query() {\r\n        return this.query_;\r\n    }\r\n}\r\nfunction viewGetServerCache(view) {\r\n    return view.viewCache_.serverCache.getNode();\r\n}\r\nfunction viewGetCompleteNode(view) {\r\n    return viewCacheGetCompleteEventSnap(view.viewCache_);\r\n}\r\nfunction viewGetCompleteServerCache(view, path) {\r\n    const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\r\n    if (cache) {\r\n        // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\r\n        // we need to see if it contains the child we're interested in.\r\n        if (view.query._queryParams.loadsAllData() ||\r\n            (!pathIsEmpty(path) &&\r\n                !cache.getImmediateChild(pathGetFront(path)).isEmpty())) {\r\n            return cache.getChild(path);\r\n        }\r\n    }\r\n    return null;\r\n}\r\nfunction viewIsEmpty(view) {\r\n    return view.eventRegistrations_.length === 0;\r\n}\r\nfunction viewAddEventRegistration(view, eventRegistration) {\r\n    view.eventRegistrations_.push(eventRegistration);\r\n}\r\n/**\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns Cancel events, if cancelError was provided.\r\n */\r\nfunction viewRemoveEventRegistration(view, eventRegistration, cancelError) {\r\n    const cancelEvents = [];\r\n    if (cancelError) {\r\n        assert(eventRegistration == null, 'A cancel should cancel all event registrations.');\r\n        const path = view.query._path;\r\n        view.eventRegistrations_.forEach(registration => {\r\n            const maybeEvent = registration.createCancelEvent(cancelError, path);\r\n            if (maybeEvent) {\r\n                cancelEvents.push(maybeEvent);\r\n            }\r\n        });\r\n    }\r\n    if (eventRegistration) {\r\n        let remaining = [];\r\n        for (let i = 0; i < view.eventRegistrations_.length; ++i) {\r\n            const existing = view.eventRegistrations_[i];\r\n            if (!existing.matches(eventRegistration)) {\r\n                remaining.push(existing);\r\n            }\r\n            else if (eventRegistration.hasAnyCallback()) {\r\n                // We're removing just this one\r\n                remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\r\n                break;\r\n            }\r\n        }\r\n        view.eventRegistrations_ = remaining;\r\n    }\r\n    else {\r\n        view.eventRegistrations_ = [];\r\n    }\r\n    return cancelEvents;\r\n}\r\n/**\r\n * Applies the given Operation, updates our cache, and returns the appropriate events.\r\n */\r\nfunction viewApplyOperation(view, operation, writesCache, completeServerCache) {\r\n    if (operation.type === OperationType.MERGE &&\r\n        operation.source.queryId !== null) {\r\n        assert(viewCacheGetCompleteServerSnap(view.viewCache_), 'We should always have a full cache before handling merges');\r\n        assert(viewCacheGetCompleteEventSnap(view.viewCache_), 'Missing event cache, even though we have a server cache');\r\n    }\r\n    const oldViewCache = view.viewCache_;\r\n    const result = viewProcessorApplyOperation(view.processor_, oldViewCache, operation, writesCache, completeServerCache);\r\n    viewProcessorAssertIndexed(view.processor_, result.viewCache);\r\n    assert(result.viewCache.serverCache.isFullyInitialized() ||\r\n        !oldViewCache.serverCache.isFullyInitialized(), 'Once a server snap is complete, it should never go back');\r\n    view.viewCache_ = result.viewCache;\r\n    return viewGenerateEventsForChanges_(view, result.changes, result.viewCache.eventCache.getNode(), null);\r\n}\r\nfunction viewGetInitialEvents(view, registration) {\r\n    const eventSnap = view.viewCache_.eventCache;\r\n    const initialChanges = [];\r\n    if (!eventSnap.getNode().isLeafNode()) {\r\n        const eventNode = eventSnap.getNode();\r\n        eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            initialChanges.push(changeChildAdded(key, childNode));\r\n        });\r\n    }\r\n    if (eventSnap.isFullyInitialized()) {\r\n        initialChanges.push(changeValue(eventSnap.getNode()));\r\n    }\r\n    return viewGenerateEventsForChanges_(view, initialChanges, eventSnap.getNode(), registration);\r\n}\r\nfunction viewGenerateEventsForChanges_(view, changes, eventCache, eventRegistration) {\r\n    const registrations = eventRegistration\r\n        ? [eventRegistration]\r\n        : view.eventRegistrations_;\r\n    return eventGeneratorGenerateEventsForChanges(view.eventGenerator_, changes, eventCache, registrations);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet referenceConstructor$1;\r\n/**\r\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\r\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\r\n * and user writes (set, transaction, update).\r\n *\r\n * It's responsible for:\r\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\r\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\r\n *    applyUserOverwrite, etc.)\r\n */\r\nclass SyncPoint {\r\n    constructor() {\r\n        /**\r\n         * The Views being tracked at this location in the tree, stored as a map where the key is a\r\n         * queryId and the value is the View for that query.\r\n         *\r\n         * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\r\n         */\r\n        this.views = new Map();\r\n    }\r\n}\r\nfunction syncPointSetReferenceConstructor(val) {\r\n    assert(!referenceConstructor$1, '__referenceConstructor has already been defined');\r\n    referenceConstructor$1 = val;\r\n}\r\nfunction syncPointGetReferenceConstructor() {\r\n    assert(referenceConstructor$1, 'Reference.ts has not been loaded');\r\n    return referenceConstructor$1;\r\n}\r\nfunction syncPointIsEmpty(syncPoint) {\r\n    return syncPoint.views.size === 0;\r\n}\r\nfunction syncPointApplyOperation(syncPoint, operation, writesCache, optCompleteServerCache) {\r\n    const queryId = operation.source.queryId;\r\n    if (queryId !== null) {\r\n        const view = syncPoint.views.get(queryId);\r\n        assert(view != null, 'SyncTree gave us an op for an invalid query.');\r\n        return viewApplyOperation(view, operation, writesCache, optCompleteServerCache);\r\n    }\r\n    else {\r\n        let events = [];\r\n        for (const view of syncPoint.views.values()) {\r\n            events = events.concat(viewApplyOperation(view, operation, writesCache, optCompleteServerCache));\r\n        }\r\n        return events;\r\n    }\r\n}\r\n/**\r\n * Get a view for the specified query.\r\n *\r\n * @param query - The query to return a view for\r\n * @param writesCache\r\n * @param serverCache\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\r\nfunction syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete) {\r\n    const queryId = query._queryIdentifier;\r\n    const view = syncPoint.views.get(queryId);\r\n    if (!view) {\r\n        // TODO: make writesCache take flag for complete server node\r\n        let eventCache = writeTreeRefCalcCompleteEventCache(writesCache, serverCacheComplete ? serverCache : null);\r\n        let eventCacheComplete = false;\r\n        if (eventCache) {\r\n            eventCacheComplete = true;\r\n        }\r\n        else if (serverCache instanceof ChildrenNode) {\r\n            eventCache = writeTreeRefCalcCompleteEventChildren(writesCache, serverCache);\r\n            eventCacheComplete = false;\r\n        }\r\n        else {\r\n            eventCache = ChildrenNode.EMPTY_NODE;\r\n            eventCacheComplete = false;\r\n        }\r\n        const viewCache = newViewCache(new CacheNode(eventCache, eventCacheComplete, false), new CacheNode(serverCache, serverCacheComplete, false));\r\n        return new View(query, viewCache);\r\n    }\r\n    return view;\r\n}\r\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @param query\r\n * @param eventRegistration\r\n * @param writesCache\r\n * @param serverCache - Complete server cache, if we have it.\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\r\nfunction syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete) {\r\n    const view = syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete);\r\n    if (!syncPoint.views.has(query._queryIdentifier)) {\r\n        syncPoint.views.set(query._queryIdentifier, view);\r\n    }\r\n    // This is guaranteed to exist now, we just created anything that was missing\r\n    viewAddEventRegistration(view, eventRegistration);\r\n    return viewGetInitialEvents(view, eventRegistration);\r\n}\r\n/**\r\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\r\n *\r\n * If query is the default query, we'll check all views for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\r\n *\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns removed queries and any cancel events\r\n */\r\nfunction syncPointRemoveEventRegistration(syncPoint, query, eventRegistration, cancelError) {\r\n    const queryId = query._queryIdentifier;\r\n    const removed = [];\r\n    let cancelEvents = [];\r\n    const hadCompleteView = syncPointHasCompleteView(syncPoint);\r\n    if (queryId === 'default') {\r\n        // When you do ref.off(...), we search all views for the registration to remove.\r\n        for (const [viewQueryId, view] of syncPoint.views.entries()) {\r\n            cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\r\n            if (viewIsEmpty(view)) {\r\n                syncPoint.views.delete(viewQueryId);\r\n                // We'll deal with complete views later.\r\n                if (!view.query._queryParams.loadsAllData()) {\r\n                    removed.push(view.query);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        // remove the callback from the specific view.\r\n        const view = syncPoint.views.get(queryId);\r\n        if (view) {\r\n            cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\r\n            if (viewIsEmpty(view)) {\r\n                syncPoint.views.delete(queryId);\r\n                // We'll deal with complete views later.\r\n                if (!view.query._queryParams.loadsAllData()) {\r\n                    removed.push(view.query);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\r\n        // We removed our last complete view.\r\n        removed.push(new (syncPointGetReferenceConstructor())(query._repo, query._path));\r\n    }\r\n    return { removed, events: cancelEvents };\r\n}\r\nfunction syncPointGetQueryViews(syncPoint) {\r\n    const result = [];\r\n    for (const view of syncPoint.views.values()) {\r\n        if (!view.query._queryParams.loadsAllData()) {\r\n            result.push(view);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * @param path - The path to the desired complete snapshot\r\n * @returns A complete cache, if it exists\r\n */\r\nfunction syncPointGetCompleteServerCache(syncPoint, path) {\r\n    let serverCache = null;\r\n    for (const view of syncPoint.views.values()) {\r\n        serverCache = serverCache || viewGetCompleteServerCache(view, path);\r\n    }\r\n    return serverCache;\r\n}\r\nfunction syncPointViewForQuery(syncPoint, query) {\r\n    const params = query._queryParams;\r\n    if (params.loadsAllData()) {\r\n        return syncPointGetCompleteView(syncPoint);\r\n    }\r\n    else {\r\n        const queryId = query._queryIdentifier;\r\n        return syncPoint.views.get(queryId);\r\n    }\r\n}\r\nfunction syncPointViewExistsForQuery(syncPoint, query) {\r\n    return syncPointViewForQuery(syncPoint, query) != null;\r\n}\r\nfunction syncPointHasCompleteView(syncPoint) {\r\n    return syncPointGetCompleteView(syncPoint) != null;\r\n}\r\nfunction syncPointGetCompleteView(syncPoint) {\r\n    for (const view of syncPoint.views.values()) {\r\n        if (view.query._queryParams.loadsAllData()) {\r\n            return view;\r\n        }\r\n    }\r\n    return null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet referenceConstructor;\r\nfunction syncTreeSetReferenceConstructor(val) {\r\n    assert(!referenceConstructor, '__referenceConstructor has already been defined');\r\n    referenceConstructor = val;\r\n}\r\nfunction syncTreeGetReferenceConstructor() {\r\n    assert(referenceConstructor, 'Reference.ts has not been loaded');\r\n    return referenceConstructor;\r\n}\r\n/**\r\n * Static tracker for next query tag.\r\n */\r\nlet syncTreeNextQueryTag_ = 1;\r\n/**\r\n * SyncTree is the central class for managing event callback registration, data caching, views\r\n * (query processing), and event generation.  There are typically two SyncTree instances for\r\n * each Repo, one for the normal Firebase data, and one for the .info data.\r\n *\r\n * It has a number of responsibilities, including:\r\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\r\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\r\n *    (applyUserOverwrite(), applyUserMerge()).\r\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\r\n *    applyServerMerge()).\r\n *  - Generating user-facing events for server and user changes (all of the apply* methods\r\n *    return the set of events that need to be raised as a result).\r\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\r\n *    to the correct set of paths and queries to satisfy the current set of user event\r\n *    callbacks (listens are started/stopped using the provided listenProvider).\r\n *\r\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\r\n * events are returned to the caller rather than raised synchronously.\r\n *\r\n */\r\nclass SyncTree {\r\n    /**\r\n     * @param listenProvider_ - Used by SyncTree to start / stop listening\r\n     *   to server data.\r\n     */\r\n    constructor(listenProvider_) {\r\n        this.listenProvider_ = listenProvider_;\r\n        /**\r\n         * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\r\n         */\r\n        this.syncPointTree_ = new ImmutableTree(null);\r\n        /**\r\n         * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\r\n         */\r\n        this.pendingWriteTree_ = newWriteTree();\r\n        this.tagToQueryMap = new Map();\r\n        this.queryToTagMap = new Map();\r\n    }\r\n}\r\n/**\r\n * Apply the data changes for a user-generated set() or transaction() call.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyUserOverwrite(syncTree, path, newData, writeId, visible) {\r\n    // Record pending write.\r\n    writeTreeAddOverwrite(syncTree.pendingWriteTree_, path, newData, writeId, visible);\r\n    if (!visible) {\r\n        return [];\r\n    }\r\n    else {\r\n        return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceUser(), path, newData));\r\n    }\r\n}\r\n/**\r\n * Apply the data from a user-generated update() call\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyUserMerge(syncTree, path, changedChildren, writeId) {\r\n    // Record pending merge.\r\n    writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\r\n    const changeTree = ImmutableTree.fromObject(changedChildren);\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceUser(), path, changeTree));\r\n}\r\n/**\r\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\r\n *\r\n * @param revert - True if the given write failed and needs to be reverted\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeAckUserWrite(syncTree, writeId, revert = false) {\r\n    const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\r\n    const needToReevaluate = writeTreeRemoveWrite(syncTree.pendingWriteTree_, writeId);\r\n    if (!needToReevaluate) {\r\n        return [];\r\n    }\r\n    else {\r\n        let affectedTree = new ImmutableTree(null);\r\n        if (write.snap != null) {\r\n            // overwrite\r\n            affectedTree = affectedTree.set(newEmptyPath(), true);\r\n        }\r\n        else {\r\n            each(write.children, (pathString) => {\r\n                affectedTree = affectedTree.set(new Path(pathString), true);\r\n            });\r\n        }\r\n        return syncTreeApplyOperationToSyncPoints_(syncTree, new AckUserWrite(write.path, affectedTree, revert));\r\n    }\r\n}\r\n/**\r\n * Apply new server data for the specified path..\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyServerOverwrite(syncTree, path, newData) {\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceServer(), path, newData));\r\n}\r\n/**\r\n * Apply new server data to be merged in at the specified path.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyServerMerge(syncTree, path, changedChildren) {\r\n    const changeTree = ImmutableTree.fromObject(changedChildren);\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceServer(), path, changeTree));\r\n}\r\n/**\r\n * Apply a listen complete for a query\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyListenComplete(syncTree, path) {\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new ListenComplete(newOperationSourceServer(), path));\r\n}\r\n/**\r\n * Apply a listen complete for a tagged query\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedListenComplete(syncTree, path, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const op = new ListenComplete(newOperationSourceServerTaggedQuery(queryId), relativePath);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // We've already removed the query. No big deal, ignore the update\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Remove event callback(s).\r\n *\r\n * If query is the default query, we'll check all queries for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\r\n *\r\n * @param eventRegistration - If null, all callbacks are removed.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @param skipListenerDedup - When performing a `get()`, we don't add any new listeners, so no\r\n *  deduping needs to take place. This flag allows toggling of that behavior\r\n * @returns Cancel events, if cancelError was provided.\r\n */\r\nfunction syncTreeRemoveEventRegistration(syncTree, query, eventRegistration, cancelError, skipListenerDedup = false) {\r\n    // Find the syncPoint first. Then deal with whether or not it has matching listeners\r\n    const path = query._path;\r\n    const maybeSyncPoint = syncTree.syncPointTree_.get(path);\r\n    let cancelEvents = [];\r\n    // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\r\n    // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\r\n    // not loadsAllData().\r\n    if (maybeSyncPoint &&\r\n        (query._queryIdentifier === 'default' ||\r\n            syncPointViewExistsForQuery(maybeSyncPoint, query))) {\r\n        const removedAndEvents = syncPointRemoveEventRegistration(maybeSyncPoint, query, eventRegistration, cancelError);\r\n        if (syncPointIsEmpty(maybeSyncPoint)) {\r\n            syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\r\n        }\r\n        const removed = removedAndEvents.removed;\r\n        cancelEvents = removedAndEvents.events;\r\n        if (!skipListenerDedup) {\r\n            /**\r\n             * We may have just removed one of many listeners and can short-circuit this whole process\r\n             * We may also not have removed a default listener, in which case all of the descendant listeners should already be\r\n             * properly set up.\r\n             */\r\n            // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\r\n            // queryId === 'default'\r\n            const removingDefault = -1 !==\r\n                removed.findIndex(query => {\r\n                    return query._queryParams.loadsAllData();\r\n                });\r\n            const covered = syncTree.syncPointTree_.findOnPath(path, (relativePath, parentSyncPoint) => syncPointHasCompleteView(parentSyncPoint));\r\n            if (removingDefault && !covered) {\r\n                const subtree = syncTree.syncPointTree_.subtree(path);\r\n                // There are potentially child listeners. Determine what if any listens we need to send before executing the\r\n                // removal\r\n                if (!subtree.isEmpty()) {\r\n                    // We need to fold over our subtree and collect the listeners to send\r\n                    const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\r\n                    // Ok, we've collected all the listens we need. Set them up.\r\n                    for (let i = 0; i < newViews.length; ++i) {\r\n                        const view = newViews[i], newQuery = view.query;\r\n                        const listener = syncTreeCreateListenerForView_(syncTree, view);\r\n                        syncTree.listenProvider_.startListening(syncTreeQueryForListening_(newQuery), syncTreeTagForQuery(syncTree, newQuery), listener.hashFn, listener.onComplete);\r\n                    }\r\n                }\r\n                // Otherwise there's nothing below us, so nothing we need to start listening on\r\n            }\r\n            // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\r\n            // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\r\n            // Also, note that if we have a cancelError, it's already been removed at the provider level.\r\n            if (!covered && removed.length > 0 && !cancelError) {\r\n                // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\r\n                // default. Otherwise, we need to iterate through and cancel each individual query\r\n                if (removingDefault) {\r\n                    // We don't tag default listeners\r\n                    const defaultTag = null;\r\n                    syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(query), defaultTag);\r\n                }\r\n                else {\r\n                    removed.forEach((queryToRemove) => {\r\n                        const tagToRemove = syncTree.queryToTagMap.get(syncTreeMakeQueryKey_(queryToRemove));\r\n                        syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToRemove), tagToRemove);\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        // Now, clear all of the tags we're tracking for the removed listens\r\n        syncTreeRemoveTags_(syncTree, removed);\r\n    }\r\n    return cancelEvents;\r\n}\r\n/**\r\n * Apply new server data for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedQueryOverwrite(syncTree, path, snap, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey != null) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const op = new Overwrite(newOperationSourceServerTaggedQuery(queryId), relativePath, snap);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // Query must have been removed already\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Apply server data to be merged in for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedQueryMerge(syncTree, path, changedChildren, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const changeTree = ImmutableTree.fromObject(changedChildren);\r\n        const op = new Merge(newOperationSourceServerTaggedQuery(queryId), relativePath, changeTree);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // We've already removed the query. No big deal, ignore the update\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeAddEventRegistration(syncTree, query, eventRegistration, skipSetupListener = false) {\r\n    const path = query._path;\r\n    let serverCache = null;\r\n    let foundAncestorDefaultView = false;\r\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\r\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\r\n    syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\r\n        const relativePath = newRelativePath(pathToSyncPoint, path);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(sp, relativePath);\r\n        foundAncestorDefaultView =\r\n            foundAncestorDefaultView || syncPointHasCompleteView(sp);\r\n    });\r\n    let syncPoint = syncTree.syncPointTree_.get(path);\r\n    if (!syncPoint) {\r\n        syncPoint = new SyncPoint();\r\n        syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\r\n    }\r\n    else {\r\n        foundAncestorDefaultView =\r\n            foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    let serverCacheComplete;\r\n    if (serverCache != null) {\r\n        serverCacheComplete = true;\r\n    }\r\n    else {\r\n        serverCacheComplete = false;\r\n        serverCache = ChildrenNode.EMPTY_NODE;\r\n        const subtree = syncTree.syncPointTree_.subtree(path);\r\n        subtree.foreachChild((childName, childSyncPoint) => {\r\n            const completeCache = syncPointGetCompleteServerCache(childSyncPoint, newEmptyPath());\r\n            if (completeCache) {\r\n                serverCache = serverCache.updateImmediateChild(childName, completeCache);\r\n            }\r\n        });\r\n    }\r\n    const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\r\n    if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\r\n        // We need to track a tag for this query\r\n        const queryKey = syncTreeMakeQueryKey_(query);\r\n        assert(!syncTree.queryToTagMap.has(queryKey), 'View does not exist, but we have a tag');\r\n        const tag = syncTreeGetNextQueryTag_();\r\n        syncTree.queryToTagMap.set(queryKey, tag);\r\n        syncTree.tagToQueryMap.set(tag, queryKey);\r\n    }\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\r\n    let events = syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete);\r\n    if (!viewAlreadyExists && !foundAncestorDefaultView && !skipSetupListener) {\r\n        const view = syncPointViewForQuery(syncPoint, query);\r\n        events = events.concat(syncTreeSetupListener_(syncTree, query, view));\r\n    }\r\n    return events;\r\n}\r\n/**\r\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\r\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\r\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\r\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\r\n *\r\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\r\n *\r\n * @param path - The path to the data we want\r\n * @param writeIdsToExclude - A specific set to be excluded\r\n */\r\nfunction syncTreeCalcCompleteEventCache(syncTree, path, writeIdsToExclude) {\r\n    const includeHiddenSets = true;\r\n    const writeTree = syncTree.pendingWriteTree_;\r\n    const serverCache = syncTree.syncPointTree_.findOnPath(path, (pathSoFar, syncPoint) => {\r\n        const relativePath = newRelativePath(pathSoFar, path);\r\n        const serverCache = syncPointGetCompleteServerCache(syncPoint, relativePath);\r\n        if (serverCache) {\r\n            return serverCache;\r\n        }\r\n    });\r\n    return writeTreeCalcCompleteEventCache(writeTree, path, serverCache, writeIdsToExclude, includeHiddenSets);\r\n}\r\nfunction syncTreeGetServerValue(syncTree, query) {\r\n    const path = query._path;\r\n    let serverCache = null;\r\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\r\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\r\n    syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\r\n        const relativePath = newRelativePath(pathToSyncPoint, path);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(sp, relativePath);\r\n    });\r\n    let syncPoint = syncTree.syncPointTree_.get(path);\r\n    if (!syncPoint) {\r\n        syncPoint = new SyncPoint();\r\n        syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\r\n    }\r\n    else {\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    const serverCacheComplete = serverCache != null;\r\n    const serverCacheNode = serverCacheComplete\r\n        ? new CacheNode(serverCache, true, false)\r\n        : null;\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, query._path);\r\n    const view = syncPointGetView(syncPoint, query, writesCache, serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE, serverCacheComplete);\r\n    return viewGetCompleteNode(view);\r\n}\r\n/**\r\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\r\n *\r\n * NOTES:\r\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\r\n *\r\n * - We call applyOperation() on each SyncPoint passing three things:\r\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\r\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\r\n *   3. A snapshot Node with cached server data, if we have it.\r\n *\r\n * - We concatenate all of the events returned by each SyncPoint and return the result.\r\n */\r\nfunction syncTreeApplyOperationToSyncPoints_(syncTree, operation) {\r\n    return syncTreeApplyOperationHelper_(operation, syncTree.syncPointTree_, \r\n    /*serverCache=*/ null, writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath()));\r\n}\r\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\r\nfunction syncTreeApplyOperationHelper_(operation, syncPointTree, serverCache, writesCache) {\r\n    if (pathIsEmpty(operation.path)) {\r\n        return syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);\r\n    }\r\n    else {\r\n        const syncPoint = syncPointTree.get(newEmptyPath());\r\n        // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n        if (serverCache == null && syncPoint != null) {\r\n            serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n        }\r\n        let events = [];\r\n        const childName = pathGetFront(operation.path);\r\n        const childOperation = operation.operationForChild(childName);\r\n        const childTree = syncPointTree.children.get(childName);\r\n        if (childTree && childOperation) {\r\n            const childServerCache = serverCache\r\n                ? serverCache.getImmediateChild(childName)\r\n                : null;\r\n            const childWritesCache = writeTreeRefChild(writesCache, childName);\r\n            events = events.concat(syncTreeApplyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n        }\r\n        if (syncPoint) {\r\n            events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\r\n        }\r\n        return events;\r\n    }\r\n}\r\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\r\nfunction syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache) {\r\n    const syncPoint = syncPointTree.get(newEmptyPath());\r\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n    if (serverCache == null && syncPoint != null) {\r\n        serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    let events = [];\r\n    syncPointTree.children.inorderTraversal((childName, childTree) => {\r\n        const childServerCache = serverCache\r\n            ? serverCache.getImmediateChild(childName)\r\n            : null;\r\n        const childWritesCache = writeTreeRefChild(writesCache, childName);\r\n        const childOperation = operation.operationForChild(childName);\r\n        if (childOperation) {\r\n            events = events.concat(syncTreeApplyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n        }\r\n    });\r\n    if (syncPoint) {\r\n        events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\r\n    }\r\n    return events;\r\n}\r\nfunction syncTreeCreateListenerForView_(syncTree, view) {\r\n    const query = view.query;\r\n    const tag = syncTreeTagForQuery(syncTree, query);\r\n    return {\r\n        hashFn: () => {\r\n            const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\r\n            return cache.hash();\r\n        },\r\n        onComplete: (status) => {\r\n            if (status === 'ok') {\r\n                if (tag) {\r\n                    return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\r\n                }\r\n                else {\r\n                    return syncTreeApplyListenComplete(syncTree, query._path);\r\n                }\r\n            }\r\n            else {\r\n                // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\r\n                // Note that this may need to be scoped to just this listener if we change permissions on filtered children\r\n                const error = errorForServerCode(status, query);\r\n                return syncTreeRemoveEventRegistration(syncTree, query, \r\n                /*eventRegistration*/ null, error);\r\n            }\r\n        }\r\n    };\r\n}\r\n/**\r\n * Return the tag associated with the given query.\r\n */\r\nfunction syncTreeTagForQuery(syncTree, query) {\r\n    const queryKey = syncTreeMakeQueryKey_(query);\r\n    return syncTree.queryToTagMap.get(queryKey);\r\n}\r\n/**\r\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\r\n */\r\nfunction syncTreeMakeQueryKey_(query) {\r\n    return query._path.toString() + '$' + query._queryIdentifier;\r\n}\r\n/**\r\n * Return the query associated with the given tag, if we have one\r\n */\r\nfunction syncTreeQueryKeyForTag_(syncTree, tag) {\r\n    return syncTree.tagToQueryMap.get(tag);\r\n}\r\n/**\r\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\r\n */\r\nfunction syncTreeParseQueryKey_(queryKey) {\r\n    const splitIndex = queryKey.indexOf('$');\r\n    assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');\r\n    return {\r\n        queryId: queryKey.substr(splitIndex + 1),\r\n        path: new Path(queryKey.substr(0, splitIndex))\r\n    };\r\n}\r\n/**\r\n * A helper method to apply tagged operations\r\n */\r\nfunction syncTreeApplyTaggedOperation_(syncTree, queryPath, operation) {\r\n    const syncPoint = syncTree.syncPointTree_.get(queryPath);\r\n    assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, queryPath);\r\n    return syncPointApplyOperation(syncPoint, operation, writesCache, null);\r\n}\r\n/**\r\n * This collapses multiple unfiltered views into a single view, since we only need a single\r\n * listener for them.\r\n */\r\nfunction syncTreeCollectDistinctViewsForSubTree_(subtree) {\r\n    return subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\r\n        if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\r\n            const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\r\n            return [completeView];\r\n        }\r\n        else {\r\n            // No complete view here, flatten any deeper listens into an array\r\n            let views = [];\r\n            if (maybeChildSyncPoint) {\r\n                views = syncPointGetQueryViews(maybeChildSyncPoint);\r\n            }\r\n            each(childMap, (_key, childViews) => {\r\n                views = views.concat(childViews);\r\n            });\r\n            return views;\r\n        }\r\n    });\r\n}\r\n/**\r\n * Normalizes a query to a query we send the server for listening\r\n *\r\n * @returns The normalized query\r\n */\r\nfunction syncTreeQueryForListening_(query) {\r\n    if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\r\n        // We treat queries that load all data as default queries\r\n        // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\r\n        // from Query\r\n        return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\r\n    }\r\n    else {\r\n        return query;\r\n    }\r\n}\r\nfunction syncTreeRemoveTags_(syncTree, queries) {\r\n    for (let j = 0; j < queries.length; ++j) {\r\n        const removedQuery = queries[j];\r\n        if (!removedQuery._queryParams.loadsAllData()) {\r\n            // We should have a tag for this\r\n            const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\r\n            const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\r\n            syncTree.queryToTagMap.delete(removedQueryKey);\r\n            syncTree.tagToQueryMap.delete(removedQueryTag);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Static accessor for query tags.\r\n */\r\nfunction syncTreeGetNextQueryTag_() {\r\n    return syncTreeNextQueryTag_++;\r\n}\r\n/**\r\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\r\n *\r\n * @returns This method can return events to support synchronous data sources\r\n */\r\nfunction syncTreeSetupListener_(syncTree, query, view) {\r\n    const path = query._path;\r\n    const tag = syncTreeTagForQuery(syncTree, query);\r\n    const listener = syncTreeCreateListenerForView_(syncTree, view);\r\n    const events = syncTree.listenProvider_.startListening(syncTreeQueryForListening_(query), tag, listener.hashFn, listener.onComplete);\r\n    const subtree = syncTree.syncPointTree_.subtree(path);\r\n    // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\r\n    // may need to shadow other listens as well.\r\n    if (tag) {\r\n        assert(!syncPointHasCompleteView(subtree.value), \"If we're adding a query, it shouldn't be shadowed\");\r\n    }\r\n    else {\r\n        // Shadow everything at or below this location, this is a default listener.\r\n        const queriesToStop = subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\r\n            if (!pathIsEmpty(relativePath) &&\r\n                maybeChildSyncPoint &&\r\n                syncPointHasCompleteView(maybeChildSyncPoint)) {\r\n                return [syncPointGetCompleteView(maybeChildSyncPoint).query];\r\n            }\r\n            else {\r\n                // No default listener here, flatten any deeper queries into an array\r\n                let queries = [];\r\n                if (maybeChildSyncPoint) {\r\n                    queries = queries.concat(syncPointGetQueryViews(maybeChildSyncPoint).map(view => view.query));\r\n                }\r\n                each(childMap, (_key, childQueries) => {\r\n                    queries = queries.concat(childQueries);\r\n                });\r\n                return queries;\r\n            }\r\n        });\r\n        for (let i = 0; i < queriesToStop.length; ++i) {\r\n            const queryToStop = queriesToStop[i];\r\n            syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToStop), syncTreeTagForQuery(syncTree, queryToStop));\r\n        }\r\n    }\r\n    return events;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ExistingValueProvider {\r\n    constructor(node_) {\r\n        this.node_ = node_;\r\n    }\r\n    getImmediateChild(childName) {\r\n        const child = this.node_.getImmediateChild(childName);\r\n        return new ExistingValueProvider(child);\r\n    }\r\n    node() {\r\n        return this.node_;\r\n    }\r\n}\r\nclass DeferredValueProvider {\r\n    constructor(syncTree, path) {\r\n        this.syncTree_ = syncTree;\r\n        this.path_ = path;\r\n    }\r\n    getImmediateChild(childName) {\r\n        const childPath = pathChild(this.path_, childName);\r\n        return new DeferredValueProvider(this.syncTree_, childPath);\r\n    }\r\n    node() {\r\n        return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\r\n    }\r\n}\r\n/**\r\n * Generate placeholders for deferred values.\r\n */\r\nconst generateWithValues = function (values) {\r\n    values = values || {};\r\n    values['timestamp'] = values['timestamp'] || new Date().getTime();\r\n    return values;\r\n};\r\n/**\r\n * Value to use when firing local events. When writing server values, fire\r\n * local events with an approximate value, otherwise return value as-is.\r\n */\r\nconst resolveDeferredLeafValue = function (value, existingVal, serverValues) {\r\n    if (!value || typeof value !== 'object') {\r\n        return value;\r\n    }\r\n    assert('.sv' in value, 'Unexpected leaf node or priority contents');\r\n    if (typeof value['.sv'] === 'string') {\r\n        return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\r\n    }\r\n    else if (typeof value['.sv'] === 'object') {\r\n        return resolveComplexDeferredValue(value['.sv'], existingVal);\r\n    }\r\n    else {\r\n        assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\r\n    }\r\n};\r\nconst resolveScalarDeferredValue = function (op, existing, serverValues) {\r\n    switch (op) {\r\n        case 'timestamp':\r\n            return serverValues['timestamp'];\r\n        default:\r\n            assert(false, 'Unexpected server value: ' + op);\r\n    }\r\n};\r\nconst resolveComplexDeferredValue = function (op, existing, unused) {\r\n    if (!op.hasOwnProperty('increment')) {\r\n        assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\r\n    }\r\n    const delta = op['increment'];\r\n    if (typeof delta !== 'number') {\r\n        assert(false, 'Unexpected increment value: ' + delta);\r\n    }\r\n    const existingNode = existing.node();\r\n    assert(existingNode !== null && typeof existingNode !== 'undefined', 'Expected ChildrenNode.EMPTY_NODE for nulls');\r\n    // Incrementing a non-number sets the value to the incremented amount\r\n    if (!existingNode.isLeafNode()) {\r\n        return delta;\r\n    }\r\n    const leaf = existingNode;\r\n    const existingVal = leaf.getValue();\r\n    if (typeof existingVal !== 'number') {\r\n        return delta;\r\n    }\r\n    // No need to do over/underflow arithmetic here because JS only handles floats under the covers\r\n    return existingVal + delta;\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the tree with the\r\n * specified generated replacement values.\r\n * @param path - path to which write is relative\r\n * @param node - new data written at path\r\n * @param syncTree - current data\r\n */\r\nconst resolveDeferredValueTree = function (path, node, syncTree, serverValues) {\r\n    return resolveDeferredValue(node, new DeferredValueProvider(syncTree, path), serverValues);\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the node with the\r\n * specified generated replacement values.  If there are no server values in the node,\r\n * it'll be returned as-is.\r\n */\r\nconst resolveDeferredValueSnapshot = function (node, existing, serverValues) {\r\n    return resolveDeferredValue(node, new ExistingValueProvider(existing), serverValues);\r\n};\r\nfunction resolveDeferredValue(node, existingVal, serverValues) {\r\n    const rawPri = node.getPriority().val();\r\n    const priority = resolveDeferredLeafValue(rawPri, existingVal.getImmediateChild('.priority'), serverValues);\r\n    let newNode;\r\n    if (node.isLeafNode()) {\r\n        const leafNode = node;\r\n        const value = resolveDeferredLeafValue(leafNode.getValue(), existingVal, serverValues);\r\n        if (value !== leafNode.getValue() ||\r\n            priority !== leafNode.getPriority().val()) {\r\n            return new LeafNode(value, nodeFromJSON(priority));\r\n        }\r\n        else {\r\n            return node;\r\n        }\r\n    }\r\n    else {\r\n        const childrenNode = node;\r\n        newNode = childrenNode;\r\n        if (priority !== childrenNode.getPriority().val()) {\r\n            newNode = newNode.updatePriority(new LeafNode(priority));\r\n        }\r\n        childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n            const newChildNode = resolveDeferredValue(childNode, existingVal.getImmediateChild(childName), serverValues);\r\n            if (newChildNode !== childNode) {\r\n                newNode = newNode.updateImmediateChild(childName, newChildNode);\r\n            }\r\n        });\r\n        return newNode;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\r\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\r\n * children.\r\n */\r\nclass Tree {\r\n    /**\r\n     * @param name - Optional name of the node.\r\n     * @param parent - Optional parent node.\r\n     * @param node - Optional node to wrap.\r\n     */\r\n    constructor(name = '', parent = null, node = { children: {}, childCount: 0 }) {\r\n        this.name = name;\r\n        this.parent = parent;\r\n        this.node = node;\r\n    }\r\n}\r\n/**\r\n * Returns a sub-Tree for the given path.\r\n *\r\n * @param pathObj - Path to look up.\r\n * @returns Tree for path.\r\n */\r\nfunction treeSubTree(tree, pathObj) {\r\n    // TODO: Require pathObj to be Path?\r\n    let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\r\n    let child = tree, next = pathGetFront(path);\r\n    while (next !== null) {\r\n        const childNode = safeGet(child.node.children, next) || {\r\n            children: {},\r\n            childCount: 0\r\n        };\r\n        child = new Tree(next, child, childNode);\r\n        path = pathPopFront(path);\r\n        next = pathGetFront(path);\r\n    }\r\n    return child;\r\n}\r\n/**\r\n * Returns the data associated with this tree node.\r\n *\r\n * @returns The data or null if no data exists.\r\n */\r\nfunction treeGetValue(tree) {\r\n    return tree.node.value;\r\n}\r\n/**\r\n * Sets data to this tree node.\r\n *\r\n * @param value - Value to set.\r\n */\r\nfunction treeSetValue(tree, value) {\r\n    tree.node.value = value;\r\n    treeUpdateParents(tree);\r\n}\r\n/**\r\n * @returns Whether the tree has any children.\r\n */\r\nfunction treeHasChildren(tree) {\r\n    return tree.node.childCount > 0;\r\n}\r\n/**\r\n * @returns Whethe rthe tree is empty (no value or children).\r\n */\r\nfunction treeIsEmpty(tree) {\r\n    return treeGetValue(tree) === undefined && !treeHasChildren(tree);\r\n}\r\n/**\r\n * Calls action for each child of this tree node.\r\n *\r\n * @param action - Action to be called for each child.\r\n */\r\nfunction treeForEachChild(tree, action) {\r\n    each(tree.node.children, (child, childTree) => {\r\n        action(new Tree(child, tree, childTree));\r\n    });\r\n}\r\n/**\r\n * Does a depth-first traversal of this node's descendants, calling action for each one.\r\n *\r\n * @param action - Action to be called for each child.\r\n * @param includeSelf - Whether to call action on this node as well. Defaults to\r\n *   false.\r\n * @param childrenFirst - Whether to call action on children before calling it on\r\n *   parent.\r\n */\r\nfunction treeForEachDescendant(tree, action, includeSelf, childrenFirst) {\r\n    if (includeSelf && !childrenFirst) {\r\n        action(tree);\r\n    }\r\n    treeForEachChild(tree, child => {\r\n        treeForEachDescendant(child, action, true, childrenFirst);\r\n    });\r\n    if (includeSelf && childrenFirst) {\r\n        action(tree);\r\n    }\r\n}\r\n/**\r\n * Calls action on each ancestor node.\r\n *\r\n * @param action - Action to be called on each parent; return\r\n *   true to abort.\r\n * @param includeSelf - Whether to call action on this node as well.\r\n * @returns true if the action callback returned true.\r\n */\r\nfunction treeForEachAncestor(tree, action, includeSelf) {\r\n    let node = includeSelf ? tree : tree.parent;\r\n    while (node !== null) {\r\n        if (action(node)) {\r\n            return true;\r\n        }\r\n        node = node.parent;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * @returns The path of this tree node, as a Path.\r\n */\r\nfunction treeGetPath(tree) {\r\n    return new Path(tree.parent === null\r\n        ? tree.name\r\n        : treeGetPath(tree.parent) + '/' + tree.name);\r\n}\r\n/**\r\n * Adds or removes this child from its parent based on whether it's empty or not.\r\n */\r\nfunction treeUpdateParents(tree) {\r\n    if (tree.parent !== null) {\r\n        treeUpdateChild(tree.parent, tree.name, tree);\r\n    }\r\n}\r\n/**\r\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\r\n *\r\n * @param childName - The name of the child to update.\r\n * @param child - The child to update.\r\n */\r\nfunction treeUpdateChild(tree, childName, child) {\r\n    const childEmpty = treeIsEmpty(child);\r\n    const childExists = contains(tree.node.children, childName);\r\n    if (childEmpty && childExists) {\r\n        delete tree.node.children[childName];\r\n        tree.node.childCount--;\r\n        treeUpdateParents(tree);\r\n    }\r\n    else if (!childEmpty && !childExists) {\r\n        tree.node.children[childName] = child.node;\r\n        tree.node.childCount++;\r\n        treeUpdateParents(tree);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * True for invalid Firebase keys\r\n */\r\nconst INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * True for invalid Firebase paths.\r\n * Allows '/' in paths.\r\n */\r\nconst INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * Maximum number of characters to allow in leaf value\r\n */\r\nconst MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\r\nconst isValidKey = function (key) {\r\n    return (typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key));\r\n};\r\nconst isValidPathString = function (pathString) {\r\n    return (typeof pathString === 'string' &&\r\n        pathString.length !== 0 &&\r\n        !INVALID_PATH_REGEX_.test(pathString));\r\n};\r\nconst isValidRootPathString = function (pathString) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    return isValidPathString(pathString);\r\n};\r\nconst isValidPriority = function (priority) {\r\n    return (priority === null ||\r\n        typeof priority === 'string' ||\r\n        (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\r\n        (priority &&\r\n            typeof priority === 'object' &&\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            contains(priority, '.sv')));\r\n};\r\n/**\r\n * Pre-validate a datum passed as an argument to Firebase function.\r\n */\r\nconst validateFirebaseDataArg = function (fnName, value, path, optional) {\r\n    if (optional && value === undefined) {\r\n        return;\r\n    }\r\n    validateFirebaseData(errorPrefix(fnName, 'value'), value, path);\r\n};\r\n/**\r\n * Validate a data object client-side before sending to server.\r\n */\r\nconst validateFirebaseData = function (errorPrefix, data, path_) {\r\n    const path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\r\n    if (data === undefined) {\r\n        throw new Error(errorPrefix + 'contains undefined ' + validationPathToErrorString(path));\r\n    }\r\n    if (typeof data === 'function') {\r\n        throw new Error(errorPrefix +\r\n            'contains a function ' +\r\n            validationPathToErrorString(path) +\r\n            ' with contents = ' +\r\n            data.toString());\r\n    }\r\n    if (isInvalidJSONNumber(data)) {\r\n        throw new Error(errorPrefix +\r\n            'contains ' +\r\n            data.toString() +\r\n            ' ' +\r\n            validationPathToErrorString(path));\r\n    }\r\n    // Check max leaf size, but try to avoid the utf8 conversion if we can.\r\n    if (typeof data === 'string' &&\r\n        data.length > MAX_LEAF_SIZE_ / 3 &&\r\n        stringLength(data) > MAX_LEAF_SIZE_) {\r\n        throw new Error(errorPrefix +\r\n            'contains a string greater than ' +\r\n            MAX_LEAF_SIZE_ +\r\n            ' utf8 bytes ' +\r\n            validationPathToErrorString(path) +\r\n            \" ('\" +\r\n            data.substring(0, 50) +\r\n            \"...')\");\r\n    }\r\n    // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\r\n    // to save extra walking of large objects.\r\n    if (data && typeof data === 'object') {\r\n        let hasDotValue = false;\r\n        let hasActualChild = false;\r\n        each(data, (key, value) => {\r\n            if (key === '.value') {\r\n                hasDotValue = true;\r\n            }\r\n            else if (key !== '.priority' && key !== '.sv') {\r\n                hasActualChild = true;\r\n                if (!isValidKey(key)) {\r\n                    throw new Error(errorPrefix +\r\n                        ' contains an invalid key (' +\r\n                        key +\r\n                        ') ' +\r\n                        validationPathToErrorString(path) +\r\n                        '.  Keys must be non-empty strings ' +\r\n                        'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n                }\r\n            }\r\n            validationPathPush(path, key);\r\n            validateFirebaseData(errorPrefix, value, path);\r\n            validationPathPop(path);\r\n        });\r\n        if (hasDotValue && hasActualChild) {\r\n            throw new Error(errorPrefix +\r\n                ' contains \".value\" child ' +\r\n                validationPathToErrorString(path) +\r\n                ' in addition to actual children.');\r\n        }\r\n    }\r\n};\r\n/**\r\n * Pre-validate paths passed in the firebase function.\r\n */\r\nconst validateFirebaseMergePaths = function (errorPrefix, mergePaths) {\r\n    let i, curPath;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        const keys = pathSlice(curPath);\r\n        for (let j = 0; j < keys.length; j++) {\r\n            if (keys[j] === '.priority' && j === keys.length - 1) ;\r\n            else if (!isValidKey(keys[j])) {\r\n                throw new Error(errorPrefix +\r\n                    'contains an invalid key (' +\r\n                    keys[j] +\r\n                    ') in path ' +\r\n                    curPath.toString() +\r\n                    '. Keys must be non-empty strings ' +\r\n                    'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n            }\r\n        }\r\n    }\r\n    // Check that update keys are not descendants of each other.\r\n    // We rely on the property that sorting guarantees that ancestors come\r\n    // right before descendants.\r\n    mergePaths.sort(pathCompare);\r\n    let prevPath = null;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        if (prevPath !== null && pathContains(prevPath, curPath)) {\r\n            throw new Error(errorPrefix +\r\n                'contains a path ' +\r\n                prevPath.toString() +\r\n                ' that is ancestor of another path ' +\r\n                curPath.toString());\r\n        }\r\n        prevPath = curPath;\r\n    }\r\n};\r\n/**\r\n * pre-validate an object passed as an argument to firebase function (\r\n * must be an object - e.g. for firebase.update()).\r\n */\r\nconst validateFirebaseMergeDataArg = function (fnName, data, path, optional) {\r\n    if (optional && data === undefined) {\r\n        return;\r\n    }\r\n    const errorPrefix$1 = errorPrefix(fnName, 'values');\r\n    if (!(data && typeof data === 'object') || Array.isArray(data)) {\r\n        throw new Error(errorPrefix$1 + ' must be an object containing the children to replace.');\r\n    }\r\n    const mergePaths = [];\r\n    each(data, (key, value) => {\r\n        const curPath = new Path(key);\r\n        validateFirebaseData(errorPrefix$1, value, pathChild(path, curPath));\r\n        if (pathGetBack(curPath) === '.priority') {\r\n            if (!isValidPriority(value)) {\r\n                throw new Error(errorPrefix$1 +\r\n                    \"contains an invalid value for '\" +\r\n                    curPath.toString() +\r\n                    \"', which must be a valid \" +\r\n                    'Firebase priority (a string, finite number, server value, or null).');\r\n            }\r\n        }\r\n        mergePaths.push(curPath);\r\n    });\r\n    validateFirebaseMergePaths(errorPrefix$1, mergePaths);\r\n};\r\nconst validatePriority = function (fnName, priority, optional) {\r\n    if (optional && priority === undefined) {\r\n        return;\r\n    }\r\n    if (isInvalidJSONNumber(priority)) {\r\n        throw new Error(errorPrefix(fnName, 'priority') +\r\n            'is ' +\r\n            priority.toString() +\r\n            ', but must be a valid Firebase priority (a string, finite number, ' +\r\n            'server value, or null).');\r\n    }\r\n    // Special case to allow importing data with a .sv.\r\n    if (!isValidPriority(priority)) {\r\n        throw new Error(errorPrefix(fnName, 'priority') +\r\n            'must be a valid Firebase priority ' +\r\n            '(a string, finite number, server value, or null).');\r\n    }\r\n};\r\nconst validateKey = function (fnName, argumentName, key, optional) {\r\n    if (optional && key === undefined) {\r\n        return;\r\n    }\r\n    if (!isValidKey(key)) {\r\n        throw new Error(errorPrefix(fnName, argumentName) +\r\n            'was an invalid key = \"' +\r\n            key +\r\n            '\".  Firebase keys must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").');\r\n    }\r\n};\r\n/**\r\n * @internal\r\n */\r\nconst validatePathString = function (fnName, argumentName, pathString, optional) {\r\n    if (optional && pathString === undefined) {\r\n        return;\r\n    }\r\n    if (!isValidPathString(pathString)) {\r\n        throw new Error(errorPrefix(fnName, argumentName) +\r\n            'was an invalid path = \"' +\r\n            pathString +\r\n            '\". Paths must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\r\n    }\r\n};\r\nconst validateRootPathString = function (fnName, argumentName, pathString, optional) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    validatePathString(fnName, argumentName, pathString, optional);\r\n};\r\n/**\r\n * @internal\r\n */\r\nconst validateWritablePath = function (fnName, path) {\r\n    if (pathGetFront(path) === '.info') {\r\n        throw new Error(fnName + \" failed = Can't modify data under /.info/\");\r\n    }\r\n};\r\nconst validateUrl = function (fnName, parsedUrl) {\r\n    // TODO = Validate server better.\r\n    const pathString = parsedUrl.path.toString();\r\n    if (!(typeof parsedUrl.repoInfo.host === 'string') ||\r\n        parsedUrl.repoInfo.host.length === 0 ||\r\n        (!isValidKey(parsedUrl.repoInfo.namespace) &&\r\n            parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\r\n        (pathString.length !== 0 && !isValidRootPathString(pathString))) {\r\n        throw new Error(errorPrefix(fnName, 'url') +\r\n            'must be a valid firebase URL and ' +\r\n            'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".');\r\n    }\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The event queue serves a few purposes:\r\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\r\n *    events being queued.\r\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\r\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\r\n *    left off, ensuring that the events are still raised synchronously and in order.\r\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\r\n *    events are raised synchronously.\r\n *\r\n * NOTE: This can all go away if/when we move to async events.\r\n *\r\n */\r\nclass EventQueue {\r\n    constructor() {\r\n        this.eventLists_ = [];\r\n        /**\r\n         * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\r\n         */\r\n        this.recursionDepth_ = 0;\r\n    }\r\n}\r\n/**\r\n * @param eventDataList - The new events to queue.\r\n */\r\nfunction eventQueueQueueEvents(eventQueue, eventDataList) {\r\n    // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\r\n    let currList = null;\r\n    for (let i = 0; i < eventDataList.length; i++) {\r\n        const data = eventDataList[i];\r\n        const path = data.getPath();\r\n        if (currList !== null && !pathEquals(path, currList.path)) {\r\n            eventQueue.eventLists_.push(currList);\r\n            currList = null;\r\n        }\r\n        if (currList === null) {\r\n            currList = { events: [], path };\r\n        }\r\n        currList.events.push(data);\r\n    }\r\n    if (currList) {\r\n        eventQueue.eventLists_.push(currList);\r\n    }\r\n}\r\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones)\r\n * for the specified path.\r\n *\r\n * It is assumed that the new events are all for the specified path.\r\n *\r\n * @param path - The path to raise events for.\r\n * @param eventDataList - The new events to raise.\r\n */\r\nfunction eventQueueRaiseEventsAtPath(eventQueue, path, eventDataList) {\r\n    eventQueueQueueEvents(eventQueue, eventDataList);\r\n    eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathEquals(eventPath, path));\r\n}\r\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\r\n * locations related to the specified change path (i.e. all ancestors and descendants).\r\n *\r\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\r\n *\r\n * @param changedPath - The path to raise events for.\r\n * @param eventDataList - The events to raise\r\n */\r\nfunction eventQueueRaiseEventsForChangedPath(eventQueue, changedPath, eventDataList) {\r\n    eventQueueQueueEvents(eventQueue, eventDataList);\r\n    eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathContains(eventPath, changedPath) ||\r\n        pathContains(changedPath, eventPath));\r\n}\r\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, predicate) {\r\n    eventQueue.recursionDepth_++;\r\n    let sentAll = true;\r\n    for (let i = 0; i < eventQueue.eventLists_.length; i++) {\r\n        const eventList = eventQueue.eventLists_[i];\r\n        if (eventList) {\r\n            const eventPath = eventList.path;\r\n            if (predicate(eventPath)) {\r\n                eventListRaise(eventQueue.eventLists_[i]);\r\n                eventQueue.eventLists_[i] = null;\r\n            }\r\n            else {\r\n                sentAll = false;\r\n            }\r\n        }\r\n    }\r\n    if (sentAll) {\r\n        eventQueue.eventLists_ = [];\r\n    }\r\n    eventQueue.recursionDepth_--;\r\n}\r\n/**\r\n * Iterates through the list and raises each event\r\n */\r\nfunction eventListRaise(eventList) {\r\n    for (let i = 0; i < eventList.events.length; i++) {\r\n        const eventData = eventList.events[i];\r\n        if (eventData !== null) {\r\n            eventList.events[i] = null;\r\n            const eventFn = eventData.getEventRunner();\r\n            if (logger) {\r\n                log('event: ' + eventData.toString());\r\n            }\r\n            exceptionGuard(eventFn);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst INTERRUPT_REASON = 'repo_interrupt';\r\n/**\r\n * If a transaction does not succeed after 25 retries, we abort it. Among other\r\n * things this ensure that if there's ever a bug causing a mismatch between\r\n * client / server hashes for some data, we won't retry indefinitely.\r\n */\r\nconst MAX_TRANSACTION_RETRIES = 25;\r\n/**\r\n * A connection to a single data repository.\r\n */\r\nclass Repo {\r\n    constructor(repoInfo_, forceRestClient_, authTokenProvider_, appCheckProvider_) {\r\n        this.repoInfo_ = repoInfo_;\r\n        this.forceRestClient_ = forceRestClient_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckProvider_ = appCheckProvider_;\r\n        this.dataUpdateCount = 0;\r\n        this.statsListener_ = null;\r\n        this.eventQueue_ = new EventQueue();\r\n        this.nextWriteId_ = 1;\r\n        this.interceptServerDataCallback_ = null;\r\n        /** A list of data pieces and paths to be set when this client disconnects. */\r\n        this.onDisconnect_ = newSparseSnapshotTree();\r\n        /** Stores queues of outstanding transactions for Firebase locations. */\r\n        this.transactionQueueTree_ = new Tree();\r\n        // TODO: This should be @private but it's used by test_access.js and internal.js\r\n        this.persistentConnection_ = null;\r\n        // This key is intentionally not updated if RepoInfo is later changed or replaced\r\n        this.key = this.repoInfo_.toURLString();\r\n    }\r\n    /**\r\n     * @returns The URL corresponding to the root of this Firebase.\r\n     */\r\n    toString() {\r\n        return ((this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host);\r\n    }\r\n}\r\nfunction repoStart(repo, appId, authOverride) {\r\n    repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\r\n    if (repo.forceRestClient_ || beingCrawled()) {\r\n        repo.server_ = new ReadonlyRestClient(repo.repoInfo_, (pathString, data, isMerge, tag) => {\r\n            repoOnDataUpdate(repo, pathString, data, isMerge, tag);\r\n        }, repo.authTokenProvider_, repo.appCheckProvider_);\r\n        // Minor hack: Fire onConnect immediately, since there's no actual connection.\r\n        setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */ true), 0);\r\n    }\r\n    else {\r\n        // Validate authOverride\r\n        if (typeof authOverride !== 'undefined' && authOverride !== null) {\r\n            if (typeof authOverride !== 'object') {\r\n                throw new Error('Only objects are supported for option databaseAuthVariableOverride');\r\n            }\r\n            try {\r\n                stringify(authOverride);\r\n            }\r\n            catch (e) {\r\n                throw new Error('Invalid authOverride provided: ' + e);\r\n            }\r\n        }\r\n        repo.persistentConnection_ = new PersistentConnection(repo.repoInfo_, appId, (pathString, data, isMerge, tag) => {\r\n            repoOnDataUpdate(repo, pathString, data, isMerge, tag);\r\n        }, (connectStatus) => {\r\n            repoOnConnectStatus(repo, connectStatus);\r\n        }, (updates) => {\r\n            repoOnServerInfoUpdate(repo, updates);\r\n        }, repo.authTokenProvider_, repo.appCheckProvider_, authOverride);\r\n        repo.server_ = repo.persistentConnection_;\r\n    }\r\n    repo.authTokenProvider_.addTokenChangeListener(token => {\r\n        repo.server_.refreshAuthToken(token);\r\n    });\r\n    repo.appCheckProvider_.addTokenChangeListener(result => {\r\n        repo.server_.refreshAppCheckToken(result.token);\r\n    });\r\n    // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\r\n    // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\r\n    repo.statsReporter_ = statsManagerGetOrCreateReporter(repo.repoInfo_, () => new StatsReporter(repo.stats_, repo.server_));\r\n    // Used for .info.\r\n    repo.infoData_ = new SnapshotHolder();\r\n    repo.infoSyncTree_ = new SyncTree({\r\n        startListening: (query, tag, currentHashFn, onComplete) => {\r\n            let infoEvents = [];\r\n            const node = repo.infoData_.getNode(query._path);\r\n            // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\r\n            // on initial data...\r\n            if (!node.isEmpty()) {\r\n                infoEvents = syncTreeApplyServerOverwrite(repo.infoSyncTree_, query._path, node);\r\n                setTimeout(() => {\r\n                    onComplete('ok');\r\n                }, 0);\r\n            }\r\n            return infoEvents;\r\n        },\r\n        stopListening: () => { }\r\n    });\r\n    repoUpdateInfo(repo, 'connected', false);\r\n    repo.serverSyncTree_ = new SyncTree({\r\n        startListening: (query, tag, currentHashFn, onComplete) => {\r\n            repo.server_.listen(query, currentHashFn, tag, (status, data) => {\r\n                const events = onComplete(status, data);\r\n                eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);\r\n            });\r\n            // No synchronous events for network-backed sync trees\r\n            return [];\r\n        },\r\n        stopListening: (query, tag) => {\r\n            repo.server_.unlisten(query, tag);\r\n        }\r\n    });\r\n}\r\n/**\r\n * @returns The time in milliseconds, taking the server offset into account if we have one.\r\n */\r\nfunction repoServerTime(repo) {\r\n    const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\r\n    const offset = offsetNode.val() || 0;\r\n    return new Date().getTime() + offset;\r\n}\r\n/**\r\n * Generate ServerValues using some variables from the repo object.\r\n */\r\nfunction repoGenerateServerValues(repo) {\r\n    return generateWithValues({\r\n        timestamp: repoServerTime(repo)\r\n    });\r\n}\r\n/**\r\n * Called by realtime when we get new messages from the server.\r\n */\r\nfunction repoOnDataUpdate(repo, pathString, data, isMerge, tag) {\r\n    // For testing.\r\n    repo.dataUpdateCount++;\r\n    const path = new Path(pathString);\r\n    data = repo.interceptServerDataCallback_\r\n        ? repo.interceptServerDataCallback_(pathString, data)\r\n        : data;\r\n    let events = [];\r\n    if (tag) {\r\n        if (isMerge) {\r\n            const taggedChildren = map(data, (raw) => nodeFromJSON(raw));\r\n            events = syncTreeApplyTaggedQueryMerge(repo.serverSyncTree_, path, taggedChildren, tag);\r\n        }\r\n        else {\r\n            const taggedSnap = nodeFromJSON(data);\r\n            events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, path, taggedSnap, tag);\r\n        }\r\n    }\r\n    else if (isMerge) {\r\n        const changedChildren = map(data, (raw) => nodeFromJSON(raw));\r\n        events = syncTreeApplyServerMerge(repo.serverSyncTree_, path, changedChildren);\r\n    }\r\n    else {\r\n        const snap = nodeFromJSON(data);\r\n        events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\r\n    }\r\n    let affectedPath = path;\r\n    if (events.length > 0) {\r\n        // Since we have a listener outstanding for each transaction, receiving any events\r\n        // is a proxy for some change having occurred.\r\n        affectedPath = repoRerunTransactions(repo, path);\r\n    }\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\r\n}\r\nfunction repoOnConnectStatus(repo, connectStatus) {\r\n    repoUpdateInfo(repo, 'connected', connectStatus);\r\n    if (connectStatus === false) {\r\n        repoRunOnDisconnectEvents(repo);\r\n    }\r\n}\r\nfunction repoOnServerInfoUpdate(repo, updates) {\r\n    each(updates, (key, value) => {\r\n        repoUpdateInfo(repo, key, value);\r\n    });\r\n}\r\nfunction repoUpdateInfo(repo, pathString, value) {\r\n    const path = new Path('/.info/' + pathString);\r\n    const newNode = nodeFromJSON(value);\r\n    repo.infoData_.updateSnapshot(path, newNode);\r\n    const events = syncTreeApplyServerOverwrite(repo.infoSyncTree_, path, newNode);\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n}\r\nfunction repoGetNextWriteId(repo) {\r\n    return repo.nextWriteId_++;\r\n}\r\n/**\r\n * The purpose of `getValue` is to return the latest known value\r\n * satisfying `query`.\r\n *\r\n * This method will first check for in-memory cached values\r\n * belonging to active listeners. If they are found, such values\r\n * are considered to be the most up-to-date.\r\n *\r\n * If the client is not connected, this method will wait until the\r\n *  repo has established a connection and then request the value for `query`.\r\n * If the client is not able to retrieve the query result for another reason,\r\n * it reports an error.\r\n *\r\n * @param query - The query to surface a value for.\r\n */\r\nfunction repoGetValue(repo, query, eventRegistration) {\r\n    // Only active queries are cached. There is no persisted cache.\r\n    const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\r\n    if (cached != null) {\r\n        return Promise.resolve(cached);\r\n    }\r\n    return repo.server_.get(query).then(payload => {\r\n        const node = nodeFromJSON(payload).withIndex(query._queryParams.getIndex());\r\n        /**\r\n         * Below we simulate the actions of an `onlyOnce` `onValue()` event where:\r\n         * Add an event registration,\r\n         * Update data at the path,\r\n         * Raise any events,\r\n         * Cleanup the SyncTree\r\n         */\r\n        syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration, true);\r\n        let events;\r\n        if (query._queryParams.loadsAllData()) {\r\n            events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, query._path, node);\r\n        }\r\n        else {\r\n            const tag = syncTreeTagForQuery(repo.serverSyncTree_, query);\r\n            events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, query._path, node, tag);\r\n        }\r\n        /*\r\n         * We need to raise events in the scenario where `get()` is called at a parent path, and\r\n         * while the `get()` is pending, `onValue` is called at a child location. While get() is waiting\r\n         * for the data, `onValue` will register a new event. Then, get() will come back, and update the syncTree\r\n         * and its corresponding serverCache, including the child location where `onValue` is called. Then,\r\n         * `onValue` will receive the event from the server, but look at the syncTree and see that the data received\r\n         * from the server is already at the SyncPoint, and so the `onValue` callback will never get fired.\r\n         * Calling `eventQueueRaiseEventsForChangedPath()` is the correct way to propagate the events and\r\n         * ensure the corresponding child events will get fired.\r\n         */\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);\r\n        syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration, null, true);\r\n        return node;\r\n    }, err => {\r\n        repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\r\n        return Promise.reject(new Error(err));\r\n    });\r\n}\r\nfunction repoSetWithPriority(repo, path, newVal, newPriority, onComplete) {\r\n    repoLog(repo, 'set', {\r\n        path: path.toString(),\r\n        value: newVal,\r\n        priority: newPriority\r\n    });\r\n    // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\r\n    // (b) store unresolved paths on JSON parse\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\r\n    const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\r\n    const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, existing, serverValues);\r\n    const writeId = repoGetNextWriteId(repo);\r\n    const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, writeId, true);\r\n    eventQueueQueueEvents(repo.eventQueue_, events);\r\n    repo.server_.put(path.toString(), newNodeUnresolved.val(/*export=*/ true), (status, errorReason) => {\r\n        const success = status === 'ok';\r\n        if (!success) {\r\n            warn('set at ' + path + ' failed: ' + status);\r\n        }\r\n        const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n    const affectedPath = repoAbortTransactions(repo, path);\r\n    repoRerunTransactions(repo, affectedPath);\r\n    // We queued the events above, so just flush the queue here\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\r\n}\r\nfunction repoUpdate(repo, path, childrenToMerge, onComplete) {\r\n    repoLog(repo, 'update', { path: path.toString(), value: childrenToMerge });\r\n    // Start with our existing data and merge each child into it.\r\n    let empty = true;\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const changedChildren = {};\r\n    each(childrenToMerge, (changedKey, changedValue) => {\r\n        empty = false;\r\n        changedChildren[changedKey] = resolveDeferredValueTree(pathChild(path, changedKey), nodeFromJSON(changedValue), repo.serverSyncTree_, serverValues);\r\n    });\r\n    if (!empty) {\r\n        const writeId = repoGetNextWriteId(repo);\r\n        const events = syncTreeApplyUserMerge(repo.serverSyncTree_, path, changedChildren, writeId);\r\n        eventQueueQueueEvents(repo.eventQueue_, events);\r\n        repo.server_.merge(path.toString(), childrenToMerge, (status, errorReason) => {\r\n            const success = status === 'ok';\r\n            if (!success) {\r\n                warn('update at ' + path + ' failed: ' + status);\r\n            }\r\n            const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\r\n            const affectedPath = clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\r\n            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, clearEvents);\r\n            repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n        });\r\n        each(childrenToMerge, (changedPath) => {\r\n            const affectedPath = repoAbortTransactions(repo, pathChild(path, changedPath));\r\n            repoRerunTransactions(repo, affectedPath);\r\n        });\r\n        // We queued the events above, so just flush the queue here\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\r\n    }\r\n    else {\r\n        log(\"update() called with empty data.  Don't do anything.\");\r\n        repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\r\n    }\r\n}\r\n/**\r\n * Applies all of the changes stored up in the onDisconnect_ tree.\r\n */\r\nfunction repoRunOnDisconnectEvents(repo) {\r\n    repoLog(repo, 'onDisconnectEvents');\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const resolvedOnDisconnectTree = newSparseSnapshotTree();\r\n    sparseSnapshotTreeForEachTree(repo.onDisconnect_, newEmptyPath(), (path, node) => {\r\n        const resolved = resolveDeferredValueTree(path, node, repo.serverSyncTree_, serverValues);\r\n        sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\r\n    });\r\n    let events = [];\r\n    sparseSnapshotTreeForEachTree(resolvedOnDisconnectTree, newEmptyPath(), (path, snap) => {\r\n        events = events.concat(syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap));\r\n        const affectedPath = repoAbortTransactions(repo, path);\r\n        repoRerunTransactions(repo, affectedPath);\r\n    });\r\n    repo.onDisconnect_ = newSparseSnapshotTree();\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\r\n}\r\nfunction repoOnDisconnectCancel(repo, path, onComplete) {\r\n    repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeForget(repo.onDisconnect_, path);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectSet(repo, path, value, onComplete) {\r\n    const newNode = nodeFromJSON(value);\r\n    repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectSetWithPriority(repo, path, value, priority, onComplete) {\r\n    const newNode = nodeFromJSON(value, priority);\r\n    repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectUpdate(repo, path, childrenToMerge, onComplete) {\r\n    if (isEmpty(childrenToMerge)) {\r\n        log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\r\n        repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\r\n        return;\r\n    }\r\n    repo.server_.onDisconnectMerge(path.toString(), childrenToMerge, (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            each(childrenToMerge, (childName, childNode) => {\r\n                const newChildNode = nodeFromJSON(childNode);\r\n                sparseSnapshotTreeRemember(repo.onDisconnect_, pathChild(path, childName), newChildNode);\r\n            });\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoAddEventCallbackForQuery(repo, query, eventRegistration) {\r\n    let events;\r\n    if (pathGetFront(query._path) === '.info') {\r\n        events = syncTreeAddEventRegistration(repo.infoSyncTree_, query, eventRegistration);\r\n    }\r\n    else {\r\n        events = syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration);\r\n    }\r\n    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\r\n}\r\nfunction repoRemoveEventCallbackForQuery(repo, query, eventRegistration) {\r\n    // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\r\n    // a little bit by handling the return values anyways.\r\n    let events;\r\n    if (pathGetFront(query._path) === '.info') {\r\n        events = syncTreeRemoveEventRegistration(repo.infoSyncTree_, query, eventRegistration);\r\n    }\r\n    else {\r\n        events = syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration);\r\n    }\r\n    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\r\n}\r\nfunction repoInterrupt(repo) {\r\n    if (repo.persistentConnection_) {\r\n        repo.persistentConnection_.interrupt(INTERRUPT_REASON);\r\n    }\r\n}\r\nfunction repoResume(repo) {\r\n    if (repo.persistentConnection_) {\r\n        repo.persistentConnection_.resume(INTERRUPT_REASON);\r\n    }\r\n}\r\nfunction repoLog(repo, ...varArgs) {\r\n    let prefix = '';\r\n    if (repo.persistentConnection_) {\r\n        prefix = repo.persistentConnection_.id + ':';\r\n    }\r\n    log(prefix, ...varArgs);\r\n}\r\nfunction repoCallOnCompleteCallback(repo, callback, status, errorReason) {\r\n    if (callback) {\r\n        exceptionGuard(() => {\r\n            if (status === 'ok') {\r\n                callback(null);\r\n            }\r\n            else {\r\n                const code = (status || 'error').toUpperCase();\r\n                let message = code;\r\n                if (errorReason) {\r\n                    message += ': ' + errorReason;\r\n                }\r\n                const error = new Error(message);\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                error.code = code;\r\n                callback(error);\r\n            }\r\n        });\r\n    }\r\n}\r\n/**\r\n * Creates a new transaction, adds it to the transactions we're tracking, and\r\n * sends it to the server if possible.\r\n *\r\n * @param path - Path at which to do transaction.\r\n * @param transactionUpdate - Update callback.\r\n * @param onComplete - Completion callback.\r\n * @param unwatcher - Function that will be called when the transaction no longer\r\n * need data updates for `path`.\r\n * @param applyLocally - Whether or not to make intermediate results visible\r\n */\r\nfunction repoStartTransaction(repo, path, transactionUpdate, onComplete, unwatcher, applyLocally) {\r\n    repoLog(repo, 'transaction on ' + path);\r\n    // Initialize transaction.\r\n    const transaction = {\r\n        path,\r\n        update: transactionUpdate,\r\n        onComplete,\r\n        // One of TransactionStatus enums.\r\n        status: null,\r\n        // Used when combining transactions at different locations to figure out\r\n        // which one goes first.\r\n        order: LUIDGenerator(),\r\n        // Whether to raise local events for this transaction.\r\n        applyLocally,\r\n        // Count of how many times we've retried the transaction.\r\n        retryCount: 0,\r\n        // Function to call to clean up our .on() listener.\r\n        unwatcher,\r\n        // Stores why a transaction was aborted.\r\n        abortReason: null,\r\n        currentWriteId: null,\r\n        currentInputSnapshot: null,\r\n        currentOutputSnapshotRaw: null,\r\n        currentOutputSnapshotResolved: null\r\n    };\r\n    // Run transaction initially.\r\n    const currentState = repoGetLatestState(repo, path, undefined);\r\n    transaction.currentInputSnapshot = currentState;\r\n    const newVal = transaction.update(currentState.val());\r\n    if (newVal === undefined) {\r\n        // Abort transaction.\r\n        transaction.unwatcher();\r\n        transaction.currentOutputSnapshotRaw = null;\r\n        transaction.currentOutputSnapshotResolved = null;\r\n        if (transaction.onComplete) {\r\n            transaction.onComplete(null, false, transaction.currentInputSnapshot);\r\n        }\r\n    }\r\n    else {\r\n        validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path);\r\n        // Mark as run and add to our queue.\r\n        transaction.status = 0 /* TransactionStatus.RUN */;\r\n        const queueNode = treeSubTree(repo.transactionQueueTree_, path);\r\n        const nodeQueue = treeGetValue(queueNode) || [];\r\n        nodeQueue.push(transaction);\r\n        treeSetValue(queueNode, nodeQueue);\r\n        // Update visibleData and raise events\r\n        // Note: We intentionally raise events after updating all of our\r\n        // transaction state, since the user could start new transactions from the\r\n        // event callbacks.\r\n        let priorityForNode;\r\n        if (typeof newVal === 'object' &&\r\n            newVal !== null &&\r\n            contains(newVal, '.priority')) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            priorityForNode = safeGet(newVal, '.priority');\r\n            assert(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' +\r\n                'Priority must be a valid string, finite number, server value, or null.');\r\n        }\r\n        else {\r\n            const currentNode = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) ||\r\n                ChildrenNode.EMPTY_NODE;\r\n            priorityForNode = currentNode.getPriority().val();\r\n        }\r\n        const serverValues = repoGenerateServerValues(repo);\r\n        const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\r\n        const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, currentState, serverValues);\r\n        transaction.currentOutputSnapshotRaw = newNodeUnresolved;\r\n        transaction.currentOutputSnapshotResolved = newNode;\r\n        transaction.currentWriteId = repoGetNextWriteId(repo);\r\n        const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, transaction.currentWriteId, transaction.applyLocally);\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n        repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n    }\r\n}\r\n/**\r\n * @param excludeSets - A specific set to exclude\r\n */\r\nfunction repoGetLatestState(repo, path, excludeSets) {\r\n    return (syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||\r\n        ChildrenNode.EMPTY_NODE);\r\n}\r\n/**\r\n * Sends any already-run transactions that aren't waiting for outstanding\r\n * transactions to complete.\r\n *\r\n * Externally it's called with no arguments, but it calls itself recursively\r\n * with a particular transactionQueueTree node to recurse through the tree.\r\n *\r\n * @param node - transactionQueueTree node to start at.\r\n */\r\nfunction repoSendReadyTransactions(repo, node = repo.transactionQueueTree_) {\r\n    // Before recursing, make sure any completed transactions are removed.\r\n    if (!node) {\r\n        repoPruneCompletedTransactionsBelowNode(repo, node);\r\n    }\r\n    if (treeGetValue(node)) {\r\n        const queue = repoBuildTransactionQueue(repo, node);\r\n        assert(queue.length > 0, 'Sending zero length transaction queue');\r\n        const allRun = queue.every((transaction) => transaction.status === 0 /* TransactionStatus.RUN */);\r\n        // If they're all run (and not sent), we can send them.  Else, we must wait.\r\n        if (allRun) {\r\n            repoSendTransactionQueue(repo, treeGetPath(node), queue);\r\n        }\r\n    }\r\n    else if (treeHasChildren(node)) {\r\n        treeForEachChild(node, childNode => {\r\n            repoSendReadyTransactions(repo, childNode);\r\n        });\r\n    }\r\n}\r\n/**\r\n * Given a list of run transactions, send them to the server and then handle\r\n * the result (success or failure).\r\n *\r\n * @param path - The location of the queue.\r\n * @param queue - Queue of transactions under the specified location.\r\n */\r\nfunction repoSendTransactionQueue(repo, path, queue) {\r\n    // Mark transactions as sent and increment retry count!\r\n    const setsToIgnore = queue.map(txn => {\r\n        return txn.currentWriteId;\r\n    });\r\n    const latestState = repoGetLatestState(repo, path, setsToIgnore);\r\n    let snapToSend = latestState;\r\n    const latestHash = latestState.hash();\r\n    for (let i = 0; i < queue.length; i++) {\r\n        const txn = queue[i];\r\n        assert(txn.status === 0 /* TransactionStatus.RUN */, 'tryToSendTransactionQueue_: items in queue should all be run.');\r\n        txn.status = 1 /* TransactionStatus.SENT */;\r\n        txn.retryCount++;\r\n        const relativePath = newRelativePath(path, txn.path);\r\n        // If we've gotten to this point, the output snapshot must be defined.\r\n        snapToSend = snapToSend.updateChild(relativePath /** @type {!Node} */, txn.currentOutputSnapshotRaw);\r\n    }\r\n    const dataToSend = snapToSend.val(true);\r\n    const pathToSend = path;\r\n    // Send the put.\r\n    repo.server_.put(pathToSend.toString(), dataToSend, (status) => {\r\n        repoLog(repo, 'transaction put response', {\r\n            path: pathToSend.toString(),\r\n            status\r\n        });\r\n        let events = [];\r\n        if (status === 'ok') {\r\n            // Queue up the callbacks and fire them after cleaning up all of our\r\n            // transaction state, since the callback could trigger more\r\n            // transactions or sets.\r\n            const callbacks = [];\r\n            for (let i = 0; i < queue.length; i++) {\r\n                queue[i].status = 2 /* TransactionStatus.COMPLETED */;\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId));\r\n                if (queue[i].onComplete) {\r\n                    // We never unset the output snapshot, and given that this\r\n                    // transaction is complete, it should be set\r\n                    callbacks.push(() => queue[i].onComplete(null, true, queue[i].currentOutputSnapshotResolved));\r\n                }\r\n                queue[i].unwatcher();\r\n            }\r\n            // Now remove the completed transactions.\r\n            repoPruneCompletedTransactionsBelowNode(repo, treeSubTree(repo.transactionQueueTree_, path));\r\n            // There may be pending transactions that we can now send.\r\n            repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n            // Finally, trigger onComplete callbacks.\r\n            for (let i = 0; i < callbacks.length; i++) {\r\n                exceptionGuard(callbacks[i]);\r\n            }\r\n        }\r\n        else {\r\n            // transactions are no longer sent.  Update their status appropriately.\r\n            if (status === 'datastale') {\r\n                for (let i = 0; i < queue.length; i++) {\r\n                    if (queue[i].status === 3 /* TransactionStatus.SENT_NEEDS_ABORT */) {\r\n                        queue[i].status = 4 /* TransactionStatus.NEEDS_ABORT */;\r\n                    }\r\n                    else {\r\n                        queue[i].status = 0 /* TransactionStatus.RUN */;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);\r\n                for (let i = 0; i < queue.length; i++) {\r\n                    queue[i].status = 4 /* TransactionStatus.NEEDS_ABORT */;\r\n                    queue[i].abortReason = status;\r\n                }\r\n            }\r\n            repoRerunTransactions(repo, path);\r\n        }\r\n    }, latestHash);\r\n}\r\n/**\r\n * Finds all transactions dependent on the data at changedPath and reruns them.\r\n *\r\n * Should be called any time cached data changes.\r\n *\r\n * Return the highest path that was affected by rerunning transactions. This\r\n * is the path at which events need to be raised for.\r\n *\r\n * @param changedPath - The path in mergedData that changed.\r\n * @returns The rootmost path that was affected by rerunning transactions.\r\n */\r\nfunction repoRerunTransactions(repo, changedPath) {\r\n    const rootMostTransactionNode = repoGetAncestorTransactionNode(repo, changedPath);\r\n    const path = treeGetPath(rootMostTransactionNode);\r\n    const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\r\n    repoRerunTransactionQueue(repo, queue, path);\r\n    return path;\r\n}\r\n/**\r\n * Does all the work of rerunning transactions (as well as cleans up aborted\r\n * transactions and whatnot).\r\n *\r\n * @param queue - The queue of transactions to run.\r\n * @param path - The path the queue is for.\r\n */\r\nfunction repoRerunTransactionQueue(repo, queue, path) {\r\n    if (queue.length === 0) {\r\n        return; // Nothing to do!\r\n    }\r\n    // Queue up the callbacks and fire them after cleaning up all of our\r\n    // transaction state, since the callback could trigger more transactions or\r\n    // sets.\r\n    const callbacks = [];\r\n    let events = [];\r\n    // Ignore all of the sets we're going to re-run.\r\n    const txnsToRerun = queue.filter(q => {\r\n        return q.status === 0 /* TransactionStatus.RUN */;\r\n    });\r\n    const setsToIgnore = txnsToRerun.map(q => {\r\n        return q.currentWriteId;\r\n    });\r\n    for (let i = 0; i < queue.length; i++) {\r\n        const transaction = queue[i];\r\n        const relativePath = newRelativePath(path, transaction.path);\r\n        let abortTransaction = false, abortReason;\r\n        assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');\r\n        if (transaction.status === 4 /* TransactionStatus.NEEDS_ABORT */) {\r\n            abortTransaction = true;\r\n            abortReason = transaction.abortReason;\r\n            events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n        }\r\n        else if (transaction.status === 0 /* TransactionStatus.RUN */) {\r\n            if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\r\n                abortTransaction = true;\r\n                abortReason = 'maxretry';\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n            }\r\n            else {\r\n                // This code reruns a transaction\r\n                const currentNode = repoGetLatestState(repo, transaction.path, setsToIgnore);\r\n                transaction.currentInputSnapshot = currentNode;\r\n                const newData = queue[i].update(currentNode.val());\r\n                if (newData !== undefined) {\r\n                    validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);\r\n                    let newDataNode = nodeFromJSON(newData);\r\n                    const hasExplicitPriority = typeof newData === 'object' &&\r\n                        newData != null &&\r\n                        contains(newData, '.priority');\r\n                    if (!hasExplicitPriority) {\r\n                        // Keep the old priority if there wasn't a priority explicitly specified.\r\n                        newDataNode = newDataNode.updatePriority(currentNode.getPriority());\r\n                    }\r\n                    const oldWriteId = transaction.currentWriteId;\r\n                    const serverValues = repoGenerateServerValues(repo);\r\n                    const newNodeResolved = resolveDeferredValueSnapshot(newDataNode, currentNode, serverValues);\r\n                    transaction.currentOutputSnapshotRaw = newDataNode;\r\n                    transaction.currentOutputSnapshotResolved = newNodeResolved;\r\n                    transaction.currentWriteId = repoGetNextWriteId(repo);\r\n                    // Mutates setsToIgnore in place\r\n                    setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\r\n                    events = events.concat(syncTreeApplyUserOverwrite(repo.serverSyncTree_, transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));\r\n                    events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true));\r\n                }\r\n                else {\r\n                    abortTransaction = true;\r\n                    abortReason = 'nodata';\r\n                    events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n                }\r\n            }\r\n        }\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n        events = [];\r\n        if (abortTransaction) {\r\n            // Abort.\r\n            queue[i].status = 2 /* TransactionStatus.COMPLETED */;\r\n            // Removing a listener can trigger pruning which can muck with\r\n            // mergedData/visibleData (as it prunes data). So defer the unwatcher\r\n            // until we're done.\r\n            (function (unwatcher) {\r\n                setTimeout(unwatcher, Math.floor(0));\r\n            })(queue[i].unwatcher);\r\n            if (queue[i].onComplete) {\r\n                if (abortReason === 'nodata') {\r\n                    callbacks.push(() => queue[i].onComplete(null, false, queue[i].currentInputSnapshot));\r\n                }\r\n                else {\r\n                    callbacks.push(() => queue[i].onComplete(new Error(abortReason), false, null));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Clean up completed transactions.\r\n    repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\r\n    // Now fire callbacks, now that we're in a good, known state.\r\n    for (let i = 0; i < callbacks.length; i++) {\r\n        exceptionGuard(callbacks[i]);\r\n    }\r\n    // Try to send the transaction result to the server.\r\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n}\r\n/**\r\n * Returns the rootmost ancestor node of the specified path that has a pending\r\n * transaction on it, or just returns the node for the given path if there are\r\n * no pending transactions on any ancestor.\r\n *\r\n * @param path - The location to start at.\r\n * @returns The rootmost node with a transaction.\r\n */\r\nfunction repoGetAncestorTransactionNode(repo, path) {\r\n    let front;\r\n    // Start at the root and walk deeper into the tree towards path until we\r\n    // find a node with pending transactions.\r\n    let transactionNode = repo.transactionQueueTree_;\r\n    front = pathGetFront(path);\r\n    while (front !== null && treeGetValue(transactionNode) === undefined) {\r\n        transactionNode = treeSubTree(transactionNode, front);\r\n        path = pathPopFront(path);\r\n        front = pathGetFront(path);\r\n    }\r\n    return transactionNode;\r\n}\r\n/**\r\n * Builds the queue of all transactions at or below the specified\r\n * transactionNode.\r\n *\r\n * @param transactionNode\r\n * @returns The generated queue.\r\n */\r\nfunction repoBuildTransactionQueue(repo, transactionNode) {\r\n    // Walk any child transaction queues and aggregate them into a single queue.\r\n    const transactionQueue = [];\r\n    repoAggregateTransactionQueuesForNode(repo, transactionNode, transactionQueue);\r\n    // Sort them by the order the transactions were created.\r\n    transactionQueue.sort((a, b) => a.order - b.order);\r\n    return transactionQueue;\r\n}\r\nfunction repoAggregateTransactionQueuesForNode(repo, node, queue) {\r\n    const nodeQueue = treeGetValue(node);\r\n    if (nodeQueue) {\r\n        for (let i = 0; i < nodeQueue.length; i++) {\r\n            queue.push(nodeQueue[i]);\r\n        }\r\n    }\r\n    treeForEachChild(node, child => {\r\n        repoAggregateTransactionQueuesForNode(repo, child, queue);\r\n    });\r\n}\r\n/**\r\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\r\n */\r\nfunction repoPruneCompletedTransactionsBelowNode(repo, node) {\r\n    const queue = treeGetValue(node);\r\n    if (queue) {\r\n        let to = 0;\r\n        for (let from = 0; from < queue.length; from++) {\r\n            if (queue[from].status !== 2 /* TransactionStatus.COMPLETED */) {\r\n                queue[to] = queue[from];\r\n                to++;\r\n            }\r\n        }\r\n        queue.length = to;\r\n        treeSetValue(node, queue.length > 0 ? queue : undefined);\r\n    }\r\n    treeForEachChild(node, childNode => {\r\n        repoPruneCompletedTransactionsBelowNode(repo, childNode);\r\n    });\r\n}\r\n/**\r\n * Aborts all transactions on ancestors or descendants of the specified path.\r\n * Called when doing a set() or update() since we consider them incompatible\r\n * with transactions.\r\n *\r\n * @param path - Path for which we want to abort related transactions.\r\n */\r\nfunction repoAbortTransactions(repo, path) {\r\n    const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\r\n    const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\r\n    treeForEachAncestor(transactionNode, (node) => {\r\n        repoAbortTransactionsOnNode(repo, node);\r\n    });\r\n    repoAbortTransactionsOnNode(repo, transactionNode);\r\n    treeForEachDescendant(transactionNode, (node) => {\r\n        repoAbortTransactionsOnNode(repo, node);\r\n    });\r\n    return affectedPath;\r\n}\r\n/**\r\n * Abort transactions stored in this transaction queue node.\r\n *\r\n * @param node - Node to abort transactions for.\r\n */\r\nfunction repoAbortTransactionsOnNode(repo, node) {\r\n    const queue = treeGetValue(node);\r\n    if (queue) {\r\n        // Queue up the callbacks and fire them after cleaning up all of our\r\n        // transaction state, since the callback could trigger more transactions\r\n        // or sets.\r\n        const callbacks = [];\r\n        // Go through queue.  Any already-sent transactions must be marked for\r\n        // abort, while the unsent ones can be immediately aborted and removed.\r\n        let events = [];\r\n        let lastSent = -1;\r\n        for (let i = 0; i < queue.length; i++) {\r\n            if (queue[i].status === 3 /* TransactionStatus.SENT_NEEDS_ABORT */) ;\r\n            else if (queue[i].status === 1 /* TransactionStatus.SENT */) {\r\n                assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');\r\n                lastSent = i;\r\n                // Mark transaction for abort when it comes back.\r\n                queue[i].status = 3 /* TransactionStatus.SENT_NEEDS_ABORT */;\r\n                queue[i].abortReason = 'set';\r\n            }\r\n            else {\r\n                assert(queue[i].status === 0 /* TransactionStatus.RUN */, 'Unexpected transaction status in abort');\r\n                // We can abort it immediately.\r\n                queue[i].unwatcher();\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId, true));\r\n                if (queue[i].onComplete) {\r\n                    callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, null));\r\n                }\r\n            }\r\n        }\r\n        if (lastSent === -1) {\r\n            // We're not waiting for any sent transactions.  We can clear the queue.\r\n            treeSetValue(node, undefined);\r\n        }\r\n        else {\r\n            // Remove the transactions we aborted.\r\n            queue.length = lastSent + 1;\r\n        }\r\n        // Now fire the callbacks.\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, treeGetPath(node), events);\r\n        for (let i = 0; i < callbacks.length; i++) {\r\n            exceptionGuard(callbacks[i]);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction decodePath(pathString) {\r\n    let pathStringDecoded = '';\r\n    const pieces = pathString.split('/');\r\n    for (let i = 0; i < pieces.length; i++) {\r\n        if (pieces[i].length > 0) {\r\n            let piece = pieces[i];\r\n            try {\r\n                piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\r\n            }\r\n            catch (e) { }\r\n            pathStringDecoded += '/' + piece;\r\n        }\r\n    }\r\n    return pathStringDecoded;\r\n}\r\n/**\r\n * @returns key value hash\r\n */\r\nfunction decodeQuery(queryString) {\r\n    const results = {};\r\n    if (queryString.charAt(0) === '?') {\r\n        queryString = queryString.substring(1);\r\n    }\r\n    for (const segment of queryString.split('&')) {\r\n        if (segment.length === 0) {\r\n            continue;\r\n        }\r\n        const kv = segment.split('=');\r\n        if (kv.length === 2) {\r\n            results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\r\n        }\r\n        else {\r\n            warn(`Invalid query segment '${segment}' in query '${queryString}'`);\r\n        }\r\n    }\r\n    return results;\r\n}\r\nconst parseRepoInfo = function (dataURL, nodeAdmin) {\r\n    const parsedUrl = parseDatabaseURL(dataURL), namespace = parsedUrl.namespace;\r\n    if (parsedUrl.domain === 'firebase.com') {\r\n        fatal(parsedUrl.host +\r\n            ' is no longer supported. ' +\r\n            'Please use <YOUR FIREBASE>.firebaseio.com instead');\r\n    }\r\n    // Catch common error of uninitialized namespace value.\r\n    if ((!namespace || namespace === 'undefined') &&\r\n        parsedUrl.domain !== 'localhost') {\r\n        fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');\r\n    }\r\n    if (!parsedUrl.secure) {\r\n        warnIfPageIsSecure();\r\n    }\r\n    const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\r\n    return {\r\n        repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, webSocketOnly, nodeAdmin, \r\n        /*persistenceKey=*/ '', \r\n        /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain),\r\n        path: new Path(parsedUrl.pathString)\r\n    };\r\n};\r\nconst parseDatabaseURL = function (dataURL) {\r\n    // Default to empty strings in the event of a malformed string.\r\n    let host = '', domain = '', subdomain = '', pathString = '', namespace = '';\r\n    // Always default to SSL, unless otherwise specified.\r\n    let secure = true, scheme = 'https', port = 443;\r\n    // Don't do any validation here. The caller is responsible for validating the result of parsing.\r\n    if (typeof dataURL === 'string') {\r\n        // Parse scheme.\r\n        let colonInd = dataURL.indexOf('//');\r\n        if (colonInd >= 0) {\r\n            scheme = dataURL.substring(0, colonInd - 1);\r\n            dataURL = dataURL.substring(colonInd + 2);\r\n        }\r\n        // Parse host, path, and query string.\r\n        let slashInd = dataURL.indexOf('/');\r\n        if (slashInd === -1) {\r\n            slashInd = dataURL.length;\r\n        }\r\n        let questionMarkInd = dataURL.indexOf('?');\r\n        if (questionMarkInd === -1) {\r\n            questionMarkInd = dataURL.length;\r\n        }\r\n        host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\r\n        if (slashInd < questionMarkInd) {\r\n            // For pathString, questionMarkInd will always come after slashInd\r\n            pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\r\n        }\r\n        const queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));\r\n        // If we have a port, use scheme for determining if it's secure.\r\n        colonInd = host.indexOf(':');\r\n        if (colonInd >= 0) {\r\n            secure = scheme === 'https' || scheme === 'wss';\r\n            port = parseInt(host.substring(colonInd + 1), 10);\r\n        }\r\n        else {\r\n            colonInd = host.length;\r\n        }\r\n        const hostWithoutPort = host.slice(0, colonInd);\r\n        if (hostWithoutPort.toLowerCase() === 'localhost') {\r\n            domain = 'localhost';\r\n        }\r\n        else if (hostWithoutPort.split('.').length <= 2) {\r\n            domain = hostWithoutPort;\r\n        }\r\n        else {\r\n            // Interpret the subdomain of a 3 or more component URL as the namespace name.\r\n            const dotInd = host.indexOf('.');\r\n            subdomain = host.substring(0, dotInd).toLowerCase();\r\n            domain = host.substring(dotInd + 1);\r\n            // Normalize namespaces to lowercase to share storage / connection.\r\n            namespace = subdomain;\r\n        }\r\n        // Always treat the value of the `ns` as the namespace name if it is present.\r\n        if ('ns' in queryParams) {\r\n            namespace = queryParams['ns'];\r\n        }\r\n    }\r\n    return {\r\n        host,\r\n        port,\r\n        domain,\r\n        subdomain,\r\n        secure,\r\n        scheme,\r\n        pathString,\r\n        namespace\r\n    };\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Modeled after base64 web-safe chars, but ordered by ASCII.\r\nconst PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\r\n/**\r\n * Fancy ID generator that creates 20-character string identifiers with the\r\n * following properties:\r\n *\r\n * 1. They're based on timestamp so that they sort *after* any existing ids.\r\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\r\n *    collide with other clients' IDs.\r\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\r\n *    that will sort properly).\r\n * 4. They're monotonically increasing. Even if you generate more than one in\r\n *    the same timestamp, the latter ones will sort after the former ones. We do\r\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\r\n *    in the case of a timestamp collision).\r\n */\r\nconst nextPushId = (function () {\r\n    // Timestamp of last push, used to prevent local collisions if you push twice\r\n    // in one ms.\r\n    let lastPushTime = 0;\r\n    // We generate 72-bits of randomness which get turned into 12 characters and\r\n    // appended to the timestamp to prevent collisions with other clients. We\r\n    // store the last characters we generated because in the event of a collision,\r\n    // we'll use those same characters except \"incremented\" by one.\r\n    const lastRandChars = [];\r\n    return function (now) {\r\n        const duplicateTime = now === lastPushTime;\r\n        lastPushTime = now;\r\n        let i;\r\n        const timeStampChars = new Array(8);\r\n        for (i = 7; i >= 0; i--) {\r\n            timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\r\n            // NOTE: Can't use << here because javascript will convert to int and lose\r\n            // the upper bits.\r\n            now = Math.floor(now / 64);\r\n        }\r\n        assert(now === 0, 'Cannot push at time == 0');\r\n        let id = timeStampChars.join('');\r\n        if (!duplicateTime) {\r\n            for (i = 0; i < 12; i++) {\r\n                lastRandChars[i] = Math.floor(Math.random() * 64);\r\n            }\r\n        }\r\n        else {\r\n            // If the timestamp hasn't changed since last push, use the same random\r\n            // number, except incremented by 1.\r\n            for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\r\n                lastRandChars[i] = 0;\r\n            }\r\n            lastRandChars[i]++;\r\n        }\r\n        for (i = 0; i < 12; i++) {\r\n            id += PUSH_CHARS.charAt(lastRandChars[i]);\r\n        }\r\n        assert(id.length === 20, 'nextPushId: Length should be 20.');\r\n        return id;\r\n    };\r\n})();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Encapsulates the data needed to raise an event\r\n */\r\nclass DataEvent {\r\n    /**\r\n     * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\r\n     * @param eventRegistration - The function to call to with the event data. User provided\r\n     * @param snapshot - The data backing the event\r\n     * @param prevName - Optional, the name of the previous child for child_* events.\r\n     */\r\n    constructor(eventType, eventRegistration, snapshot, prevName) {\r\n        this.eventType = eventType;\r\n        this.eventRegistration = eventRegistration;\r\n        this.snapshot = snapshot;\r\n        this.prevName = prevName;\r\n    }\r\n    getPath() {\r\n        const ref = this.snapshot.ref;\r\n        if (this.eventType === 'value') {\r\n            return ref._path;\r\n        }\r\n        else {\r\n            return ref.parent._path;\r\n        }\r\n    }\r\n    getEventType() {\r\n        return this.eventType;\r\n    }\r\n    getEventRunner() {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    }\r\n    toString() {\r\n        return (this.getPath().toString() +\r\n            ':' +\r\n            this.eventType +\r\n            ':' +\r\n            stringify(this.snapshot.exportVal()));\r\n    }\r\n}\r\nclass CancelEvent {\r\n    constructor(eventRegistration, error, path) {\r\n        this.eventRegistration = eventRegistration;\r\n        this.error = error;\r\n        this.path = path;\r\n    }\r\n    getPath() {\r\n        return this.path;\r\n    }\r\n    getEventType() {\r\n        return 'cancel';\r\n    }\r\n    getEventRunner() {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    }\r\n    toString() {\r\n        return this.path.toString() + ':cancel';\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A wrapper class that converts events from the database@exp SDK to the legacy\r\n * Database SDK. Events are not converted directly as event registration relies\r\n * on reference comparison of the original user callback (see `matches()`) and\r\n * relies on equality of the legacy SDK's `context` object.\r\n */\r\nclass CallbackContext {\r\n    constructor(snapshotCallback, cancelCallback) {\r\n        this.snapshotCallback = snapshotCallback;\r\n        this.cancelCallback = cancelCallback;\r\n    }\r\n    onValue(expDataSnapshot, previousChildName) {\r\n        this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\r\n    }\r\n    onCancel(error) {\r\n        assert(this.hasCancelCallback, 'Raising a cancel event on a listener with no cancel callback');\r\n        return this.cancelCallback.call(null, error);\r\n    }\r\n    get hasCancelCallback() {\r\n        return !!this.cancelCallback;\r\n    }\r\n    matches(other) {\r\n        return (this.snapshotCallback === other.snapshotCallback ||\r\n            (this.snapshotCallback.userCallback !== undefined &&\r\n                this.snapshotCallback.userCallback ===\r\n                    other.snapshotCallback.userCallback &&\r\n                this.snapshotCallback.context === other.snapshotCallback.context));\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The `onDisconnect` class allows you to write or clear data when your client\r\n * disconnects from the Database server. These updates occur whether your\r\n * client disconnects cleanly or not, so you can rely on them to clean up data\r\n * even if a connection is dropped or a client crashes.\r\n *\r\n * The `onDisconnect` class is most commonly used to manage presence in\r\n * applications where it is useful to detect how many clients are connected and\r\n * when other clients disconnect. See\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information.\r\n *\r\n * To avoid problems when a connection is dropped before the requests can be\r\n * transferred to the Database server, these functions should be called before\r\n * writing any data.\r\n *\r\n * Note that `onDisconnect` operations are only triggered once. If you want an\r\n * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n * the `onDisconnect` operations each time you reconnect.\r\n */\r\nclass OnDisconnect {\r\n    /** @hideconstructor */\r\n    constructor(_repo, _path) {\r\n        this._repo = _repo;\r\n        this._path = _path;\r\n    }\r\n    /**\r\n     * Cancels all previously queued `onDisconnect()` set or update events for this\r\n     * location and all children.\r\n     *\r\n     * If a write has been queued for this location via a `set()` or `update()` at a\r\n     * parent location, the write at this location will be canceled, though writes\r\n     * to sibling locations will still occur.\r\n     *\r\n     * @returns Resolves when synchronization to the server is complete.\r\n     */\r\n    cancel() {\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectCancel(this._repo, this._path, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is deleted when the client is disconnected\r\n     * (due to closing the browser, navigating to a new page, or network issues).\r\n     *\r\n     * @returns Resolves when synchronization to the server is complete.\r\n     */\r\n    remove() {\r\n        validateWritablePath('OnDisconnect.remove', this._path);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSet(this._repo, this._path, null, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is set to the specified value when the\r\n     * client is disconnected (due to closing the browser, navigating to a new page,\r\n     * or network issues).\r\n     *\r\n     * `set()` is especially useful for implementing \"presence\" systems, where a\r\n     * value should be changed or cleared when a user disconnects so that they\r\n     * appear \"offline\" to other users. See\r\n     * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n     * for more information.\r\n     *\r\n     * Note that `onDisconnect` operations are only triggered once. If you want an\r\n     * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n     * the `onDisconnect` operations each time.\r\n     *\r\n     * @param value - The value to be written to this location on disconnect (can\r\n     * be an object, array, string, number, boolean, or null).\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    set(value) {\r\n        validateWritablePath('OnDisconnect.set', this._path);\r\n        validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSet(this._repo, this._path, value, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is set to the specified value and priority\r\n     * when the client is disconnected (due to closing the browser, navigating to a\r\n     * new page, or network issues).\r\n     *\r\n     * @param value - The value to be written to this location on disconnect (can\r\n     * be an object, array, string, number, boolean, or null).\r\n     * @param priority - The priority to be written (string, number, or null).\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    setWithPriority(value, priority) {\r\n        validateWritablePath('OnDisconnect.setWithPriority', this._path);\r\n        validateFirebaseDataArg('OnDisconnect.setWithPriority', value, this._path, false);\r\n        validatePriority('OnDisconnect.setWithPriority', priority, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSetWithPriority(this._repo, this._path, value, priority, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Writes multiple values at this location when the client is disconnected (due\r\n     * to closing the browser, navigating to a new page, or network issues).\r\n     *\r\n     * The `values` argument contains multiple property-value pairs that will be\r\n     * written to the Database together. Each child property can either be a simple\r\n     * property (for example, \"name\") or a relative path (for example, \"name/first\")\r\n     * from the current location to the data to update.\r\n     *\r\n     * As opposed to the `set()` method, `update()` can be use to selectively update\r\n     * only the referenced properties at the current location (instead of replacing\r\n     * all the child properties at the current location).\r\n     *\r\n     * @param values - Object containing multiple values.\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    update(values) {\r\n        validateWritablePath('OnDisconnect.update', this._path);\r\n        validateFirebaseMergeDataArg('OnDisconnect.update', values, this._path, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectUpdate(this._repo, this._path, values, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @internal\r\n */\r\nclass QueryImpl {\r\n    /**\r\n     * @hideconstructor\r\n     */\r\n    constructor(_repo, _path, _queryParams, _orderByCalled) {\r\n        this._repo = _repo;\r\n        this._path = _path;\r\n        this._queryParams = _queryParams;\r\n        this._orderByCalled = _orderByCalled;\r\n    }\r\n    get key() {\r\n        if (pathIsEmpty(this._path)) {\r\n            return null;\r\n        }\r\n        else {\r\n            return pathGetBack(this._path);\r\n        }\r\n    }\r\n    get ref() {\r\n        return new ReferenceImpl(this._repo, this._path);\r\n    }\r\n    get _queryIdentifier() {\r\n        const obj = queryParamsGetQueryObject(this._queryParams);\r\n        const id = ObjectToUniqueKey(obj);\r\n        return id === '{}' ? 'default' : id;\r\n    }\r\n    /**\r\n     * An object representation of the query parameters used by this Query.\r\n     */\r\n    get _queryObject() {\r\n        return queryParamsGetQueryObject(this._queryParams);\r\n    }\r\n    isEqual(other) {\r\n        other = getModularInstance(other);\r\n        if (!(other instanceof QueryImpl)) {\r\n            return false;\r\n        }\r\n        const sameRepo = this._repo === other._repo;\r\n        const samePath = pathEquals(this._path, other._path);\r\n        const sameQueryIdentifier = this._queryIdentifier === other._queryIdentifier;\r\n        return sameRepo && samePath && sameQueryIdentifier;\r\n    }\r\n    toJSON() {\r\n        return this.toString();\r\n    }\r\n    toString() {\r\n        return this._repo.toString() + pathToUrlEncodedString(this._path);\r\n    }\r\n}\r\n/**\r\n * Validates that no other order by call has been made\r\n */\r\nfunction validateNoPreviousOrderByCall(query, fnName) {\r\n    if (query._orderByCalled === true) {\r\n        throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\r\n    }\r\n}\r\n/**\r\n * Validates start/end values for queries.\r\n */\r\nfunction validateQueryEndpoints(params) {\r\n    let startNode = null;\r\n    let endNode = null;\r\n    if (params.hasStart()) {\r\n        startNode = params.getIndexStartValue();\r\n    }\r\n    if (params.hasEnd()) {\r\n        endNode = params.getIndexEndValue();\r\n    }\r\n    if (params.getIndex() === KEY_INDEX) {\r\n        const tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' +\r\n            'startAt(), endAt(), or equalTo().';\r\n        const wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +\r\n            'endAt(), endBefore(), or equalTo() must be a string.';\r\n        if (params.hasStart()) {\r\n            const startName = params.getIndexStartName();\r\n            if (startName !== MIN_NAME) {\r\n                throw new Error(tooManyArgsError);\r\n            }\r\n            else if (typeof startNode !== 'string') {\r\n                throw new Error(wrongArgTypeError);\r\n            }\r\n        }\r\n        if (params.hasEnd()) {\r\n            const endName = params.getIndexEndName();\r\n            if (endName !== MAX_NAME) {\r\n                throw new Error(tooManyArgsError);\r\n            }\r\n            else if (typeof endNode !== 'string') {\r\n                throw new Error(wrongArgTypeError);\r\n            }\r\n        }\r\n    }\r\n    else if (params.getIndex() === PRIORITY_INDEX) {\r\n        if ((startNode != null && !isValidPriority(startNode)) ||\r\n            (endNode != null && !isValidPriority(endNode))) {\r\n            throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' +\r\n                'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +\r\n                '(null, a number, or a string).');\r\n        }\r\n    }\r\n    else {\r\n        assert(params.getIndex() instanceof PathIndex ||\r\n            params.getIndex() === VALUE_INDEX, 'unknown index type.');\r\n        if ((startNode != null && typeof startNode === 'object') ||\r\n            (endNode != null && typeof endNode === 'object')) {\r\n            throw new Error('Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +\r\n                'equalTo() cannot be an object.');\r\n        }\r\n    }\r\n}\r\n/**\r\n * Validates that limit* has been called with the correct combination of parameters\r\n */\r\nfunction validateLimit(params) {\r\n    if (params.hasStart() &&\r\n        params.hasEnd() &&\r\n        params.hasLimit() &&\r\n        !params.hasAnchoredLimit()) {\r\n        throw new Error(\"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" +\r\n            'limitToFirst() or limitToLast() instead.');\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nclass ReferenceImpl extends QueryImpl {\r\n    /** @hideconstructor */\r\n    constructor(repo, path) {\r\n        super(repo, path, new QueryParams(), false);\r\n    }\r\n    get parent() {\r\n        const parentPath = pathParent(this._path);\r\n        return parentPath === null\r\n            ? null\r\n            : new ReferenceImpl(this._repo, parentPath);\r\n    }\r\n    get root() {\r\n        let ref = this;\r\n        while (ref.parent !== null) {\r\n            ref = ref.parent;\r\n        }\r\n        return ref;\r\n    }\r\n}\r\n/**\r\n * A `DataSnapshot` contains data from a Database location.\r\n *\r\n * Any time you read data from the Database, you receive the data as a\r\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\r\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\r\n * JavaScript object by calling the `val()` method. Alternatively, you can\r\n * traverse into the snapshot by calling `child()` to return child snapshots\r\n * (which you could then call `val()` on).\r\n *\r\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\r\n * a Database location. It cannot be modified and will never change (to modify\r\n * data, you always call the `set()` method on a `Reference` directly).\r\n */\r\nclass DataSnapshot {\r\n    /**\r\n     * @param _node - A SnapshotNode to wrap.\r\n     * @param ref - The location this snapshot came from.\r\n     * @param _index - The iteration order for this snapshot\r\n     * @hideconstructor\r\n     */\r\n    constructor(_node, \r\n    /**\r\n     * The location of this DataSnapshot.\r\n     */\r\n    ref, _index) {\r\n        this._node = _node;\r\n        this.ref = ref;\r\n        this._index = _index;\r\n    }\r\n    /**\r\n     * Gets the priority value of the data in this `DataSnapshot`.\r\n     *\r\n     * Applications need not use priority but can order collections by\r\n     * ordinary properties (see\r\n     * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\r\n     * ).\r\n     */\r\n    get priority() {\r\n        // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\r\n        return this._node.getPriority().val();\r\n    }\r\n    /**\r\n     * The key (last part of the path) of the location of this `DataSnapshot`.\r\n     *\r\n     * The last token in a Database location is considered its key. For example,\r\n     * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\r\n     * `DataSnapshot` will return the key for the location that generated it.\r\n     * However, accessing the key on the root URL of a Database will return\r\n     * `null`.\r\n     */\r\n    get key() {\r\n        return this.ref.key;\r\n    }\r\n    /** Returns the number of child properties of this `DataSnapshot`. */\r\n    get size() {\r\n        return this._node.numChildren();\r\n    }\r\n    /**\r\n     * Gets another `DataSnapshot` for the location at the specified relative path.\r\n     *\r\n     * Passing a relative path to the `child()` method of a DataSnapshot returns\r\n     * another `DataSnapshot` for the location at the specified relative path. The\r\n     * relative path can either be a simple child name (for example, \"ada\") or a\r\n     * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\r\n     * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\r\n     * whose value is `null`) is returned.\r\n     *\r\n     * @param path - A relative path to the location of child data.\r\n     */\r\n    child(path) {\r\n        const childPath = new Path(path);\r\n        const childRef = child(this.ref, path);\r\n        return new DataSnapshot(this._node.getChild(childPath), childRef, PRIORITY_INDEX);\r\n    }\r\n    /**\r\n     * Returns true if this `DataSnapshot` contains any data. It is slightly more\r\n     * efficient than using `snapshot.val() !== null`.\r\n     */\r\n    exists() {\r\n        return !this._node.isEmpty();\r\n    }\r\n    /**\r\n     * Exports the entire contents of the DataSnapshot as a JavaScript object.\r\n     *\r\n     * The `exportVal()` method is similar to `val()`, except priority information\r\n     * is included (if available), making it suitable for backing up your data.\r\n     *\r\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n     *   Array, string, number, boolean, or `null`).\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    exportVal() {\r\n        return this._node.val(true);\r\n    }\r\n    /**\r\n     * Enumerates the top-level children in the `DataSnapshot`.\r\n     *\r\n     * Because of the way JavaScript objects work, the ordering of data in the\r\n     * JavaScript object returned by `val()` is not guaranteed to match the\r\n     * ordering on the server nor the ordering of `onChildAdded()` events. That is\r\n     * where `forEach()` comes in handy. It guarantees the children of a\r\n     * `DataSnapshot` will be iterated in their query order.\r\n     *\r\n     * If no explicit `orderBy*()` method is used, results are returned\r\n     * ordered by key (unless priorities are used, in which case, results are\r\n     * returned by priority).\r\n     *\r\n     * @param action - A function that will be called for each child DataSnapshot.\r\n     * The callback can return true to cancel further enumeration.\r\n     * @returns true if enumeration was canceled due to your callback returning\r\n     * true.\r\n     */\r\n    forEach(action) {\r\n        if (this._node.isLeafNode()) {\r\n            return false;\r\n        }\r\n        const childrenNode = this._node;\r\n        // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\r\n        return !!childrenNode.forEachChild(this._index, (key, node) => {\r\n            return action(new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX));\r\n        });\r\n    }\r\n    /**\r\n     * Returns true if the specified child path has (non-null) data.\r\n     *\r\n     * @param path - A relative path to the location of a potential child.\r\n     * @returns `true` if data exists at the specified child path; else\r\n     *  `false`.\r\n     */\r\n    hasChild(path) {\r\n        const childPath = new Path(path);\r\n        return !this._node.getChild(childPath).isEmpty();\r\n    }\r\n    /**\r\n     * Returns whether or not the `DataSnapshot` has any non-`null` child\r\n     * properties.\r\n     *\r\n     * You can use `hasChildren()` to determine if a `DataSnapshot` has any\r\n     * children. If it does, you can enumerate them using `forEach()`. If it\r\n     * doesn't, then either this snapshot contains a primitive value (which can be\r\n     * retrieved with `val()`) or it is empty (in which case, `val()` will return\r\n     * `null`).\r\n     *\r\n     * @returns true if this snapshot has any children; else false.\r\n     */\r\n    hasChildren() {\r\n        if (this._node.isLeafNode()) {\r\n            return false;\r\n        }\r\n        else {\r\n            return !this._node.isEmpty();\r\n        }\r\n    }\r\n    /**\r\n     * Returns a JSON-serializable representation of this object.\r\n     */\r\n    toJSON() {\r\n        return this.exportVal();\r\n    }\r\n    /**\r\n     * Extracts a JavaScript value from a `DataSnapshot`.\r\n     *\r\n     * Depending on the data in a `DataSnapshot`, the `val()` method may return a\r\n     * scalar type (string, number, or boolean), an array, or an object. It may\r\n     * also return null, indicating that the `DataSnapshot` is empty (contains no\r\n     * data).\r\n     *\r\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n     *   Array, string, number, boolean, or `null`).\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    val() {\r\n        return this._node.val();\r\n    }\r\n}\r\n/**\r\n *\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided path. If no path is provided, the `Reference`\r\n * will point to the root of the Database.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param path - Optional path representing the location the returned\r\n *   `Reference` will point. If not provided, the returned `Reference` will\r\n *   point to the root of the Database.\r\n * @returns If a path is provided, a `Reference`\r\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\r\n *   root of the Database.\r\n */\r\nfunction ref(db, path) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('ref');\r\n    return path !== undefined ? child(db._root, path) : db._root;\r\n}\r\n/**\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided Firebase URL.\r\n *\r\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\r\n * has a different domain than the current `Database` instance.\r\n *\r\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\r\n * and are not applied to the returned `Reference`.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param url - The Firebase URL at which the returned `Reference` will\r\n *   point.\r\n * @returns A `Reference` pointing to the provided\r\n *   Firebase URL.\r\n */\r\nfunction refFromURL(db, url) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('refFromURL');\r\n    const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\r\n    validateUrl('refFromURL', parsedURL);\r\n    const repoInfo = parsedURL.repoInfo;\r\n    if (!db._repo.repoInfo_.isCustomHost() &&\r\n        repoInfo.host !== db._repo.repoInfo_.host) {\r\n        fatal('refFromURL' +\r\n            ': Host name does not match the current database: ' +\r\n            '(found ' +\r\n            repoInfo.host +\r\n            ' but expected ' +\r\n            db._repo.repoInfo_.host +\r\n            ')');\r\n    }\r\n    return ref(db, parsedURL.path.toString());\r\n}\r\n/**\r\n * Gets a `Reference` for the location at the specified relative path.\r\n *\r\n * The relative path can either be a simple child name (for example, \"ada\") or\r\n * a deeper slash-separated path (for example, \"ada/name/first\").\r\n *\r\n * @param parent - The parent location.\r\n * @param path - A relative path from this location to the desired child\r\n *   location.\r\n * @returns The specified child location.\r\n */\r\nfunction child(parent, path) {\r\n    parent = getModularInstance(parent);\r\n    if (pathGetFront(parent._path) === null) {\r\n        validateRootPathString('child', 'path', path, false);\r\n    }\r\n    else {\r\n        validatePathString('child', 'path', path, false);\r\n    }\r\n    return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\r\n}\r\n/**\r\n * Returns an `OnDisconnect` object - see\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information on how to use it.\r\n *\r\n * @param ref - The reference to add OnDisconnect triggers for.\r\n */\r\nfunction onDisconnect(ref) {\r\n    ref = getModularInstance(ref);\r\n    return new OnDisconnect(ref._repo, ref._path);\r\n}\r\n/**\r\n * Generates a new child location using a unique key and returns its\r\n * `Reference`.\r\n *\r\n * This is the most common pattern for adding data to a collection of items.\r\n *\r\n * If you provide a value to `push()`, the value is written to the\r\n * generated location. If you don't pass a value, nothing is written to the\r\n * database and the child remains empty (but you can use the `Reference`\r\n * elsewhere).\r\n *\r\n * The unique keys generated by `push()` are ordered by the current time, so the\r\n * resulting list of items is chronologically sorted. The keys are also\r\n * designed to be unguessable (they contain 72 random bits of entropy).\r\n *\r\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}.\r\n * See {@link https://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}.\r\n *\r\n * @param parent - The parent location.\r\n * @param value - Optional value to be written at the generated location.\r\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\r\n * but can be used immediately as the `Reference` to the child location.\r\n */\r\nfunction push(parent, value) {\r\n    parent = getModularInstance(parent);\r\n    validateWritablePath('push', parent._path);\r\n    validateFirebaseDataArg('push', value, parent._path, true);\r\n    const now = repoServerTime(parent._repo);\r\n    const name = nextPushId(now);\r\n    // push() returns a ThennableReference whose promise is fulfilled with a\r\n    // regular Reference. We use child() to create handles to two different\r\n    // references. The first is turned into a ThennableReference below by adding\r\n    // then() and catch() methods and is used as the return value of push(). The\r\n    // second remains a regular Reference and is used as the fulfilled value of\r\n    // the first ThennableReference.\r\n    const thennablePushRef = child(parent, name);\r\n    const pushRef = child(parent, name);\r\n    let promise;\r\n    if (value != null) {\r\n        promise = set(pushRef, value).then(() => pushRef);\r\n    }\r\n    else {\r\n        promise = Promise.resolve(pushRef);\r\n    }\r\n    thennablePushRef.then = promise.then.bind(promise);\r\n    thennablePushRef.catch = promise.then.bind(promise, undefined);\r\n    return thennablePushRef;\r\n}\r\n/**\r\n * Removes the data at this Database location.\r\n *\r\n * Any data at child locations will also be deleted.\r\n *\r\n * The effect of the remove will be visible immediately and the corresponding\r\n * event 'value' will be triggered. Synchronization of the remove to the\r\n * Firebase servers will also be started, and the returned Promise will resolve\r\n * when complete. If provided, the onComplete callback will be called\r\n * asynchronously after synchronization has finished.\r\n *\r\n * @param ref - The location to remove.\r\n * @returns Resolves when remove on server is complete.\r\n */\r\nfunction remove(ref) {\r\n    validateWritablePath('remove', ref._path);\r\n    return set(ref, null);\r\n}\r\n/**\r\n * Writes data to this Database location.\r\n *\r\n * This will overwrite any data at this location and all child locations.\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\r\n * all data at this location and all child locations will be deleted.\r\n *\r\n * `set()` will remove any priority stored at this location, so if priority is\r\n * meant to be preserved, you need to use `setWithPriority()` instead.\r\n *\r\n * Note that modifying data with `set()` will cancel any pending transactions\r\n * at that location, so extreme care should be taken if mixing `set()` and\r\n * `transaction()` to modify the same data.\r\n *\r\n * A single `set()` will generate a single \"value\" event at the location where\r\n * the `set()` was performed.\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction set(ref, value) {\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('set', ref._path);\r\n    validateFirebaseDataArg('set', value, ref._path, false);\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, ref._path, value, \r\n    /*priority=*/ null, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Sets a priority for the data at this Database location.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction setPriority(ref, priority) {\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('setPriority', ref._path);\r\n    validatePriority('setPriority', priority, false);\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, pathChild(ref._path, '.priority'), priority, null, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Writes data the Database location. Like `set()` but also specifies the\r\n * priority for that data.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction setWithPriority(ref, value, priority) {\r\n    validateWritablePath('setWithPriority', ref._path);\r\n    validateFirebaseDataArg('setWithPriority', value, ref._path, false);\r\n    validatePriority('setWithPriority', priority, false);\r\n    if (ref.key === '.length' || ref.key === '.keys') {\r\n        throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\r\n    }\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, ref._path, value, priority, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Writes multiple values to the Database at once.\r\n *\r\n * The `values` argument contains multiple property-value pairs that will be\r\n * written to the Database together. Each child property can either be a simple\r\n * property (for example, \"name\") or a relative path (for example,\r\n * \"name/first\") from the current location to the data to update.\r\n *\r\n * As opposed to the `set()` method, `update()` can be use to selectively update\r\n * only the referenced properties at the current location (instead of replacing\r\n * all the child properties at the current location).\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * A single `update()` will generate a single \"value\" event at the location\r\n * where the `update()` was performed, regardless of how many children were\r\n * modified.\r\n *\r\n * Note that modifying data with `update()` will cancel any pending\r\n * transactions at that location, so extreme care should be taken if mixing\r\n * `update()` and `transaction()` to modify the same data.\r\n *\r\n * Passing `null` to `update()` will remove the data at this location.\r\n *\r\n * See\r\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\r\n *\r\n * @param ref - The location to write to.\r\n * @param values - Object containing multiple values.\r\n * @returns Resolves when update on server is complete.\r\n */\r\nfunction update(ref, values) {\r\n    validateFirebaseMergeDataArg('update', values, ref._path, false);\r\n    const deferred = new Deferred();\r\n    repoUpdate(ref._repo, ref._path, values, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Gets the most up-to-date result for this query.\r\n *\r\n * @param query - The query to run.\r\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\r\n * available, or rejects if the client is unable to return a value (e.g., if the\r\n * server is unreachable and there is nothing cached).\r\n */\r\nfunction get(query) {\r\n    query = getModularInstance(query);\r\n    const callbackContext = new CallbackContext(() => { });\r\n    const container = new ValueEventRegistration(callbackContext);\r\n    return repoGetValue(query._repo, query, container).then(node => {\r\n        return new DataSnapshot(node, new ReferenceImpl(query._repo, query._path), query._queryParams.getIndex());\r\n    });\r\n}\r\n/**\r\n * Represents registration for 'value' events.\r\n */\r\nclass ValueEventRegistration {\r\n    constructor(callbackContext) {\r\n        this.callbackContext = callbackContext;\r\n    }\r\n    respondsTo(eventType) {\r\n        return eventType === 'value';\r\n    }\r\n    createEvent(change, query) {\r\n        const index = query._queryParams.getIndex();\r\n        return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, new ReferenceImpl(query._repo, query._path), index));\r\n    }\r\n    getEventRunner(eventData) {\r\n        if (eventData.getEventType() === 'cancel') {\r\n            return () => this.callbackContext.onCancel(eventData.error);\r\n        }\r\n        else {\r\n            return () => this.callbackContext.onValue(eventData.snapshot, null);\r\n        }\r\n    }\r\n    createCancelEvent(error, path) {\r\n        if (this.callbackContext.hasCancelCallback) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    matches(other) {\r\n        if (!(other instanceof ValueEventRegistration)) {\r\n            return false;\r\n        }\r\n        else if (!other.callbackContext || !this.callbackContext) {\r\n            // If no callback specified, we consider it to match any callback.\r\n            return true;\r\n        }\r\n        else {\r\n            return other.callbackContext.matches(this.callbackContext);\r\n        }\r\n    }\r\n    hasAnyCallback() {\r\n        return this.callbackContext !== null;\r\n    }\r\n}\r\n/**\r\n * Represents the registration of a child_x event.\r\n */\r\nclass ChildEventRegistration {\r\n    constructor(eventType, callbackContext) {\r\n        this.eventType = eventType;\r\n        this.callbackContext = callbackContext;\r\n    }\r\n    respondsTo(eventType) {\r\n        let eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;\r\n        eventToCheck =\r\n            eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\r\n        return this.eventType === eventToCheck;\r\n    }\r\n    createCancelEvent(error, path) {\r\n        if (this.callbackContext.hasCancelCallback) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    createEvent(change, query) {\r\n        assert(change.childName != null, 'Child events should have a childName.');\r\n        const childRef = child(new ReferenceImpl(query._repo, query._path), change.childName);\r\n        const index = query._queryParams.getIndex();\r\n        return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, childRef, index), change.prevName);\r\n    }\r\n    getEventRunner(eventData) {\r\n        if (eventData.getEventType() === 'cancel') {\r\n            return () => this.callbackContext.onCancel(eventData.error);\r\n        }\r\n        else {\r\n            return () => this.callbackContext.onValue(eventData.snapshot, eventData.prevName);\r\n        }\r\n    }\r\n    matches(other) {\r\n        if (other instanceof ChildEventRegistration) {\r\n            return (this.eventType === other.eventType &&\r\n                (!this.callbackContext ||\r\n                    !other.callbackContext ||\r\n                    this.callbackContext.matches(other.callbackContext)));\r\n        }\r\n        return false;\r\n    }\r\n    hasAnyCallback() {\r\n        return !!this.callbackContext;\r\n    }\r\n}\r\nfunction addEventListener(query, eventType, callback, cancelCallbackOrListenOptions, options) {\r\n    let cancelCallback;\r\n    if (typeof cancelCallbackOrListenOptions === 'object') {\r\n        cancelCallback = undefined;\r\n        options = cancelCallbackOrListenOptions;\r\n    }\r\n    if (typeof cancelCallbackOrListenOptions === 'function') {\r\n        cancelCallback = cancelCallbackOrListenOptions;\r\n    }\r\n    if (options && options.onlyOnce) {\r\n        const userCallback = callback;\r\n        const onceCallback = (dataSnapshot, previousChildName) => {\r\n            repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n            userCallback(dataSnapshot, previousChildName);\r\n        };\r\n        onceCallback.userCallback = callback.userCallback;\r\n        onceCallback.context = callback.context;\r\n        callback = onceCallback;\r\n    }\r\n    const callbackContext = new CallbackContext(callback, cancelCallback || undefined);\r\n    const container = eventType === 'value'\r\n        ? new ValueEventRegistration(callbackContext)\r\n        : new ChildEventRegistration(eventType, callbackContext);\r\n    repoAddEventCallbackForQuery(query._repo, query, container);\r\n    return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n}\r\nfunction onValue(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'value', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildAdded(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_added', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildChanged(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_changed', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildMoved(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_moved', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildRemoved(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_removed', callback, cancelCallbackOrListenOptions, options);\r\n}\r\n/**\r\n * Detaches a callback previously attached with the corresponding `on*()` (`onValue`, `onChildAdded`) listener.\r\n * Note: This is not the recommended way to remove a listener. Instead, please use the returned callback function from\r\n * the respective `on*` callbacks.\r\n *\r\n * Detach a callback previously attached with `on*()`. Calling `off()` on a parent listener\r\n * will not automatically remove listeners registered on child nodes, `off()`\r\n * must also be called on any child listeners to remove the callback.\r\n *\r\n * If a callback is not specified, all callbacks for the specified eventType\r\n * will be removed. Similarly, if no eventType is specified, all callbacks\r\n * for the `Reference` will be removed.\r\n *\r\n * Individual listeners can also be removed by invoking their unsubscribe\r\n * callbacks.\r\n *\r\n * @param query - The query that the listener was registered with.\r\n * @param eventType - One of the following strings: \"value\", \"child_added\",\r\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\r\n * for the `Reference` will be removed.\r\n * @param callback - The callback function that was passed to `on()` or\r\n * `undefined` to remove all callbacks.\r\n */\r\nfunction off(query, eventType, callback) {\r\n    let container = null;\r\n    const expCallback = callback ? new CallbackContext(callback) : null;\r\n    if (eventType === 'value') {\r\n        container = new ValueEventRegistration(expCallback);\r\n    }\r\n    else if (eventType) {\r\n        container = new ChildEventRegistration(eventType, expCallback);\r\n    }\r\n    repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n}\r\n/**\r\n * A `QueryConstraint` is used to narrow the set of documents returned by a\r\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\r\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\r\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\r\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\r\n * {@link orderByValue}  or {@link equalTo} and\r\n * can then be passed to {@link query} to create a new query instance that\r\n * also contains this `QueryConstraint`.\r\n */\r\nclass QueryConstraint {\r\n}\r\nclass QueryEndAtConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('endAt', this._value, query._path, true);\r\n        const newParams = queryParamsEndAt(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('endAt: Starting point was already set (by another call to endAt, ' +\r\n                'endBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified ending point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name less than or equal\r\n * to the specified key.\r\n *\r\n * You can read more about `endAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to end at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end at, among the children with the previously\r\n * specified priority. This argument is only allowed if ordering by child,\r\n * value, or priority.\r\n */\r\nfunction endAt(value, key) {\r\n    validateKey('endAt', 'key', key, true);\r\n    return new QueryEndAtConstraint(value, key);\r\n}\r\nclass QueryEndBeforeConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('endBefore', this._value, query._path, false);\r\n        const newParams = queryParamsEndBefore(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('endBefore: Starting point was already set (by another call to endAt, ' +\r\n                'endBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is exclusive. If only a value is provided, children\r\n * with a value less than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value less than or equal\r\n * to the specified value and a key name less than the specified key.\r\n *\r\n * @param value - The value to end before. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end before, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\r\nfunction endBefore(value, key) {\r\n    validateKey('endBefore', 'key', key, true);\r\n    return new QueryEndBeforeConstraint(value, key);\r\n}\r\nclass QueryStartAtConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('startAt', this._value, query._path, true);\r\n        const newParams = queryParamsStartAt(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('startAt: Starting point was already set (by another call to startAt, ' +\r\n                'startBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified starting point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name greater than or\r\n * equal to the specified key.\r\n *\r\n * You can read more about `startAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to start at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\r\nfunction startAt(value = null, key) {\r\n    validateKey('startAt', 'key', key, true);\r\n    return new QueryStartAtConstraint(value, key);\r\n}\r\nclass QueryStartAfterConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('startAfter', this._value, query._path, false);\r\n        const newParams = queryParamsStartAfter(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('startAfter: Starting point was already set (by another call to startAt, ' +\r\n                'startAfter, or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is exclusive. If only a value is provided, children\r\n * with a value greater than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value greater than or equal\r\n * to the specified value and a a key name greater than the specified key.\r\n *\r\n * @param value - The value to start after. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start after. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\r\nfunction startAfter(value, key) {\r\n    validateKey('startAfter', 'key', key, true);\r\n    return new QueryStartAfterConstraint(value, key);\r\n}\r\nclass QueryLimitToFirstConstraint extends QueryConstraint {\r\n    constructor(_limit) {\r\n        super();\r\n        this._limit = _limit;\r\n    }\r\n    _apply(query) {\r\n        if (query._queryParams.hasLimit()) {\r\n            throw new Error('limitToFirst: Limit was already set (by another call to limitToFirst ' +\r\n                'or limitToLast).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, queryParamsLimitToFirst(query._queryParams, this._limit), query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that if limited to the first specific number\r\n * of children.\r\n *\r\n * The `limitToFirst()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the first 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToFirst()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\r\nfunction limitToFirst(limit) {\r\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\r\n        throw new Error('limitToFirst: First argument must be a positive integer.');\r\n    }\r\n    return new QueryLimitToFirstConstraint(limit);\r\n}\r\nclass QueryLimitToLastConstraint extends QueryConstraint {\r\n    constructor(_limit) {\r\n        super();\r\n        this._limit = _limit;\r\n    }\r\n    _apply(query) {\r\n        if (query._queryParams.hasLimit()) {\r\n            throw new Error('limitToLast: Limit was already set (by another call to limitToFirst ' +\r\n                'or limitToLast).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, queryParamsLimitToLast(query._queryParams, this._limit), query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that is limited to return only the last\r\n * specified number of children.\r\n *\r\n * The `limitToLast()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the last 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToLast()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\r\nfunction limitToLast(limit) {\r\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\r\n        throw new Error('limitToLast: First argument must be a positive integer.');\r\n    }\r\n    return new QueryLimitToLastConstraint(limit);\r\n}\r\nclass QueryOrderByChildConstraint extends QueryConstraint {\r\n    constructor(_path) {\r\n        super();\r\n        this._path = _path;\r\n    }\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByChild');\r\n        const parsedPath = new Path(this._path);\r\n        if (pathIsEmpty(parsedPath)) {\r\n            throw new Error('orderByChild: cannot pass in empty path. Use orderByValue() instead.');\r\n        }\r\n        const index = new PathIndex(parsedPath);\r\n        const newParams = queryParamsOrderBy(query._queryParams, index);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by the specified child key.\r\n *\r\n * Queries can only order by one key at a time. Calling `orderByChild()`\r\n * multiple times on the same query is an error.\r\n *\r\n * Firebase queries allow you to order your data by any child key on the fly.\r\n * However, if you know in advance what your indexes will be, you can define\r\n * them via the .indexOn rule in your Security Rules for better performance. See\r\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\r\n * rule for more information.\r\n *\r\n * You can read more about `orderByChild()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n *\r\n * @param path - The path to order by.\r\n */\r\nfunction orderByChild(path) {\r\n    if (path === '$key') {\r\n        throw new Error('orderByChild: \"$key\" is invalid.  Use orderByKey() instead.');\r\n    }\r\n    else if (path === '$priority') {\r\n        throw new Error('orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.');\r\n    }\r\n    else if (path === '$value') {\r\n        throw new Error('orderByChild: \"$value\" is invalid.  Use orderByValue() instead.');\r\n    }\r\n    validatePathString('orderByChild', 'path', path, false);\r\n    return new QueryOrderByChildConstraint(path);\r\n}\r\nclass QueryOrderByKeyConstraint extends QueryConstraint {\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByKey');\r\n        const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by the key.\r\n *\r\n * Sorts the results of a query by their (ascending) key values.\r\n *\r\n * You can read more about `orderByKey()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\r\nfunction orderByKey() {\r\n    return new QueryOrderByKeyConstraint();\r\n}\r\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByPriority');\r\n        const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by priority.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\r\n * for alternatives to priority.\r\n */\r\nfunction orderByPriority() {\r\n    return new QueryOrderByPriorityConstraint();\r\n}\r\nclass QueryOrderByValueConstraint extends QueryConstraint {\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByValue');\r\n        const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by value.\r\n *\r\n * If the children of a query are all scalar values (string, number, or\r\n * boolean), you can order the results by their (ascending) values.\r\n *\r\n * You can read more about `orderByValue()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\r\nfunction orderByValue() {\r\n    return new QueryOrderByValueConstraint();\r\n}\r\nclass QueryEqualToValueConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('equalTo', this._value, query._path, false);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('equalTo: Starting point was already set (by another call to startAt/startAfter or ' +\r\n                'equalTo).');\r\n        }\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('equalTo: Ending point was already set (by another call to endAt/endBefore or ' +\r\n                'equalTo).');\r\n        }\r\n        return new QueryEndAtConstraint(this._value, this._key)._apply(new QueryStartAtConstraint(this._value, this._key)._apply(query));\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` that includes children that match the specified\r\n * value.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The optional key argument can be used to further limit the range of the\r\n * query. If it is specified, then children that have exactly the specified\r\n * value must also have exactly the specified key as their key name. This can be\r\n * used to filter result sets with many matches for the same value.\r\n *\r\n * You can read more about `equalTo()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to match for. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\r\nfunction equalTo(value, key) {\r\n    validateKey('equalTo', 'key', key, true);\r\n    return new QueryEqualToValueConstraint(value, key);\r\n}\r\n/**\r\n * Creates a new immutable instance of `Query` that is extended to also include\r\n * additional query constraints.\r\n *\r\n * @param query - The Query instance to use as a base for the new constraints.\r\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\r\n * @throws if any of the provided query constraints cannot be combined with the\r\n * existing or new constraints.\r\n */\r\nfunction query(query, ...queryConstraints) {\r\n    let queryImpl = getModularInstance(query);\r\n    for (const constraint of queryConstraints) {\r\n        queryImpl = constraint._apply(queryImpl);\r\n    }\r\n    return queryImpl;\r\n}\r\n/**\r\n * Define reference constructor in various modules\r\n *\r\n * We are doing this here to avoid several circular\r\n * dependency issues\r\n */\r\nsyncPointSetReferenceConstructor(ReferenceImpl);\r\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This variable is also defined in the firebase Node.js Admin SDK. Before\r\n * modifying this definition, consult the definition in:\r\n *\r\n * https://github.com/firebase/firebase-admin-node\r\n *\r\n * and make sure the two are consistent.\r\n */\r\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\r\n/**\r\n * Creates and caches `Repo` instances.\r\n */\r\nconst repos = {};\r\n/**\r\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\r\n */\r\nlet useRestClient = false;\r\n/**\r\n * Update an existing `Repo` in place to point to a new host/port.\r\n */\r\nfunction repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider) {\r\n    repo.repoInfo_ = new RepoInfo(`${host}:${port}`, \r\n    /* secure= */ false, repo.repoInfo_.namespace, repo.repoInfo_.webSocketOnly, repo.repoInfo_.nodeAdmin, repo.repoInfo_.persistenceKey, repo.repoInfo_.includeNamespaceInQueryParams, \r\n    /*isUsingEmulator=*/ true);\r\n    if (tokenProvider) {\r\n        repo.authTokenProvider_ = tokenProvider;\r\n    }\r\n}\r\n/**\r\n * This function should only ever be called to CREATE a new database instance.\r\n * @internal\r\n */\r\nfunction repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url, nodeAdmin) {\r\n    let dbUrl = url || app.options.databaseURL;\r\n    if (dbUrl === undefined) {\r\n        if (!app.options.projectId) {\r\n            fatal(\"Can't determine Firebase Database URL. Be sure to include \" +\r\n                ' a Project ID when calling firebase.initializeApp().');\r\n        }\r\n        log('Using default host for project ', app.options.projectId);\r\n        dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\r\n    }\r\n    let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\r\n    let repoInfo = parsedUrl.repoInfo;\r\n    let isEmulator;\r\n    let dbEmulatorHost = undefined;\r\n    if (typeof process !== 'undefined' && process.env) {\r\n        dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\r\n    }\r\n    if (dbEmulatorHost) {\r\n        isEmulator = true;\r\n        dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\r\n        parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\r\n        repoInfo = parsedUrl.repoInfo;\r\n    }\r\n    else {\r\n        isEmulator = !parsedUrl.repoInfo.secure;\r\n    }\r\n    const authTokenProvider = nodeAdmin && isEmulator\r\n        ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER)\r\n        : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\r\n    validateUrl('Invalid Firebase Database URL', parsedUrl);\r\n    if (!pathIsEmpty(parsedUrl.path)) {\r\n        fatal('Database URL must point to the root of a Firebase Database ' +\r\n            '(not including a child path).');\r\n    }\r\n    const repo = repoManagerCreateRepo(repoInfo, app, authTokenProvider, new AppCheckTokenProvider(app.name, appCheckProvider));\r\n    return new Database(repo, app);\r\n}\r\n/**\r\n * Remove the repo and make sure it is disconnected.\r\n *\r\n */\r\nfunction repoManagerDeleteRepo(repo, appName) {\r\n    const appRepos = repos[appName];\r\n    // This should never happen...\r\n    if (!appRepos || appRepos[repo.key] !== repo) {\r\n        fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\r\n    }\r\n    repoInterrupt(repo);\r\n    delete appRepos[repo.key];\r\n}\r\n/**\r\n * Ensures a repo doesn't already exist and then creates one using the\r\n * provided app.\r\n *\r\n * @param repoInfo - The metadata about the Repo\r\n * @returns The Repo object for the specified server / repoName.\r\n */\r\nfunction repoManagerCreateRepo(repoInfo, app, authTokenProvider, appCheckProvider) {\r\n    let appRepos = repos[app.name];\r\n    if (!appRepos) {\r\n        appRepos = {};\r\n        repos[app.name] = appRepos;\r\n    }\r\n    let repo = appRepos[repoInfo.toURLString()];\r\n    if (repo) {\r\n        fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');\r\n    }\r\n    repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\r\n    appRepos[repoInfo.toURLString()] = repo;\r\n    return repo;\r\n}\r\n/**\r\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\r\n */\r\nfunction repoManagerForceRestClient(forceRestClient) {\r\n    useRestClient = forceRestClient;\r\n}\r\n/**\r\n * Class representing a Firebase Realtime Database.\r\n */\r\nclass Database {\r\n    /** @hideconstructor */\r\n    constructor(_repoInternal, \r\n    /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\r\n    app) {\r\n        this._repoInternal = _repoInternal;\r\n        this.app = app;\r\n        /** Represents a `Database` instance. */\r\n        this['type'] = 'database';\r\n        /** Track if the instance has been used (root or repo accessed) */\r\n        this._instanceStarted = false;\r\n    }\r\n    get _repo() {\r\n        if (!this._instanceStarted) {\r\n            repoStart(this._repoInternal, this.app.options.appId, this.app.options['databaseAuthVariableOverride']);\r\n            this._instanceStarted = true;\r\n        }\r\n        return this._repoInternal;\r\n    }\r\n    get _root() {\r\n        if (!this._rootInternal) {\r\n            this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\r\n        }\r\n        return this._rootInternal;\r\n    }\r\n    _delete() {\r\n        if (this._rootInternal !== null) {\r\n            repoManagerDeleteRepo(this._repo, this.app.name);\r\n            this._repoInternal = null;\r\n            this._rootInternal = null;\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n    _checkNotDeleted(apiName) {\r\n        if (this._rootInternal === null) {\r\n            fatal('Cannot call ' + apiName + ' on a deleted database.');\r\n        }\r\n    }\r\n}\r\nfunction checkTransportInit() {\r\n    if (TransportManager.IS_TRANSPORT_INITIALIZED) {\r\n        warn('Transport has already been initialized. Please call this function before calling ref or setting up a listener');\r\n    }\r\n}\r\n/**\r\n * Force the use of websockets instead of longPolling.\r\n */\r\nfunction forceWebSockets() {\r\n    checkTransportInit();\r\n    BrowserPollConnection.forceDisallow();\r\n}\r\n/**\r\n * Force the use of longPolling instead of websockets. This will be ignored if websocket protocol is used in databaseURL.\r\n */\r\nfunction forceLongPolling() {\r\n    checkTransportInit();\r\n    WebSocketConnection.forceDisallow();\r\n    BrowserPollConnection.forceAllow();\r\n}\r\n/**\r\n * Returns the instance of the Realtime Database SDK that is associated\r\n * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with\r\n * with default settings if no instance exists or if the existing instance uses\r\n * a custom database URL.\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\r\n * Database instance is associated with.\r\n * @param url - The URL of the Realtime Database instance to connect to. If not\r\n * provided, the SDK connects to the default instance of the Firebase App.\r\n * @returns The `Database` instance of the provided app.\r\n */\r\nfunction getDatabase(app = getApp(), url) {\r\n    const db = _getProvider(app, 'database').getImmediate({\r\n        identifier: url\r\n    });\r\n    if (!db._instanceStarted) {\r\n        const emulator = getDefaultEmulatorHostnameAndPort('database');\r\n        if (emulator) {\r\n            connectDatabaseEmulator(db, ...emulator);\r\n        }\r\n    }\r\n    return db;\r\n}\r\n/**\r\n * Modify the provided instance to communicate with the Realtime Database\r\n * emulator.\r\n *\r\n * <p>Note: This method must be called before performing any other operation.\r\n *\r\n * @param db - The instance to modify.\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 8080)\r\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\r\n */\r\nfunction connectDatabaseEmulator(db, host, port, options = {}) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('useEmulator');\r\n    if (db._instanceStarted) {\r\n        fatal('Cannot call useEmulator() after instance has already been initialized.');\r\n    }\r\n    const repo = db._repoInternal;\r\n    let tokenProvider = undefined;\r\n    if (repo.repoInfo_.nodeAdmin) {\r\n        if (options.mockUserToken) {\r\n            fatal('mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".');\r\n        }\r\n        tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\r\n    }\r\n    else if (options.mockUserToken) {\r\n        const token = typeof options.mockUserToken === 'string'\r\n            ? options.mockUserToken\r\n            : createMockUserToken(options.mockUserToken, db.app.options.projectId);\r\n        tokenProvider = new EmulatorTokenProvider(token);\r\n    }\r\n    // Modify the repo to apply emulator settings\r\n    repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\r\n}\r\n/**\r\n * Disconnects from the server (all Database operations will be completed\r\n * offline).\r\n *\r\n * The client automatically maintains a persistent connection to the Database\r\n * server, which will remain active indefinitely and reconnect when\r\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\r\n * to control the client connection in cases where a persistent connection is\r\n * undesirable.\r\n *\r\n * While offline, the client will no longer receive data updates from the\r\n * Database. However, all Database operations performed locally will continue to\r\n * immediately fire events, allowing your application to continue behaving\r\n * normally. Additionally, each operation performed locally will automatically\r\n * be queued and retried upon reconnection to the Database server.\r\n *\r\n * To reconnect to the Database and begin receiving remote events, see\r\n * `goOnline()`.\r\n *\r\n * @param db - The instance to disconnect.\r\n */\r\nfunction goOffline(db) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('goOffline');\r\n    repoInterrupt(db._repo);\r\n}\r\n/**\r\n * Reconnects to the server and synchronizes the offline Database state\r\n * with the server state.\r\n *\r\n * This method should be used after disabling the active connection with\r\n * `goOffline()`. Once reconnected, the client will transmit the proper data\r\n * and fire the appropriate events so that your client \"catches up\"\r\n * automatically.\r\n *\r\n * @param db - The instance to reconnect.\r\n */\r\nfunction goOnline(db) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('goOnline');\r\n    repoResume(db._repo);\r\n}\r\nfunction enableLogging(logger, persistent) {\r\n    enableLogging$1(logger, persistent);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction registerDatabase(variant) {\r\n    setSDKVersion(SDK_VERSION$1);\r\n    _registerComponent(new Component('database', (container, { instanceIdentifier: url }) => {\r\n        const app = container.getProvider('app').getImmediate();\r\n        const authProvider = container.getProvider('auth-internal');\r\n        const appCheckProvider = container.getProvider('app-check-internal');\r\n        return repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url);\r\n    }, \"PUBLIC\" /* ComponentType.PUBLIC */).setMultipleInstances(true));\r\n    registerVersion(name, version, variant);\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name, version, 'esm2017');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst SERVER_TIMESTAMP = {\r\n    '.sv': 'timestamp'\r\n};\r\n/**\r\n * Returns a placeholder value for auto-populating the current timestamp (time\r\n * since the Unix epoch, in milliseconds) as determined by the Firebase\r\n * servers.\r\n */\r\nfunction serverTimestamp() {\r\n    return SERVER_TIMESTAMP;\r\n}\r\n/**\r\n * Returns a placeholder value that can be used to atomically increment the\r\n * current database value by the provided delta.\r\n *\r\n * @param delta - the amount to modify the current value atomically.\r\n * @returns A placeholder value for modifying data atomically server-side.\r\n */\r\nfunction increment(delta) {\r\n    return {\r\n        '.sv': {\r\n            'increment': delta\r\n        }\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A type for the resolve value of {@link runTransaction}.\r\n */\r\nclass TransactionResult {\r\n    /** @hideconstructor */\r\n    constructor(\r\n    /** Whether the transaction was successfully committed. */\r\n    committed, \r\n    /** The resulting data snapshot. */\r\n    snapshot) {\r\n        this.committed = committed;\r\n        this.snapshot = snapshot;\r\n    }\r\n    /** Returns a JSON-serializable representation of this object. */\r\n    toJSON() {\r\n        return { committed: this.committed, snapshot: this.snapshot.toJSON() };\r\n    }\r\n}\r\n/**\r\n * Atomically modifies the data at this location.\r\n *\r\n * Atomically modify the data at this location. Unlike a normal `set()`, which\r\n * just overwrites the data regardless of its previous value, `runTransaction()` is\r\n * used to modify the existing value to a new value, ensuring there are no\r\n * conflicts with other clients writing to the same location at the same time.\r\n *\r\n * To accomplish this, you pass `runTransaction()` an update function which is\r\n * used to transform the current value into a new value. If another client\r\n * writes to the location before your new value is successfully written, your\r\n * update function will be called again with the new current value, and the\r\n * write will be retried. This will happen repeatedly until your write succeeds\r\n * without conflict or you abort the transaction by not returning a value from\r\n * your update function.\r\n *\r\n * Note: Modifying data with `set()` will cancel any pending transactions at\r\n * that location, so extreme care should be taken if mixing `set()` and\r\n * `runTransaction()` to update the same data.\r\n *\r\n * Note: When using transactions with Security and Firebase Rules in place, be\r\n * aware that a client needs `.read` access in addition to `.write` access in\r\n * order to perform a transaction. This is because the client-side nature of\r\n * transactions requires the client to read the data in order to transactionally\r\n * update it.\r\n *\r\n * @param ref - The location to atomically modify.\r\n * @param transactionUpdate - A developer-supplied function which will be passed\r\n * the current data stored at this location (as a JavaScript object). The\r\n * function should return the new value it would like written (as a JavaScript\r\n * object). If `undefined` is returned (i.e. you return with no arguments) the\r\n * transaction will be aborted and the data at this location will not be\r\n * modified.\r\n * @param options - An options object to configure transactions.\r\n * @returns A `Promise` that can optionally be used instead of the `onComplete`\r\n * callback to handle success and failure.\r\n */\r\nfunction runTransaction(ref, \r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\ntransactionUpdate, options) {\r\n    var _a;\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('Reference.transaction', ref._path);\r\n    if (ref.key === '.length' || ref.key === '.keys') {\r\n        throw ('Reference.transaction failed: ' + ref.key + ' is a read-only object.');\r\n    }\r\n    const applyLocally = (_a = options === null || options === void 0 ? void 0 : options.applyLocally) !== null && _a !== void 0 ? _a : true;\r\n    const deferred = new Deferred();\r\n    const promiseComplete = (error, committed, node) => {\r\n        let dataSnapshot = null;\r\n        if (error) {\r\n            deferred.reject(error);\r\n        }\r\n        else {\r\n            dataSnapshot = new DataSnapshot(node, new ReferenceImpl(ref._repo, ref._path), PRIORITY_INDEX);\r\n            deferred.resolve(new TransactionResult(committed, dataSnapshot));\r\n        }\r\n    };\r\n    // Add a watch to make sure we get server updates.\r\n    const unwatcher = onValue(ref, () => { });\r\n    repoStartTransaction(ref._repo, ref._path, transactionUpdate, promiseComplete, unwatcher, applyLocally);\r\n    return deferred.promise;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nPersistentConnection;\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nPersistentConnection.prototype.simpleListen = function (pathString, onComplete) {\r\n    this.sendRequest('q', { p: pathString }, onComplete);\r\n};\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nPersistentConnection.prototype.echo = function (data, onEcho) {\r\n    this.sendRequest('echo', { d: data }, onEcho);\r\n};\r\n// RealTimeConnection properties that we use in tests.\r\nConnection;\r\n/**\r\n * @internal\r\n */\r\nconst hijackHash = function (newHash) {\r\n    const oldPut = PersistentConnection.prototype.put;\r\n    PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\r\n        if (hash !== undefined) {\r\n            hash = newHash();\r\n        }\r\n        oldPut.call(this, pathString, data, onComplete, hash);\r\n    };\r\n    return function () {\r\n        PersistentConnection.prototype.put = oldPut;\r\n    };\r\n};\r\nRepoInfo;\r\n/**\r\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\r\n * @internal\r\n */\r\nconst forceRestClient = function (forceRestClient) {\r\n    repoManagerForceRestClient(forceRestClient);\r\n};\n\n/**\r\n * Firebase Realtime Database\r\n *\r\n * @packageDocumentation\r\n */\r\nregisterDatabase();\n\nexport { DataSnapshot, Database, OnDisconnect, QueryConstraint, TransactionResult, QueryImpl as _QueryImpl, QueryParams as _QueryParams, ReferenceImpl as _ReferenceImpl, forceRestClient as _TEST_ACCESS_forceRestClient, hijackHash as _TEST_ACCESS_hijackHash, repoManagerDatabaseFromApp as _repoManagerDatabaseFromApp, setSDKVersion as _setSDKVersion, validatePathString as _validatePathString, validateWritablePath as _validateWritablePath, child, connectDatabaseEmulator, enableLogging, endAt, endBefore, equalTo, forceLongPolling, forceWebSockets, get, getDatabase, goOffline, goOnline, increment, limitToFirst, limitToLast, off, onChildAdded, onChildChanged, onChildMoved, onChildRemoved, onDisconnect, onValue, orderByChild, orderByKey, orderByPriority, orderByValue, push, query, ref, refFromURL, remove, runTransaction, serverTimestamp, set, setPriority, setWithPriority, startAfter, startAt, update };\n//# sourceMappingURL=index.esm2017.js.map\n"],"names":["name","version","SDK_VERSION","DOMStorageWrapper","constructor","domStorage_","this","prefix_","set","key","value","removeItem","prefixedName_","setItem","get","storedVal","getItem","remove","toString","MemoryStorage","cache_","isInMemoryStorage","createStoragefor","domStorageName","window","domStorage","e","PersistentStorage","SessionStorage","logClient","LUIDGenerator","id","sha1","str","utf8Bytes","update","sha1Bytes","digest","buildLogMessage_","varArgs","message","i","length","arg","Array","isArray","apply","logger","firstLog_","enableLogging$1","logger_","persistent","logLevel","log","bind","logWrapper","prefix","error","fatal","Error","warn","isInvalidJSONNumber","data","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","MIN_NAME","MAX_NAME","nameCompare","a","b","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","obj","ObjectToUniqueKey","keys","k","push","sort","splitStringBySize","segsize","len","dataSegs","c","substring","each","fn","hasOwnProperty","doubleToIEEE754String","v","bias","s","f","ln","Infinity","Math","abs","pow","min","floor","LN2","round","bits","reverse","join","hexByteString","hexByte","parseInt","substr","toLowerCase","INTEGER_REGEXP_","RegExp","test","intVal","exceptionGuard","setTimeout","stack","setTimeoutNonBlocking","time","timeout","Deno","unrefTimer","AppCheckTokenProvider","appName_","appCheckProvider","appCheck","getImmediate","optional","then","getToken","forceRefresh","Promise","resolve","reject","addTokenChangeListener","listener","_a","addTokenListener","notifyForInvalidToken","FirebaseAuthTokenProvider","firebaseOptions_","authProvider_","auth_","onInit","auth","catch","code","addAuthTokenListener","removeTokenChangeListener","removeAuthTokenListener","errorMessage","EmulatorTokenProvider","accessToken","OWNER","PROTOCOL_VERSION","FORGE_DOMAIN_RE","APP_CHECK_TOKEN_PARAM","WEBSOCKET","LONG_POLLING","RepoInfo","host","secure","namespace","webSocketOnly","nodeAdmin","persistenceKey","includeNamespaceInQueryParams","isUsingEmulator","_host","_domain","indexOf","internalHost","isCacheableHost","isCustomHost","newHost","toURLString","protocol","query","repoInfoConnectionURL","repoInfo","type","params","connURL","repoInfoNeedsQueryParam","pairs","StatsCollection","counters_","incrementCounter","amount","collections","reporters","statsManagerGetCollection","hashString","PacketReceiver","onMessage_","pendingResponses","currentResponseNum","closeAfterResponse","onClose","closeAfter","responseNum","callback","handleResponse","requestNum","toProcess","FIREBASE_LONGPOLL_START_PARAM","BrowserPollConnection","connId","applicationId","appCheckToken","authToken","transportSessionId","lastSessionId","bytesSent","bytesReceived","everConnected_","log_","stats_","urlFn","open","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","isClosed_","connectTimeoutTimer_","onClosed_","document","readyState","called","wrappedFn","body","addEventListener","attachEvent","executeWhenDOMReady","scriptTagHolder","FirebaseIFrameScriptHolder","args","command","arg1","arg2","arg3","arg4","incrementIncomingBytes_","clearTimeout","password","sendNewPolls","pN","urlParams","random","uniqueCallbackIdentifier","location","hostname","connectURL","addTag","start","startLongPoll","addDisconnectPingFrame","static","forceAllow_","forceDisallow_","createElement","href","Windows","UI","markConnectionHealthy","shutdown_","close","myDisconnFrame","removeChild","send","dataStr","base64data","MAX_URL_DATA_SIZE","enqueueSegment","pw","src","style","display","appendChild","commandCB","onMessageCB","outstandingRequests","Set","pendingSegs","currentSerial","myIFrame","createIFrame_","script","domain","iframeContents","doc","write","iframe","contentWindow","contentDocument","alive","textContent","myID","myPW","newRequest_","size","theURL","curDataString","d","theSeg","shift","seg","ts","addLongPollTag_","segnum","totalsegs","url","serial","add","doNewRequest","delete","keepaliveTimeout","loadCB","doNodeLongPoll","newScript","async","onload","onreadystatechange","rstate","parentNode","onerror","WebSocketImpl","MozWebSocket","WebSocket","WebSocketConnection","keepaliveTimer","frames","totalFrames","connectionURL_","options","device","headers","process","platform","env","proxy","origin","mySock","onopen","onclose","onmessage","m","handleIncomingFrame","isOldAndroid","navigator","userAgent","oldAndroidRegex","oldAndroidMatch","match","parseFloat","appendFrame_","fullMess","jsonMess","handleNewFrameCount_","frameCount","extractFrameCount_","isNaN","mess","resetKeepAlive","remainingData","sendString_","String","clearInterval","setInterval","responsesRequiredToBeHealthy","healthyTimeout","TransportManager","initTransports_","ALL_TRANSPORTS","IS_TRANSPORT_INITIALIZED","globalTransportInitialized_","isWebSocketsAvailable","isSkipPollConnection","previouslyFailed","transports_","transports","transport","initialTransport","upgradeTransport","Connection","repoInfo_","applicationId_","appCheckToken_","authToken_","onReady_","onKill_","connectionCount","pendingDataMessages","state_","transportManager_","start_","conn","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeoutMS","healthyTimeout_","everConnected","onConnectionLost_","onSecondaryConnectionLost_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","sendRequest","dataMsg","msg","t","sendData_","tryCleanupConnection","onSecondaryControl_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","proceedWithUpgrade_","onControl_","onDataMessage_","onPrimaryResponse_","payload","handshakePayload","Object","assign","h","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","sessionId","onConnectionEstablished_","tryStartUpgrade_","startUpgrade_","closeConnections_","reason","ServerActions","put","pathString","onComplete","hash","merge","refreshAuthToken","token","refreshAppCheckToken","onDisconnectPut","onDisconnectMerge","onDisconnectCancel","reportStats","stats","EventEmitter","allowedEvents_","listeners_","trigger","eventType","listeners","context","on","validateEventType_","eventData","getInitialEvent","off","splice","find","et","OnlineMonitor","super","online_","currentlyOnline","MAX_PATH_DEPTH","MAX_PATH_LENGTH_BYTES","Path","pathOrString","pieceNum","pieces_","split","copyTo","pieceNum_","newEmptyPath","pathGetFront","path","pathGetLength","pathPopFront","pathGetBack","pathSlice","begin","slice","pathParent","pieces","pathChild","childPathObj","childPieces","pathIsEmpty","newRelativePath","outerPath","innerPath","outer","inner","pathEquals","other","j","pathContains","ValidationPath","errorPrefix_","parts_","byteLength_","max","validationPathCheckValid","validationPath","validationPathToErrorString","VisibilityMonitor","hidden","visibilityChange","visible_","visible","RECONNECT_MIN_DELAY","PersistentConnection","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","appCheckTokenProvider_","authOverride_","nextPersistentConnectionId_","interruptReasons_","listens","Map","outstandingPuts_","outstandingGets_","outstandingPutCount_","outstandingGetCount_","onDisconnectRequestQueue_","connected_","reconnectDelay_","maxReconnectDelay_","securityDebugCallback_","establishConnectionTimer_","requestCBHash_","requestNumber_","realtime_","forceTokenRefresh_","invalidAuthTokenCount_","invalidAppCheckTokenCount_","firstConnection_","lastConnectionAttemptTime_","lastConnectionEstablishedTime_","getInstance","onVisible_","onOnline_","action","onResponse","curReqNum","r","initConnection_","deferred","outstandingGet","request","p","_path","q","_queryObject","index","sendGet_","promise","listen","currentHashFn","tag","queryId","_queryIdentifier","has","_queryParams","isDefault","loadsAllData","listenSpec","hashFn","sendListen_","req","status","warnOnListenWarnings_","removeListen_","warnings","indexSpec","getIndex","indexPath","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","tryAppCheck","authMethod","requestData","cred","res","onAuthRevoked_","onAppCheckRevoked_","unlisten","sendUnlisten_","queryObj","sendOnDisconnect_","response","putInternal","undefined","sendPut_","queued","result","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","Date","getTime","handleTimestamp_","sendConnectStats_","restoreState_","scheduleConnect_","establishConnection_","online","onRealtimeDisconnect_","cancelSentTransactions_","shouldReconnect_","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage","onReady","nextConnectionId_","canceled","connection","closeFn","sendRequestFn","all","interrupt","resume","delta","serverTimeOffset","map","normalizedPathString","statusCode","explanation","console","replace","queries","values","clientName","NamedNode","node","Index","getCompare","compare","indexedValueChanged","oldNode","newNode","oldWrapped","newWrapped","minPost","MIN","__EMPTY_NODE","KeyIndex","val","isDefinedOn","maxPost","makePost","indexValue","KEY_INDEX","SortedMapIterator","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","cmp","isEmpty","left","right","getNext","pop","hasNext","peek","LLRBNode","color","RED","SortedMap","EMPTY_NODE","copy","count","inorderTraversal","reverseTraversal","min_","minKey","maxKey","insert","n","fixUp_","removeMin_","isRed_","moveRedLeft_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","checkMaxDepth_","blackDepth","check_","BLACK","comparator_","root_","getPredecessorKey","rightParent","getIterator","resultGenerator","getIteratorFrom","getReverseIteratorFrom","getReverseIterator","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","MAX_NODE$2","priorityHashText","priority","validatePriorityNode","priorityNode","isLeafNode","getPriority","__childrenNodeConstructor","nodeFromJSON$1","MAX_NODE$1","LeafNode","value_","priorityNode_","lazyHash_","updatePriority","newPriorityNode","getImmediateChild","childName","getChild","hasChild","getPredecessorChildName","childNode","updateImmediateChild","newChildNode","updateChild","front","numChildren","forEachChild","exportFormat","getValue","toHash","compareTo","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","withIndex","isIndexed","equals","PRIORITY_INDEX","aPriority","bPriority","indexCmp","LOG_2","Base12Num","num","current_","mask","bits_","nextBitIsOne","buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","low","high","namedNode","middle","root","base12","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","buildFrom12Array","_defaultIndexMap","fallbackObject","IndexMap","indexes_","indexSet_","Default","indexKey","sortedMap","hasIndex","indexDefinition","addIndex","existingChildren","sawIndexedValue","iter","Wrap","newIndex","next","indexName","newIndexSet","newIndexes","addToIndexes","indexedChildren","existingSnap","newChildren","removeFromIndexes","ChildrenNode","children_","indexMap_","child","newIndexMap","newPriority","newImmediateChild","numKeys","allIntegerKeys","array","childHash","idx","resolveIndex_","predecessor","getFirstChildName","getFirstChild","getLastChildName","getLastChild","wrappedNode","startPost","iterator","endPost","MAX_NODE","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","defineProperties","MAX","setMaxNode","USE_HINZE","nodeFromJSON","json","childData","children","childrenHavePriority","childSet","sortedChildSet","setNodeFromJSON","PathIndex","indexPath_","extractChild","snap","aChild","bChild","valueNode","VALUE_INDEX","changeValue","snapshotNode","changeChildAdded","changeChildRemoved","changeChildChanged","oldSnap","QueryParams","limitSet_","startSet_","startNameSet_","startAfterSet_","endSet_","endNameSet_","endBeforeSet_","limit_","viewFrom_","indexStartValue_","indexStartName_","indexEndValue_","indexEndName_","index_","hasStart","isViewFromLeft","getIndexStartValue","getIndexStartName","hasEnd","getIndexEndValue","getIndexEndName","hasLimit","hasAnchoredLimit","getLimit","queryParamsToRestQueryStringParameters","queryParams","qs","orderBy","startParam","endParam","queryParamsGetQueryObject","viewFrom","ReadonlyRestClient","listens_","listenId","getListenId_","thisListen","queryStringParameters","restRequest_","xhr","XMLHttpRequest","responseText","SnapshotHolder","rootNode_","getNode","updateSnapshot","newSnapshotNode","newSparseSnapshotTree","sparseSnapshotTreeRemember","sparseSnapshotTree","clear","childKey","sparseSnapshotTreeForEachTree","prefixPath","func","forEach","tree","sparseSnapshotTreeForEachChild","StatsListener","collection_","last_","newStats","stat","StatsReporter","collection","server_","statsToReport_","statsListener_","reportStats_","reportedStats","haveStatsToReport","OperationType","newOperationSourceServerTaggedQuery","fromUser","fromServer","tagged","AckUserWrite","affectedTree","revert","ACK_USER_WRITE","source","operationForChild","subtree","Overwrite","OVERWRITE","Merge","MERGE","CacheNode","node_","fullyInitialized_","filtered_","isFullyInitialized","isFiltered","isCompleteForPath","isCompleteForChild","eventGeneratorGenerateEventsForType","eventGenerator","events","changes","registrations","eventCache","filteredChanges","filter","change","aWrapped","bWrapped","eventGeneratorCompareChanges","materializedChange","prevName","eventGeneratorMaterializeSingleChange","registration","respondsTo","createEvent","query_","newViewCache","serverCache","viewCacheUpdateEventSnap","viewCache","eventSnap","complete","filtered","viewCacheUpdateServerSnap","serverSnap","viewCacheGetCompleteEventSnap","viewCacheGetCompleteServerSnap","emptyChildrenSingleton","ImmutableTree","EmptyChildren","childPath","childSnap","findRootMostMatchingPathAndValue","relativePath","predicate","childExistingPathAndValue","findRootMostValueAndPath","toSet","newChild","setTree","newTree","fold","fold_","pathSoFar","accum","findOnPath","findOnPath_","pathToFollow","nextChild","foreachOnPath","foreachOnPath_","currentRelativePath","foreach","foreach_","foreachChild","CompoundWrite","writeTree_","compoundWriteAddWrite","compoundWrite","rootmost","rootMostPath","newWriteTree","compoundWriteAddWrites","updates","newWrite","compoundWriteRemoveWrite","empty","compoundWriteHasCompleteWrite","compoundWriteGetCompleteNode","compoundWriteGetCompleteChildren","compoundWriteChildCompoundWrite","shadowingNode","compoundWriteIsEmpty","compoundWriteApply","applySubtreeWrite","writeTree","priorityWrite","writeTreeChildWrites","newWriteTreeRef","writeTreeRemoveWrite","writeId","allWrites","findIndex","writeToRemove","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","writeTreeRecordContainsPath_","visibleWrites","writeTreeLayerTree_","writeTreeDefaultFilter_","lastWriteId","writeTreeResetTree_","writeRecord","writes","treeRoot","writePath","deepNode","writeTreeCalcCompleteEventCache","treePath","completeServerCache","writeIdsToExclude","includeHiddenWrites","subMerge","writeTreeRefCalcCompleteEventCache","writeTreeRef","writeTreeRefCalcCompleteEventChildren","completeServerChildren","completeChildren","topLevelSet","writeTreeCalcCompleteEventChildren","writeTreeRefCalcEventCacheAfterServerOverwrite","existingEventSnap","existingServerSnap","childMerge","writeTreeCalcEventCacheAfterServerOverwrite","writeTreeRefShadowingWrite","writeTreeShadowingWrite","writeTreeRefCalcIndexedSlice","completeServerData","toIterate","nodes","writeTreeCalcIndexedSlice","writeTreeRefCalcCompleteChild","existingServerCache","writeTreeCalcCompleteChild","writeTreeRefChild","ChildChangeAccumulator","changeMap","trackChildChange","oldChange","oldType","getChanges","from","NO_COMPLETE_CHILD_SOURCE","getCompleteChild","getChildAfterChild","WriteTreeCompleteChildSource","writes_","viewCache_","optCompleteServerCache_","serverNode","viewProcessorApplyOperation","viewProcessor","oldViewCache","operation","writesCache","completeCache","accumulator","filterServerNode","overwrite","viewProcessorApplyUserOverwrite","viewProcessorApplyServerOverwrite","changedChildren","curViewCache","viewProcessorCacheHasChild","viewProcessorApplyUserMerge","viewProcessorApplyServerMerge","ackUserWrite","oldEventCache","newEventCache","serverChildren","updateFullNode","filtersNodes","viewProcessorRevertUserWrite","ackPath","mergePath","serverCachePath","viewProcessorAckUserWrite","LISTEN_COMPLETE","oldServerNode","viewProcessorGenerateEventCacheAfterServerEvent","viewProcessorListenComplete","isLeafOrEmpty","oldCompleteSnap","viewProcessorMaybeAddValueEvent","changePath","oldEventSnap","completeEventChildren","completeNode","oldEventNode","updatedPriority","childChangePath","newEventChild","eventChildUpdate","changedSnap","oldServerSnap","newServerCache","serverFilter","getIndexedFilter","newServerNode","oldChild","viewProcessorApplyMerge","viewMergeTree","childMergeTree","isUnknownDeepMerge","viewGetCompleteServerCache","view","cache","viewApplyOperation","processor_","viewGenerateEventsForChanges_","eventRegistration","eventRegistrations_","eventRegistrations","moves","eventGeneratorGenerateEventsForChanges","eventGenerator_","referenceConstructor$1","referenceConstructor","syncPointApplyOperation","syncPoint","optCompleteServerCache","views","concat","syncPointGetCompleteServerCache","SyncTree","listenProvider_","syncPointTree_","pendingWriteTree_","tagToQueryMap","queryToTagMap","syncTreeApplyUserOverwrite","syncTree","newData","writeTreeAddOverwrite","syncTreeApplyOperationToSyncPoints_","syncTreeAckUserWrite","record","writeTreeGetWrite","syncTreeApplyServerOverwrite","syncTreeApplyTaggedQueryOverwrite","queryKey","syncTreeQueryKeyForTag_","syncTreeParseQueryKey_","queryPath","syncTreeApplyTaggedOperation_","syncTreeCalcCompleteEventCache","syncTreeApplyOperationHelper_","syncPointTree","syncTreeApplyOperationDescendantsHelper_","childOperation","childServerCache","childWritesCache","splitIndex","ExistingValueProvider","DeferredValueProvider","syncTree_","path_","generateWithValues","resolveDeferredLeafValue","existingVal","serverValues","resolveScalarDeferredValue","resolveComplexDeferredValue","JSON","stringify","op","existing","unused","existingNode","resolveDeferredValueTree","resolveDeferredValue","resolveDeferredValueSnapshot","rawPri","leafNode","childrenNode","Tree","parent","childCount","treeSubTree","pathObj","treeGetValue","treeSetValue","treeUpdateParents","treeHasChildren","treeForEachChild","treeForEachDescendant","includeSelf","childrenFirst","treeGetPath","childEmpty","treeIsEmpty","childExists","treeUpdateChild","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","MAX_LEAF_SIZE_","isValidKey","isValidPathString","validateFirebaseDataArg","fnName","validateFirebaseData","errorPrefix","hasDotValue","hasActualChild","validationPathPush","last","validationPathPop","validatePathString","argumentName","validateRootPathString","validateWritablePath","validateUrl","parsedUrl","isValidRootPathString","EventQueue","eventLists_","recursionDepth_","eventQueueQueueEvents","eventQueue","eventDataList","currList","getPath","eventQueueRaiseEventsForChangedPath","changedPath","eventQueueRaiseQueuedEventsMatchingPredicate","eventPath","sentAll","eventList","eventListRaise","eventFn","getEventRunner","INTERRUPT_REASON","MAX_TRANSACTION_RETRIES","Repo","forceRestClient_","appCheckProvider_","dataUpdateCount","eventQueue_","nextWriteId_","interceptServerDataCallback_","transactionQueueTree_","persistentConnection_","repoStart","repo","appId","authOverride","search","isMerge","repoOnDataUpdate","repoOnConnectStatus","connectStatus","repoUpdateInfo","repoOnServerInfoUpdate","statsReporter_","creatorFunction","statsManagerGetOrCreateReporter","infoData_","infoSyncTree_","startListening","infoEvents","stopListening","serverSyncTree_","repoServerTime","offset","repoGenerateServerValues","taggedChildren","raw","changeTree","fromObject","syncTreeApplyTaggedQueryMerge","taggedSnap","syncTreeApplyServerMerge","affectedPath","repoRerunTransactions","repoLog","resolvedOnDisconnectTree","resolved","repoAbortTransactions","repoRunOnDisconnectEvents","repoGetNextWriteId","repoSetWithPriority","newVal","newNodeUnresolved","success","clearEvents","repoCallOnCompleteCallback","repoInterrupt","toUpperCase","repoGetLatestState","excludeSets","repoSendReadyTransactions","repoPruneCompletedTransactionsBelowNode","queue","repoBuildTransactionQueue","every","transaction","setsToIgnore","txn","currentWriteId","latestState","snapToSend","latestHash","retryCount","currentOutputSnapshotRaw","dataToSend","pathToSend","callbacks","currentOutputSnapshotResolved","unwatcher","abortReason","repoSendTransactionQueue","rootMostTransactionNode","repoGetAncestorTransactionNode","txnsToRerun","abortTransaction","currentNode","currentInputSnapshot","newDataNode","oldWriteId","newNodeResolved","applyLocally","repoRerunTransactionQueue","transactionNode","transactionQueue","repoAggregateTransactionQueuesForNode","order","nodeQueue","to","treeForEachAncestor","repoAbortTransactionsOnNode","lastSent","parseRepoInfo","dataURL","parseDatabaseURL","scheme","subdomain","port","colonInd","slashInd","questionMarkInd","pathStringDecoded","piece","decodeURIComponent","decodePath","queryString","results","charAt","segment","kv","decodeQuery","hostWithoutPort","dotInd","PUSH_CHARS","nextPushId","lastPushTime","lastRandChars","now","duplicateTime","timeStampChars","QueryImpl","_repo","_orderByCalled","ref","ReferenceImpl","isEqual","sameRepo","samePath","sameQueryIdentifier","toJSON","encodeURIComponent","pathToUrlEncodedString","parentPath","db","_checkNotDeleted","_root","thennablePushRef","pushRef","wrapCallback","syncPointSetReferenceConstructor","syncTreeSetReferenceConstructor","FIREBASE_DATABASE_EMULATOR_HOST_VAR","repos","useRestClient","repoManagerDatabaseFromApp","app","authProvider","dbUrl","databaseURL","projectId","isEmulator","dbEmulatorHost","authTokenProvider","appRepos","repoManagerCreateRepo","Database","_repoInternal","_instanceStarted","_rootInternal","_delete","appName","repoManagerDeleteRepo","apiName","getDatabase","identifier","emulator","tokenProvider","mockUserToken","repoManagerApplyEmulatorSettings","connectDatabaseEmulator","prototype","simpleListen","echo","onEcho","variant","setSDKVersion","container","instanceIdentifier","getProvider","setMultipleInstances"],"sourceRoot":""}